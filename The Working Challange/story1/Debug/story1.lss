
story1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000238  00800100  0000118c  00001200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000118c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001468  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bb3  00000000  00000000  00001548  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008df  00000000  00000000  000020fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009ae  00000000  00000000  000029da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  00003388  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000426  00000000  00000000  000034f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000027e  00000000  00000000  0000391e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00003b9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	13 e0       	ldi	r17, 0x03	; 3
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e8       	ldi	r30, 0x8C	; 140
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 33       	cpi	r26, 0x38	; 56
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
      8a:	0e 94 26 08 	call	0x104c	; 0x104c <main>
      8e:	0c 94 c4 08 	jmp	0x1188	; 0x1188 <_exit>

00000092 <__bad_interrupt>:
      92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <mul2>:
 * Multiply two numbers in the GF(2^8) finite field defined
 * by the polynomial x^8 + x^4 + x^3 + x + 1 = 0
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
inline static uint8_t mul2(uint8_t a) {
      96:	cf 93       	push	r28
      98:	df 93       	push	r29
      9a:	1f 92       	push	r1
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	89 83       	std	Y+1, r24	; 0x01
	
	return (a&0x80)?((a<<1)^0x1b):(a<<1);
      a2:	89 81       	ldd	r24, Y+1	; 0x01
      a4:	88 23       	and	r24, r24
      a6:	4c f4       	brge	.+18     	; 0xba <mul2+0x24>
      a8:	89 81       	ldd	r24, Y+1	; 0x01
      aa:	88 2f       	mov	r24, r24
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	88 0f       	add	r24, r24
      b0:	99 1f       	adc	r25, r25
      b2:	98 2f       	mov	r25, r24
      b4:	8b e1       	ldi	r24, 0x1B	; 27
      b6:	89 27       	eor	r24, r25
      b8:	02 c0       	rjmp	.+4      	; 0xbe <mul2+0x28>
      ba:	89 81       	ldd	r24, Y+1	; 0x01
      bc:	88 0f       	add	r24, r24
	
}
      be:	0f 90       	pop	r0
      c0:	df 91       	pop	r29
      c2:	cf 91       	pop	r28
      c4:	08 95       	ret

000000c6 <inv_shift_rows>:
 *  Row0: s0  s4  s8  s12   >>> 0 byte
 *  Row1: s1  s5  s9  s13   >>> 1 byte
 *  Row2: s2  s6  s10 s14   >>> 2 bytes
 *  Row3: s3  s7  s11 s15   >>> 3 bytes
 */
static void inv_shift_rows(uint8_t *state) {
      c6:	cf 93       	push	r28
      c8:	df 93       	push	r29
      ca:	00 d0       	rcall	.+0      	; 0xcc <inv_shift_rows+0x6>
      cc:	1f 92       	push	r1
      ce:	cd b7       	in	r28, 0x3d	; 61
      d0:	de b7       	in	r29, 0x3e	; 62
      d2:	9b 83       	std	Y+3, r25	; 0x03
      d4:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t temp;
    // row1
    temp        = *(state+13);
      d6:	8a 81       	ldd	r24, Y+2	; 0x02
      d8:	9b 81       	ldd	r25, Y+3	; 0x03
      da:	fc 01       	movw	r30, r24
      dc:	85 85       	ldd	r24, Z+13	; 0x0d
      de:	89 83       	std	Y+1, r24	; 0x01
    *(state+13) = *(state+9);
      e0:	8a 81       	ldd	r24, Y+2	; 0x02
      e2:	9b 81       	ldd	r25, Y+3	; 0x03
      e4:	0d 96       	adiw	r24, 0x0d	; 13
      e6:	2a 81       	ldd	r18, Y+2	; 0x02
      e8:	3b 81       	ldd	r19, Y+3	; 0x03
      ea:	f9 01       	movw	r30, r18
      ec:	21 85       	ldd	r18, Z+9	; 0x09
      ee:	fc 01       	movw	r30, r24
      f0:	20 83       	st	Z, r18
    *(state+9)  = *(state+5);
      f2:	8a 81       	ldd	r24, Y+2	; 0x02
      f4:	9b 81       	ldd	r25, Y+3	; 0x03
      f6:	09 96       	adiw	r24, 0x09	; 9
      f8:	2a 81       	ldd	r18, Y+2	; 0x02
      fa:	3b 81       	ldd	r19, Y+3	; 0x03
      fc:	f9 01       	movw	r30, r18
      fe:	25 81       	ldd	r18, Z+5	; 0x05
     100:	fc 01       	movw	r30, r24
     102:	20 83       	st	Z, r18
    *(state+5)  = *(state+1);
     104:	8a 81       	ldd	r24, Y+2	; 0x02
     106:	9b 81       	ldd	r25, Y+3	; 0x03
     108:	05 96       	adiw	r24, 0x05	; 5
     10a:	2a 81       	ldd	r18, Y+2	; 0x02
     10c:	3b 81       	ldd	r19, Y+3	; 0x03
     10e:	f9 01       	movw	r30, r18
     110:	21 81       	ldd	r18, Z+1	; 0x01
     112:	fc 01       	movw	r30, r24
     114:	20 83       	st	Z, r18
    *(state+1)  = temp;
     116:	8a 81       	ldd	r24, Y+2	; 0x02
     118:	9b 81       	ldd	r25, Y+3	; 0x03
     11a:	01 96       	adiw	r24, 0x01	; 1
     11c:	29 81       	ldd	r18, Y+1	; 0x01
     11e:	fc 01       	movw	r30, r24
     120:	20 83       	st	Z, r18
    // row2
    temp        = *(state+14);
     122:	8a 81       	ldd	r24, Y+2	; 0x02
     124:	9b 81       	ldd	r25, Y+3	; 0x03
     126:	fc 01       	movw	r30, r24
     128:	86 85       	ldd	r24, Z+14	; 0x0e
     12a:	89 83       	std	Y+1, r24	; 0x01
    *(state+14) = *(state+6);
     12c:	8a 81       	ldd	r24, Y+2	; 0x02
     12e:	9b 81       	ldd	r25, Y+3	; 0x03
     130:	0e 96       	adiw	r24, 0x0e	; 14
     132:	2a 81       	ldd	r18, Y+2	; 0x02
     134:	3b 81       	ldd	r19, Y+3	; 0x03
     136:	f9 01       	movw	r30, r18
     138:	26 81       	ldd	r18, Z+6	; 0x06
     13a:	fc 01       	movw	r30, r24
     13c:	20 83       	st	Z, r18
    *(state+6)  = temp;
     13e:	8a 81       	ldd	r24, Y+2	; 0x02
     140:	9b 81       	ldd	r25, Y+3	; 0x03
     142:	06 96       	adiw	r24, 0x06	; 6
     144:	29 81       	ldd	r18, Y+1	; 0x01
     146:	fc 01       	movw	r30, r24
     148:	20 83       	st	Z, r18
    temp        = *(state+10);
     14a:	8a 81       	ldd	r24, Y+2	; 0x02
     14c:	9b 81       	ldd	r25, Y+3	; 0x03
     14e:	fc 01       	movw	r30, r24
     150:	82 85       	ldd	r24, Z+10	; 0x0a
     152:	89 83       	std	Y+1, r24	; 0x01
    *(state+10) = *(state+2);
     154:	8a 81       	ldd	r24, Y+2	; 0x02
     156:	9b 81       	ldd	r25, Y+3	; 0x03
     158:	0a 96       	adiw	r24, 0x0a	; 10
     15a:	2a 81       	ldd	r18, Y+2	; 0x02
     15c:	3b 81       	ldd	r19, Y+3	; 0x03
     15e:	f9 01       	movw	r30, r18
     160:	22 81       	ldd	r18, Z+2	; 0x02
     162:	fc 01       	movw	r30, r24
     164:	20 83       	st	Z, r18
    *(state+2)  = temp;
     166:	8a 81       	ldd	r24, Y+2	; 0x02
     168:	9b 81       	ldd	r25, Y+3	; 0x03
     16a:	02 96       	adiw	r24, 0x02	; 2
     16c:	29 81       	ldd	r18, Y+1	; 0x01
     16e:	fc 01       	movw	r30, r24
     170:	20 83       	st	Z, r18
    // row3
    temp        = *(state+3);
     172:	8a 81       	ldd	r24, Y+2	; 0x02
     174:	9b 81       	ldd	r25, Y+3	; 0x03
     176:	fc 01       	movw	r30, r24
     178:	83 81       	ldd	r24, Z+3	; 0x03
     17a:	89 83       	std	Y+1, r24	; 0x01
    *(state+3)  = *(state+7);
     17c:	8a 81       	ldd	r24, Y+2	; 0x02
     17e:	9b 81       	ldd	r25, Y+3	; 0x03
     180:	03 96       	adiw	r24, 0x03	; 3
     182:	2a 81       	ldd	r18, Y+2	; 0x02
     184:	3b 81       	ldd	r19, Y+3	; 0x03
     186:	f9 01       	movw	r30, r18
     188:	27 81       	ldd	r18, Z+7	; 0x07
     18a:	fc 01       	movw	r30, r24
     18c:	20 83       	st	Z, r18
    *(state+7)  = *(state+11);
     18e:	8a 81       	ldd	r24, Y+2	; 0x02
     190:	9b 81       	ldd	r25, Y+3	; 0x03
     192:	07 96       	adiw	r24, 0x07	; 7
     194:	2a 81       	ldd	r18, Y+2	; 0x02
     196:	3b 81       	ldd	r19, Y+3	; 0x03
     198:	f9 01       	movw	r30, r18
     19a:	23 85       	ldd	r18, Z+11	; 0x0b
     19c:	fc 01       	movw	r30, r24
     19e:	20 83       	st	Z, r18
    *(state+11) = *(state+15);
     1a0:	8a 81       	ldd	r24, Y+2	; 0x02
     1a2:	9b 81       	ldd	r25, Y+3	; 0x03
     1a4:	0b 96       	adiw	r24, 0x0b	; 11
     1a6:	2a 81       	ldd	r18, Y+2	; 0x02
     1a8:	3b 81       	ldd	r19, Y+3	; 0x03
     1aa:	f9 01       	movw	r30, r18
     1ac:	27 85       	ldd	r18, Z+15	; 0x0f
     1ae:	fc 01       	movw	r30, r24
     1b0:	20 83       	st	Z, r18
    *(state+15) = temp;
     1b2:	8a 81       	ldd	r24, Y+2	; 0x02
     1b4:	9b 81       	ldd	r25, Y+3	; 0x03
     1b6:	0f 96       	adiw	r24, 0x0f	; 15
     1b8:	29 81       	ldd	r18, Y+1	; 0x01
     1ba:	fc 01       	movw	r30, r24
     1bc:	20 83       	st	Z, r18
	
}
     1be:	00 00       	nop
     1c0:	0f 90       	pop	r0
     1c2:	0f 90       	pop	r0
     1c4:	0f 90       	pop	r0
     1c6:	df 91       	pop	r29
     1c8:	cf 91       	pop	r28
     1ca:	08 95       	ret

000001cc <aes_decrypt_128>:
void aes_decrypt_128(const uint8_t *roundkeys, const uint8_t *ciphertext, uint8_t *plaintext) {
     1cc:	ff 92       	push	r15
     1ce:	0f 93       	push	r16
     1d0:	1f 93       	push	r17
     1d2:	cf 93       	push	r28
     1d4:	df 93       	push	r29
     1d6:	cd b7       	in	r28, 0x3d	; 61
     1d8:	de b7       	in	r29, 0x3e	; 62
     1da:	6b 97       	sbiw	r28, 0x1b	; 27
     1dc:	0f b6       	in	r0, 0x3f	; 63
     1de:	f8 94       	cli
     1e0:	de bf       	out	0x3e, r29	; 62
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	cd bf       	out	0x3d, r28	; 61
     1e6:	9f 8b       	std	Y+23, r25	; 0x17
     1e8:	8e 8b       	std	Y+22, r24	; 0x16
     1ea:	79 8f       	std	Y+25, r23	; 0x19
     1ec:	68 8f       	std	Y+24, r22	; 0x18
     1ee:	5b 8f       	std	Y+27, r21	; 0x1b
     1f0:	4a 8f       	std	Y+26, r20	; 0x1a

    uint8_t tmp[16];
    uint8_t t, u, v;
    uint8_t i, j;

    roundkeys += 160;
     1f2:	8e 89       	ldd	r24, Y+22	; 0x16
     1f4:	9f 89       	ldd	r25, Y+23	; 0x17
     1f6:	80 56       	subi	r24, 0x60	; 96
     1f8:	9f 4f       	sbci	r25, 0xFF	; 255
     1fa:	9f 8b       	std	Y+23, r25	; 0x17
     1fc:	8e 8b       	std	Y+22, r24	; 0x16

    // first round
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     1fe:	19 82       	std	Y+1, r1	; 0x01
     200:	1f c0       	rjmp	.+62     	; 0x240 <aes_decrypt_128+0x74>
        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
     202:	89 81       	ldd	r24, Y+1	; 0x01
     204:	88 2f       	mov	r24, r24
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	2a 8d       	ldd	r18, Y+26	; 0x1a
     20a:	3b 8d       	ldd	r19, Y+27	; 0x1b
     20c:	82 0f       	add	r24, r18
     20e:	93 1f       	adc	r25, r19
     210:	29 81       	ldd	r18, Y+1	; 0x01
     212:	22 2f       	mov	r18, r18
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	48 8d       	ldd	r20, Y+24	; 0x18
     218:	59 8d       	ldd	r21, Y+25	; 0x19
     21a:	24 0f       	add	r18, r20
     21c:	35 1f       	adc	r19, r21
     21e:	f9 01       	movw	r30, r18
     220:	60 81       	ld	r22, Z
     222:	29 81       	ldd	r18, Y+1	; 0x01
     224:	22 2f       	mov	r18, r18
     226:	30 e0       	ldi	r19, 0x00	; 0
     228:	4e 89       	ldd	r20, Y+22	; 0x16
     22a:	5f 89       	ldd	r21, Y+23	; 0x17
     22c:	24 0f       	add	r18, r20
     22e:	35 1f       	adc	r19, r21
     230:	f9 01       	movw	r30, r18
     232:	20 81       	ld	r18, Z
     234:	26 27       	eor	r18, r22
     236:	fc 01       	movw	r30, r24
     238:	20 83       	st	Z, r18
    uint8_t i, j;

    roundkeys += 160;

    // first round
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     23a:	89 81       	ldd	r24, Y+1	; 0x01
     23c:	8f 5f       	subi	r24, 0xFF	; 255
     23e:	89 83       	std	Y+1, r24	; 0x01
     240:	89 81       	ldd	r24, Y+1	; 0x01
     242:	80 31       	cpi	r24, 0x10	; 16
     244:	f0 f2       	brcs	.-68     	; 0x202 <aes_decrypt_128+0x36>
        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
    }
    roundkeys -= 16;
     246:	8e 89       	ldd	r24, Y+22	; 0x16
     248:	9f 89       	ldd	r25, Y+23	; 0x17
     24a:	40 97       	sbiw	r24, 0x10	; 16
     24c:	9f 8b       	std	Y+23, r25	; 0x17
     24e:	8e 8b       	std	Y+22, r24	; 0x16
    inv_shift_rows(plaintext);
     250:	8a 8d       	ldd	r24, Y+26	; 0x1a
     252:	9b 8d       	ldd	r25, Y+27	; 0x1b
     254:	0e 94 63 00 	call	0xc6	; 0xc6 <inv_shift_rows>
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     258:	19 82       	std	Y+1, r1	; 0x01
     25a:	1b c0       	rjmp	.+54     	; 0x292 <aes_decrypt_128+0xc6>
        *(plaintext+i) = INV_SBOX[*(plaintext+i)];
     25c:	89 81       	ldd	r24, Y+1	; 0x01
     25e:	88 2f       	mov	r24, r24
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	2a 8d       	ldd	r18, Y+26	; 0x1a
     264:	3b 8d       	ldd	r19, Y+27	; 0x1b
     266:	82 0f       	add	r24, r18
     268:	93 1f       	adc	r25, r19
     26a:	29 81       	ldd	r18, Y+1	; 0x01
     26c:	22 2f       	mov	r18, r18
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	4a 8d       	ldd	r20, Y+26	; 0x1a
     272:	5b 8d       	ldd	r21, Y+27	; 0x1b
     274:	24 0f       	add	r18, r20
     276:	35 1f       	adc	r19, r21
     278:	f9 01       	movw	r30, r18
     27a:	20 81       	ld	r18, Z
     27c:	22 2f       	mov	r18, r18
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	20 50       	subi	r18, 0x00	; 0
     282:	3f 4f       	sbci	r19, 0xFF	; 255
     284:	f9 01       	movw	r30, r18
     286:	20 81       	ld	r18, Z
     288:	fc 01       	movw	r30, r24
     28a:	20 83       	st	Z, r18
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
    }
    roundkeys -= 16;
    inv_shift_rows(plaintext);
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     28c:	89 81       	ldd	r24, Y+1	; 0x01
     28e:	8f 5f       	subi	r24, 0xFF	; 255
     290:	89 83       	std	Y+1, r24	; 0x01
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	80 31       	cpi	r24, 0x10	; 16
     296:	10 f3       	brcs	.-60     	; 0x25c <aes_decrypt_128+0x90>
        *(plaintext+i) = INV_SBOX[*(plaintext+i)];
    }

    for (j = 1; j < AES_ROUNDS; ++j) {
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	8a 83       	std	Y+2, r24	; 0x02
     29c:	ef c1       	rjmp	.+990    	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
        
        // Inverse AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     29e:	19 82       	std	Y+1, r1	; 0x01
     2a0:	20 c0       	rjmp	.+64     	; 0x2e2 <aes_decrypt_128+0x116>
            *(tmp+i) = *(plaintext+i) ^ *(roundkeys+i);
     2a2:	89 81       	ldd	r24, Y+1	; 0x01
     2a4:	88 2f       	mov	r24, r24
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	9e 01       	movw	r18, r28
     2aa:	2a 5f       	subi	r18, 0xFA	; 250
     2ac:	3f 4f       	sbci	r19, 0xFF	; 255
     2ae:	82 0f       	add	r24, r18
     2b0:	93 1f       	adc	r25, r19
     2b2:	29 81       	ldd	r18, Y+1	; 0x01
     2b4:	22 2f       	mov	r18, r18
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	4a 8d       	ldd	r20, Y+26	; 0x1a
     2ba:	5b 8d       	ldd	r21, Y+27	; 0x1b
     2bc:	24 0f       	add	r18, r20
     2be:	35 1f       	adc	r19, r21
     2c0:	f9 01       	movw	r30, r18
     2c2:	60 81       	ld	r22, Z
     2c4:	29 81       	ldd	r18, Y+1	; 0x01
     2c6:	22 2f       	mov	r18, r18
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	4e 89       	ldd	r20, Y+22	; 0x16
     2cc:	5f 89       	ldd	r21, Y+23	; 0x17
     2ce:	24 0f       	add	r18, r20
     2d0:	35 1f       	adc	r19, r21
     2d2:	f9 01       	movw	r30, r18
     2d4:	20 81       	ld	r18, Z
     2d6:	26 27       	eor	r18, r22
     2d8:	fc 01       	movw	r30, r24
     2da:	20 83       	st	Z, r18
    }

    for (j = 1; j < AES_ROUNDS; ++j) {
        
        // Inverse AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     2dc:	89 81       	ldd	r24, Y+1	; 0x01
     2de:	8f 5f       	subi	r24, 0xFF	; 255
     2e0:	89 83       	std	Y+1, r24	; 0x01
     2e2:	89 81       	ldd	r24, Y+1	; 0x01
     2e4:	80 31       	cpi	r24, 0x10	; 16
     2e6:	e8 f2       	brcs	.-70     	; 0x2a2 <aes_decrypt_128+0xd6>
         * [0e 0b 0d 09]   [s0  s4  s8  s12]
         * [09 0e 0b 0d] . [s1  s5  s9  s13]
         * [0d 09 0e 0b]   [s2  s6  s10 s14]
         * [0b 0d 09 0e]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4) {
     2e8:	19 82       	std	Y+1, r1	; 0x01
     2ea:	98 c1       	rjmp	.+816    	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
            t = tmp[i] ^ tmp[i+1] ^ tmp[i+2] ^ tmp[i+3];
     2ec:	89 81       	ldd	r24, Y+1	; 0x01
     2ee:	88 2f       	mov	r24, r24
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	9e 01       	movw	r18, r28
     2f4:	2a 5f       	subi	r18, 0xFA	; 250
     2f6:	3f 4f       	sbci	r19, 0xFF	; 255
     2f8:	82 0f       	add	r24, r18
     2fa:	93 1f       	adc	r25, r19
     2fc:	fc 01       	movw	r30, r24
     2fe:	40 81       	ld	r20, Z
     300:	89 81       	ldd	r24, Y+1	; 0x01
     302:	88 2f       	mov	r24, r24
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	01 96       	adiw	r24, 0x01	; 1
     308:	9e 01       	movw	r18, r28
     30a:	2a 5f       	subi	r18, 0xFA	; 250
     30c:	3f 4f       	sbci	r19, 0xFF	; 255
     30e:	82 0f       	add	r24, r18
     310:	93 1f       	adc	r25, r19
     312:	fc 01       	movw	r30, r24
     314:	80 81       	ld	r24, Z
     316:	48 27       	eor	r20, r24
     318:	89 81       	ldd	r24, Y+1	; 0x01
     31a:	88 2f       	mov	r24, r24
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	02 96       	adiw	r24, 0x02	; 2
     320:	9e 01       	movw	r18, r28
     322:	2a 5f       	subi	r18, 0xFA	; 250
     324:	3f 4f       	sbci	r19, 0xFF	; 255
     326:	82 0f       	add	r24, r18
     328:	93 1f       	adc	r25, r19
     32a:	fc 01       	movw	r30, r24
     32c:	80 81       	ld	r24, Z
     32e:	48 27       	eor	r20, r24
     330:	89 81       	ldd	r24, Y+1	; 0x01
     332:	88 2f       	mov	r24, r24
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	03 96       	adiw	r24, 0x03	; 3
     338:	9e 01       	movw	r18, r28
     33a:	2a 5f       	subi	r18, 0xFA	; 250
     33c:	3f 4f       	sbci	r19, 0xFF	; 255
     33e:	82 0f       	add	r24, r18
     340:	93 1f       	adc	r25, r19
     342:	fc 01       	movw	r30, r24
     344:	80 81       	ld	r24, Z
     346:	84 27       	eor	r24, r20
     348:	8b 83       	std	Y+3, r24	; 0x03
            plaintext[i]   = t ^ tmp[i]   ^ mul2(tmp[i]   ^ tmp[i+1]);
     34a:	89 81       	ldd	r24, Y+1	; 0x01
     34c:	88 2f       	mov	r24, r24
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	2a 8d       	ldd	r18, Y+26	; 0x1a
     352:	3b 8d       	ldd	r19, Y+27	; 0x1b
     354:	89 01       	movw	r16, r18
     356:	08 0f       	add	r16, r24
     358:	19 1f       	adc	r17, r25
     35a:	89 81       	ldd	r24, Y+1	; 0x01
     35c:	88 2f       	mov	r24, r24
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	9e 01       	movw	r18, r28
     362:	2a 5f       	subi	r18, 0xFA	; 250
     364:	3f 4f       	sbci	r19, 0xFF	; 255
     366:	82 0f       	add	r24, r18
     368:	93 1f       	adc	r25, r19
     36a:	fc 01       	movw	r30, r24
     36c:	90 81       	ld	r25, Z
     36e:	8b 81       	ldd	r24, Y+3	; 0x03
     370:	f9 2e       	mov	r15, r25
     372:	f8 26       	eor	r15, r24
     374:	89 81       	ldd	r24, Y+1	; 0x01
     376:	88 2f       	mov	r24, r24
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	9e 01       	movw	r18, r28
     37c:	2a 5f       	subi	r18, 0xFA	; 250
     37e:	3f 4f       	sbci	r19, 0xFF	; 255
     380:	82 0f       	add	r24, r18
     382:	93 1f       	adc	r25, r19
     384:	fc 01       	movw	r30, r24
     386:	40 81       	ld	r20, Z
     388:	89 81       	ldd	r24, Y+1	; 0x01
     38a:	88 2f       	mov	r24, r24
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	01 96       	adiw	r24, 0x01	; 1
     390:	9e 01       	movw	r18, r28
     392:	2a 5f       	subi	r18, 0xFA	; 250
     394:	3f 4f       	sbci	r19, 0xFF	; 255
     396:	82 0f       	add	r24, r18
     398:	93 1f       	adc	r25, r19
     39a:	fc 01       	movw	r30, r24
     39c:	80 81       	ld	r24, Z
     39e:	84 27       	eor	r24, r20
     3a0:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
     3a4:	8f 25       	eor	r24, r15
     3a6:	f8 01       	movw	r30, r16
     3a8:	80 83       	st	Z, r24
            plaintext[i+1] = t ^ tmp[i+1] ^ mul2(tmp[i+1] ^ tmp[i+2]);
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
     3ac:	88 2f       	mov	r24, r24
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	01 96       	adiw	r24, 0x01	; 1
     3b2:	2a 8d       	ldd	r18, Y+26	; 0x1a
     3b4:	3b 8d       	ldd	r19, Y+27	; 0x1b
     3b6:	89 01       	movw	r16, r18
     3b8:	08 0f       	add	r16, r24
     3ba:	19 1f       	adc	r17, r25
     3bc:	89 81       	ldd	r24, Y+1	; 0x01
     3be:	88 2f       	mov	r24, r24
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	01 96       	adiw	r24, 0x01	; 1
     3c4:	9e 01       	movw	r18, r28
     3c6:	2a 5f       	subi	r18, 0xFA	; 250
     3c8:	3f 4f       	sbci	r19, 0xFF	; 255
     3ca:	82 0f       	add	r24, r18
     3cc:	93 1f       	adc	r25, r19
     3ce:	fc 01       	movw	r30, r24
     3d0:	90 81       	ld	r25, Z
     3d2:	8b 81       	ldd	r24, Y+3	; 0x03
     3d4:	f9 2e       	mov	r15, r25
     3d6:	f8 26       	eor	r15, r24
     3d8:	89 81       	ldd	r24, Y+1	; 0x01
     3da:	88 2f       	mov	r24, r24
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	01 96       	adiw	r24, 0x01	; 1
     3e0:	9e 01       	movw	r18, r28
     3e2:	2a 5f       	subi	r18, 0xFA	; 250
     3e4:	3f 4f       	sbci	r19, 0xFF	; 255
     3e6:	82 0f       	add	r24, r18
     3e8:	93 1f       	adc	r25, r19
     3ea:	fc 01       	movw	r30, r24
     3ec:	40 81       	ld	r20, Z
     3ee:	89 81       	ldd	r24, Y+1	; 0x01
     3f0:	88 2f       	mov	r24, r24
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	02 96       	adiw	r24, 0x02	; 2
     3f6:	9e 01       	movw	r18, r28
     3f8:	2a 5f       	subi	r18, 0xFA	; 250
     3fa:	3f 4f       	sbci	r19, 0xFF	; 255
     3fc:	82 0f       	add	r24, r18
     3fe:	93 1f       	adc	r25, r19
     400:	fc 01       	movw	r30, r24
     402:	80 81       	ld	r24, Z
     404:	84 27       	eor	r24, r20
     406:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
     40a:	8f 25       	eor	r24, r15
     40c:	f8 01       	movw	r30, r16
     40e:	80 83       	st	Z, r24
            plaintext[i+2] = t ^ tmp[i+2] ^ mul2(tmp[i+2] ^ tmp[i+3]);
     410:	89 81       	ldd	r24, Y+1	; 0x01
     412:	88 2f       	mov	r24, r24
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	02 96       	adiw	r24, 0x02	; 2
     418:	2a 8d       	ldd	r18, Y+26	; 0x1a
     41a:	3b 8d       	ldd	r19, Y+27	; 0x1b
     41c:	89 01       	movw	r16, r18
     41e:	08 0f       	add	r16, r24
     420:	19 1f       	adc	r17, r25
     422:	89 81       	ldd	r24, Y+1	; 0x01
     424:	88 2f       	mov	r24, r24
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	02 96       	adiw	r24, 0x02	; 2
     42a:	9e 01       	movw	r18, r28
     42c:	2a 5f       	subi	r18, 0xFA	; 250
     42e:	3f 4f       	sbci	r19, 0xFF	; 255
     430:	82 0f       	add	r24, r18
     432:	93 1f       	adc	r25, r19
     434:	fc 01       	movw	r30, r24
     436:	90 81       	ld	r25, Z
     438:	8b 81       	ldd	r24, Y+3	; 0x03
     43a:	f9 2e       	mov	r15, r25
     43c:	f8 26       	eor	r15, r24
     43e:	89 81       	ldd	r24, Y+1	; 0x01
     440:	88 2f       	mov	r24, r24
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	02 96       	adiw	r24, 0x02	; 2
     446:	9e 01       	movw	r18, r28
     448:	2a 5f       	subi	r18, 0xFA	; 250
     44a:	3f 4f       	sbci	r19, 0xFF	; 255
     44c:	82 0f       	add	r24, r18
     44e:	93 1f       	adc	r25, r19
     450:	fc 01       	movw	r30, r24
     452:	40 81       	ld	r20, Z
     454:	89 81       	ldd	r24, Y+1	; 0x01
     456:	88 2f       	mov	r24, r24
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	03 96       	adiw	r24, 0x03	; 3
     45c:	9e 01       	movw	r18, r28
     45e:	2a 5f       	subi	r18, 0xFA	; 250
     460:	3f 4f       	sbci	r19, 0xFF	; 255
     462:	82 0f       	add	r24, r18
     464:	93 1f       	adc	r25, r19
     466:	fc 01       	movw	r30, r24
     468:	80 81       	ld	r24, Z
     46a:	84 27       	eor	r24, r20
     46c:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
     470:	8f 25       	eor	r24, r15
     472:	f8 01       	movw	r30, r16
     474:	80 83       	st	Z, r24
            plaintext[i+3] = t ^ tmp[i+3] ^ mul2(tmp[i+3] ^ tmp[i]);
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	88 2f       	mov	r24, r24
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	03 96       	adiw	r24, 0x03	; 3
     47e:	2a 8d       	ldd	r18, Y+26	; 0x1a
     480:	3b 8d       	ldd	r19, Y+27	; 0x1b
     482:	89 01       	movw	r16, r18
     484:	08 0f       	add	r16, r24
     486:	19 1f       	adc	r17, r25
     488:	89 81       	ldd	r24, Y+1	; 0x01
     48a:	88 2f       	mov	r24, r24
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	03 96       	adiw	r24, 0x03	; 3
     490:	9e 01       	movw	r18, r28
     492:	2a 5f       	subi	r18, 0xFA	; 250
     494:	3f 4f       	sbci	r19, 0xFF	; 255
     496:	82 0f       	add	r24, r18
     498:	93 1f       	adc	r25, r19
     49a:	fc 01       	movw	r30, r24
     49c:	90 81       	ld	r25, Z
     49e:	8b 81       	ldd	r24, Y+3	; 0x03
     4a0:	f9 2e       	mov	r15, r25
     4a2:	f8 26       	eor	r15, r24
     4a4:	89 81       	ldd	r24, Y+1	; 0x01
     4a6:	88 2f       	mov	r24, r24
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	03 96       	adiw	r24, 0x03	; 3
     4ac:	9e 01       	movw	r18, r28
     4ae:	2a 5f       	subi	r18, 0xFA	; 250
     4b0:	3f 4f       	sbci	r19, 0xFF	; 255
     4b2:	82 0f       	add	r24, r18
     4b4:	93 1f       	adc	r25, r19
     4b6:	fc 01       	movw	r30, r24
     4b8:	40 81       	ld	r20, Z
     4ba:	89 81       	ldd	r24, Y+1	; 0x01
     4bc:	88 2f       	mov	r24, r24
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	9e 01       	movw	r18, r28
     4c2:	2a 5f       	subi	r18, 0xFA	; 250
     4c4:	3f 4f       	sbci	r19, 0xFF	; 255
     4c6:	82 0f       	add	r24, r18
     4c8:	93 1f       	adc	r25, r19
     4ca:	fc 01       	movw	r30, r24
     4cc:	80 81       	ld	r24, Z
     4ce:	84 27       	eor	r24, r20
     4d0:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
     4d4:	8f 25       	eor	r24, r15
     4d6:	f8 01       	movw	r30, r16
     4d8:	80 83       	st	Z, r24
            u = mul2(mul2(tmp[i]   ^ tmp[i+2]));
     4da:	89 81       	ldd	r24, Y+1	; 0x01
     4dc:	88 2f       	mov	r24, r24
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	9e 01       	movw	r18, r28
     4e2:	2a 5f       	subi	r18, 0xFA	; 250
     4e4:	3f 4f       	sbci	r19, 0xFF	; 255
     4e6:	82 0f       	add	r24, r18
     4e8:	93 1f       	adc	r25, r19
     4ea:	fc 01       	movw	r30, r24
     4ec:	40 81       	ld	r20, Z
     4ee:	89 81       	ldd	r24, Y+1	; 0x01
     4f0:	88 2f       	mov	r24, r24
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	02 96       	adiw	r24, 0x02	; 2
     4f6:	9e 01       	movw	r18, r28
     4f8:	2a 5f       	subi	r18, 0xFA	; 250
     4fa:	3f 4f       	sbci	r19, 0xFF	; 255
     4fc:	82 0f       	add	r24, r18
     4fe:	93 1f       	adc	r25, r19
     500:	fc 01       	movw	r30, r24
     502:	80 81       	ld	r24, Z
     504:	84 27       	eor	r24, r20
     506:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
     50a:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
     50e:	8c 83       	std	Y+4, r24	; 0x04
            v = mul2(mul2(tmp[i+1] ^ tmp[i+3]));
     510:	89 81       	ldd	r24, Y+1	; 0x01
     512:	88 2f       	mov	r24, r24
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	01 96       	adiw	r24, 0x01	; 1
     518:	9e 01       	movw	r18, r28
     51a:	2a 5f       	subi	r18, 0xFA	; 250
     51c:	3f 4f       	sbci	r19, 0xFF	; 255
     51e:	82 0f       	add	r24, r18
     520:	93 1f       	adc	r25, r19
     522:	fc 01       	movw	r30, r24
     524:	40 81       	ld	r20, Z
     526:	89 81       	ldd	r24, Y+1	; 0x01
     528:	88 2f       	mov	r24, r24
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	03 96       	adiw	r24, 0x03	; 3
     52e:	9e 01       	movw	r18, r28
     530:	2a 5f       	subi	r18, 0xFA	; 250
     532:	3f 4f       	sbci	r19, 0xFF	; 255
     534:	82 0f       	add	r24, r18
     536:	93 1f       	adc	r25, r19
     538:	fc 01       	movw	r30, r24
     53a:	80 81       	ld	r24, Z
     53c:	84 27       	eor	r24, r20
     53e:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
     542:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
     546:	8d 83       	std	Y+5, r24	; 0x05
            t = mul2(u ^ v);
     548:	9c 81       	ldd	r25, Y+4	; 0x04
     54a:	8d 81       	ldd	r24, Y+5	; 0x05
     54c:	89 27       	eor	r24, r25
     54e:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
     552:	8b 83       	std	Y+3, r24	; 0x03
            plaintext[i]   ^= t ^ u;
     554:	89 81       	ldd	r24, Y+1	; 0x01
     556:	88 2f       	mov	r24, r24
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	2a 8d       	ldd	r18, Y+26	; 0x1a
     55c:	3b 8d       	ldd	r19, Y+27	; 0x1b
     55e:	82 0f       	add	r24, r18
     560:	93 1f       	adc	r25, r19
     562:	29 81       	ldd	r18, Y+1	; 0x01
     564:	22 2f       	mov	r18, r18
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	4a 8d       	ldd	r20, Y+26	; 0x1a
     56a:	5b 8d       	ldd	r21, Y+27	; 0x1b
     56c:	24 0f       	add	r18, r20
     56e:	35 1f       	adc	r19, r21
     570:	f9 01       	movw	r30, r18
     572:	30 81       	ld	r19, Z
     574:	4b 81       	ldd	r20, Y+3	; 0x03
     576:	2c 81       	ldd	r18, Y+4	; 0x04
     578:	24 27       	eor	r18, r20
     57a:	23 27       	eor	r18, r19
     57c:	fc 01       	movw	r30, r24
     57e:	20 83       	st	Z, r18
            plaintext[i+1] ^= t ^ v;
     580:	89 81       	ldd	r24, Y+1	; 0x01
     582:	88 2f       	mov	r24, r24
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	01 96       	adiw	r24, 0x01	; 1
     588:	2a 8d       	ldd	r18, Y+26	; 0x1a
     58a:	3b 8d       	ldd	r19, Y+27	; 0x1b
     58c:	82 0f       	add	r24, r18
     58e:	93 1f       	adc	r25, r19
     590:	29 81       	ldd	r18, Y+1	; 0x01
     592:	22 2f       	mov	r18, r18
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	2f 5f       	subi	r18, 0xFF	; 255
     598:	3f 4f       	sbci	r19, 0xFF	; 255
     59a:	4a 8d       	ldd	r20, Y+26	; 0x1a
     59c:	5b 8d       	ldd	r21, Y+27	; 0x1b
     59e:	24 0f       	add	r18, r20
     5a0:	35 1f       	adc	r19, r21
     5a2:	f9 01       	movw	r30, r18
     5a4:	30 81       	ld	r19, Z
     5a6:	4b 81       	ldd	r20, Y+3	; 0x03
     5a8:	2d 81       	ldd	r18, Y+5	; 0x05
     5aa:	24 27       	eor	r18, r20
     5ac:	23 27       	eor	r18, r19
     5ae:	fc 01       	movw	r30, r24
     5b0:	20 83       	st	Z, r18
            plaintext[i+2] ^= t ^ u;
     5b2:	89 81       	ldd	r24, Y+1	; 0x01
     5b4:	88 2f       	mov	r24, r24
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	02 96       	adiw	r24, 0x02	; 2
     5ba:	2a 8d       	ldd	r18, Y+26	; 0x1a
     5bc:	3b 8d       	ldd	r19, Y+27	; 0x1b
     5be:	82 0f       	add	r24, r18
     5c0:	93 1f       	adc	r25, r19
     5c2:	29 81       	ldd	r18, Y+1	; 0x01
     5c4:	22 2f       	mov	r18, r18
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	2e 5f       	subi	r18, 0xFE	; 254
     5ca:	3f 4f       	sbci	r19, 0xFF	; 255
     5cc:	4a 8d       	ldd	r20, Y+26	; 0x1a
     5ce:	5b 8d       	ldd	r21, Y+27	; 0x1b
     5d0:	24 0f       	add	r18, r20
     5d2:	35 1f       	adc	r19, r21
     5d4:	f9 01       	movw	r30, r18
     5d6:	30 81       	ld	r19, Z
     5d8:	4b 81       	ldd	r20, Y+3	; 0x03
     5da:	2c 81       	ldd	r18, Y+4	; 0x04
     5dc:	24 27       	eor	r18, r20
     5de:	23 27       	eor	r18, r19
     5e0:	fc 01       	movw	r30, r24
     5e2:	20 83       	st	Z, r18
            plaintext[i+3] ^= t ^ v;
     5e4:	89 81       	ldd	r24, Y+1	; 0x01
     5e6:	88 2f       	mov	r24, r24
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	03 96       	adiw	r24, 0x03	; 3
     5ec:	2a 8d       	ldd	r18, Y+26	; 0x1a
     5ee:	3b 8d       	ldd	r19, Y+27	; 0x1b
     5f0:	82 0f       	add	r24, r18
     5f2:	93 1f       	adc	r25, r19
     5f4:	29 81       	ldd	r18, Y+1	; 0x01
     5f6:	22 2f       	mov	r18, r18
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	2d 5f       	subi	r18, 0xFD	; 253
     5fc:	3f 4f       	sbci	r19, 0xFF	; 255
     5fe:	4a 8d       	ldd	r20, Y+26	; 0x1a
     600:	5b 8d       	ldd	r21, Y+27	; 0x1b
     602:	24 0f       	add	r18, r20
     604:	35 1f       	adc	r19, r21
     606:	f9 01       	movw	r30, r18
     608:	30 81       	ld	r19, Z
     60a:	4b 81       	ldd	r20, Y+3	; 0x03
     60c:	2d 81       	ldd	r18, Y+5	; 0x05
     60e:	24 27       	eor	r18, r20
     610:	23 27       	eor	r18, r19
     612:	fc 01       	movw	r30, r24
     614:	20 83       	st	Z, r18
         * [0e 0b 0d 09]   [s0  s4  s8  s12]
         * [09 0e 0b 0d] . [s1  s5  s9  s13]
         * [0d 09 0e 0b]   [s2  s6  s10 s14]
         * [0b 0d 09 0e]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4) {
     616:	89 81       	ldd	r24, Y+1	; 0x01
     618:	8c 5f       	subi	r24, 0xFC	; 252
     61a:	89 83       	std	Y+1, r24	; 0x01
     61c:	89 81       	ldd	r24, Y+1	; 0x01
     61e:	80 31       	cpi	r24, 0x10	; 16
     620:	08 f4       	brcc	.+2      	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
     622:	64 ce       	rjmp	.-824    	; 0x2ec <aes_decrypt_128+0x120>
            plaintext[i+2] ^= t ^ u;
            plaintext[i+3] ^= t ^ v;
        }
        
        // Inverse ShiftRows
        inv_shift_rows(plaintext);
     624:	8a 8d       	ldd	r24, Y+26	; 0x1a
     626:	9b 8d       	ldd	r25, Y+27	; 0x1b
     628:	0e 94 63 00 	call	0xc6	; 0xc6 <inv_shift_rows>
        
        // Inverse SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     62c:	19 82       	std	Y+1, r1	; 0x01
     62e:	1b c0       	rjmp	.+54     	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
            *(plaintext+i) = INV_SBOX[*(plaintext+i)];
     630:	89 81       	ldd	r24, Y+1	; 0x01
     632:	88 2f       	mov	r24, r24
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	2a 8d       	ldd	r18, Y+26	; 0x1a
     638:	3b 8d       	ldd	r19, Y+27	; 0x1b
     63a:	82 0f       	add	r24, r18
     63c:	93 1f       	adc	r25, r19
     63e:	29 81       	ldd	r18, Y+1	; 0x01
     640:	22 2f       	mov	r18, r18
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	4a 8d       	ldd	r20, Y+26	; 0x1a
     646:	5b 8d       	ldd	r21, Y+27	; 0x1b
     648:	24 0f       	add	r18, r20
     64a:	35 1f       	adc	r19, r21
     64c:	f9 01       	movw	r30, r18
     64e:	20 81       	ld	r18, Z
     650:	22 2f       	mov	r18, r18
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	20 50       	subi	r18, 0x00	; 0
     656:	3f 4f       	sbci	r19, 0xFF	; 255
     658:	f9 01       	movw	r30, r18
     65a:	20 81       	ld	r18, Z
     65c:	fc 01       	movw	r30, r24
     65e:	20 83       	st	Z, r18
        
        // Inverse ShiftRows
        inv_shift_rows(plaintext);
        
        // Inverse SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     660:	89 81       	ldd	r24, Y+1	; 0x01
     662:	8f 5f       	subi	r24, 0xFF	; 255
     664:	89 83       	std	Y+1, r24	; 0x01
     666:	89 81       	ldd	r24, Y+1	; 0x01
     668:	80 31       	cpi	r24, 0x10	; 16
     66a:	10 f3       	brcs	.-60     	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
            *(plaintext+i) = INV_SBOX[*(plaintext+i)];
        }

        roundkeys -= 16;
     66c:	8e 89       	ldd	r24, Y+22	; 0x16
     66e:	9f 89       	ldd	r25, Y+23	; 0x17
     670:	40 97       	sbiw	r24, 0x10	; 16
     672:	9f 8b       	std	Y+23, r25	; 0x17
     674:	8e 8b       	std	Y+22, r24	; 0x16
    inv_shift_rows(plaintext);
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
        *(plaintext+i) = INV_SBOX[*(plaintext+i)];
    }

    for (j = 1; j < AES_ROUNDS; ++j) {
     676:	8a 81       	ldd	r24, Y+2	; 0x02
     678:	8f 5f       	subi	r24, 0xFF	; 255
     67a:	8a 83       	std	Y+2, r24	; 0x02
     67c:	8a 81       	ldd	r24, Y+2	; 0x02
     67e:	8a 30       	cpi	r24, 0x0A	; 10
     680:	08 f4       	brcc	.+2      	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
     682:	0d ce       	rjmp	.-998    	; 0x29e <aes_decrypt_128+0xd2>
        roundkeys -= 16;

    }

    // last AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     684:	19 82       	std	Y+1, r1	; 0x01
     686:	1f c0       	rjmp	.+62     	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
        *(plaintext+i) ^= *(roundkeys+i);
     688:	89 81       	ldd	r24, Y+1	; 0x01
     68a:	88 2f       	mov	r24, r24
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	2a 8d       	ldd	r18, Y+26	; 0x1a
     690:	3b 8d       	ldd	r19, Y+27	; 0x1b
     692:	82 0f       	add	r24, r18
     694:	93 1f       	adc	r25, r19
     696:	29 81       	ldd	r18, Y+1	; 0x01
     698:	22 2f       	mov	r18, r18
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	4a 8d       	ldd	r20, Y+26	; 0x1a
     69e:	5b 8d       	ldd	r21, Y+27	; 0x1b
     6a0:	24 0f       	add	r18, r20
     6a2:	35 1f       	adc	r19, r21
     6a4:	f9 01       	movw	r30, r18
     6a6:	60 81       	ld	r22, Z
     6a8:	29 81       	ldd	r18, Y+1	; 0x01
     6aa:	22 2f       	mov	r18, r18
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	4e 89       	ldd	r20, Y+22	; 0x16
     6b0:	5f 89       	ldd	r21, Y+23	; 0x17
     6b2:	24 0f       	add	r18, r20
     6b4:	35 1f       	adc	r19, r21
     6b6:	f9 01       	movw	r30, r18
     6b8:	20 81       	ld	r18, Z
     6ba:	26 27       	eor	r18, r22
     6bc:	fc 01       	movw	r30, r24
     6be:	20 83       	st	Z, r18
        roundkeys -= 16;

    }

    // last AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     6c0:	89 81       	ldd	r24, Y+1	; 0x01
     6c2:	8f 5f       	subi	r24, 0xFF	; 255
     6c4:	89 83       	std	Y+1, r24	; 0x01
     6c6:	89 81       	ldd	r24, Y+1	; 0x01
     6c8:	80 31       	cpi	r24, 0x10	; 16
     6ca:	f0 f2       	brcs	.-68     	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
        *(plaintext+i) ^= *(roundkeys+i);
    }

     6cc:	00 00       	nop
     6ce:	6b 96       	adiw	r28, 0x1b	; 27
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	f8 94       	cli
     6d4:	de bf       	out	0x3e, r29	; 62
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	cd bf       	out	0x3d, r28	; 61
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	1f 91       	pop	r17
     6e0:	0f 91       	pop	r16
     6e2:	ff 90       	pop	r15
     6e4:	08 95       	ret

000006e6 <mul2>:
 * Multiply two numbers in the GF(2^8) finite field defined
 * by the polynomial x^8 + x^4 + x^3 + x + 1 = 0
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
inline static uint8_t mul2(uint8_t a) {
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
     6ea:	1f 92       	push	r1
     6ec:	cd b7       	in	r28, 0x3d	; 61
     6ee:	de b7       	in	r29, 0x3e	; 62
     6f0:	89 83       	std	Y+1, r24	; 0x01
        return (a&0x80)?((a<<1)^0x1b):(a<<1);
     6f2:	89 81       	ldd	r24, Y+1	; 0x01
     6f4:	88 23       	and	r24, r24
     6f6:	4c f4       	brge	.+18     	; 0x70a <mul2+0x24>
     6f8:	89 81       	ldd	r24, Y+1	; 0x01
     6fa:	88 2f       	mov	r24, r24
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	88 0f       	add	r24, r24
     700:	99 1f       	adc	r25, r25
     702:	98 2f       	mov	r25, r24
     704:	8b e1       	ldi	r24, 0x1B	; 27
     706:	89 27       	eor	r24, r25
     708:	02 c0       	rjmp	.+4      	; 0x70e <mul2+0x28>
     70a:	89 81       	ldd	r24, Y+1	; 0x01
     70c:	88 0f       	add	r24, r24
}
     70e:	0f 90       	pop	r0
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	08 95       	ret

00000716 <shift_rows>:
 *  Row0: s0  s4  s8  s12   <<< 0 byte
 *  Row1: s1  s5  s9  s13   <<< 1 byte
 *  Row2: s2  s6  s10 s14   <<< 2 bytes
 *  Row3: s3  s7  s11 s15   <<< 3 bytes
 */
static void shift_rows(uint8_t *state) {
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	00 d0       	rcall	.+0      	; 0x71c <shift_rows+0x6>
     71c:	1f 92       	push	r1
     71e:	cd b7       	in	r28, 0x3d	; 61
     720:	de b7       	in	r29, 0x3e	; 62
     722:	9b 83       	std	Y+3, r25	; 0x03
     724:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t temp;
    // row1
    temp        = *(state+1);
     726:	8a 81       	ldd	r24, Y+2	; 0x02
     728:	9b 81       	ldd	r25, Y+3	; 0x03
     72a:	fc 01       	movw	r30, r24
     72c:	81 81       	ldd	r24, Z+1	; 0x01
     72e:	89 83       	std	Y+1, r24	; 0x01
    *(state+1)  = *(state+5);
     730:	8a 81       	ldd	r24, Y+2	; 0x02
     732:	9b 81       	ldd	r25, Y+3	; 0x03
     734:	01 96       	adiw	r24, 0x01	; 1
     736:	2a 81       	ldd	r18, Y+2	; 0x02
     738:	3b 81       	ldd	r19, Y+3	; 0x03
     73a:	f9 01       	movw	r30, r18
     73c:	25 81       	ldd	r18, Z+5	; 0x05
     73e:	fc 01       	movw	r30, r24
     740:	20 83       	st	Z, r18
    *(state+5)  = *(state+9);
     742:	8a 81       	ldd	r24, Y+2	; 0x02
     744:	9b 81       	ldd	r25, Y+3	; 0x03
     746:	05 96       	adiw	r24, 0x05	; 5
     748:	2a 81       	ldd	r18, Y+2	; 0x02
     74a:	3b 81       	ldd	r19, Y+3	; 0x03
     74c:	f9 01       	movw	r30, r18
     74e:	21 85       	ldd	r18, Z+9	; 0x09
     750:	fc 01       	movw	r30, r24
     752:	20 83       	st	Z, r18
    *(state+9)  = *(state+13);
     754:	8a 81       	ldd	r24, Y+2	; 0x02
     756:	9b 81       	ldd	r25, Y+3	; 0x03
     758:	09 96       	adiw	r24, 0x09	; 9
     75a:	2a 81       	ldd	r18, Y+2	; 0x02
     75c:	3b 81       	ldd	r19, Y+3	; 0x03
     75e:	f9 01       	movw	r30, r18
     760:	25 85       	ldd	r18, Z+13	; 0x0d
     762:	fc 01       	movw	r30, r24
     764:	20 83       	st	Z, r18
    *(state+13) = temp;
     766:	8a 81       	ldd	r24, Y+2	; 0x02
     768:	9b 81       	ldd	r25, Y+3	; 0x03
     76a:	0d 96       	adiw	r24, 0x0d	; 13
     76c:	29 81       	ldd	r18, Y+1	; 0x01
     76e:	fc 01       	movw	r30, r24
     770:	20 83       	st	Z, r18
    // row2
    temp        = *(state+2);
     772:	8a 81       	ldd	r24, Y+2	; 0x02
     774:	9b 81       	ldd	r25, Y+3	; 0x03
     776:	fc 01       	movw	r30, r24
     778:	82 81       	ldd	r24, Z+2	; 0x02
     77a:	89 83       	std	Y+1, r24	; 0x01
    *(state+2)  = *(state+10);
     77c:	8a 81       	ldd	r24, Y+2	; 0x02
     77e:	9b 81       	ldd	r25, Y+3	; 0x03
     780:	02 96       	adiw	r24, 0x02	; 2
     782:	2a 81       	ldd	r18, Y+2	; 0x02
     784:	3b 81       	ldd	r19, Y+3	; 0x03
     786:	f9 01       	movw	r30, r18
     788:	22 85       	ldd	r18, Z+10	; 0x0a
     78a:	fc 01       	movw	r30, r24
     78c:	20 83       	st	Z, r18
    *(state+10) = temp;
     78e:	8a 81       	ldd	r24, Y+2	; 0x02
     790:	9b 81       	ldd	r25, Y+3	; 0x03
     792:	0a 96       	adiw	r24, 0x0a	; 10
     794:	29 81       	ldd	r18, Y+1	; 0x01
     796:	fc 01       	movw	r30, r24
     798:	20 83       	st	Z, r18
    temp        = *(state+6);
     79a:	8a 81       	ldd	r24, Y+2	; 0x02
     79c:	9b 81       	ldd	r25, Y+3	; 0x03
     79e:	fc 01       	movw	r30, r24
     7a0:	86 81       	ldd	r24, Z+6	; 0x06
     7a2:	89 83       	std	Y+1, r24	; 0x01
    *(state+6)  = *(state+14);
     7a4:	8a 81       	ldd	r24, Y+2	; 0x02
     7a6:	9b 81       	ldd	r25, Y+3	; 0x03
     7a8:	06 96       	adiw	r24, 0x06	; 6
     7aa:	2a 81       	ldd	r18, Y+2	; 0x02
     7ac:	3b 81       	ldd	r19, Y+3	; 0x03
     7ae:	f9 01       	movw	r30, r18
     7b0:	26 85       	ldd	r18, Z+14	; 0x0e
     7b2:	fc 01       	movw	r30, r24
     7b4:	20 83       	st	Z, r18
    *(state+14) = temp;
     7b6:	8a 81       	ldd	r24, Y+2	; 0x02
     7b8:	9b 81       	ldd	r25, Y+3	; 0x03
     7ba:	0e 96       	adiw	r24, 0x0e	; 14
     7bc:	29 81       	ldd	r18, Y+1	; 0x01
     7be:	fc 01       	movw	r30, r24
     7c0:	20 83       	st	Z, r18
    // row3
    temp        = *(state+15);
     7c2:	8a 81       	ldd	r24, Y+2	; 0x02
     7c4:	9b 81       	ldd	r25, Y+3	; 0x03
     7c6:	fc 01       	movw	r30, r24
     7c8:	87 85       	ldd	r24, Z+15	; 0x0f
     7ca:	89 83       	std	Y+1, r24	; 0x01
    *(state+15) = *(state+11);
     7cc:	8a 81       	ldd	r24, Y+2	; 0x02
     7ce:	9b 81       	ldd	r25, Y+3	; 0x03
     7d0:	0f 96       	adiw	r24, 0x0f	; 15
     7d2:	2a 81       	ldd	r18, Y+2	; 0x02
     7d4:	3b 81       	ldd	r19, Y+3	; 0x03
     7d6:	f9 01       	movw	r30, r18
     7d8:	23 85       	ldd	r18, Z+11	; 0x0b
     7da:	fc 01       	movw	r30, r24
     7dc:	20 83       	st	Z, r18
    *(state+11) = *(state+7);
     7de:	8a 81       	ldd	r24, Y+2	; 0x02
     7e0:	9b 81       	ldd	r25, Y+3	; 0x03
     7e2:	0b 96       	adiw	r24, 0x0b	; 11
     7e4:	2a 81       	ldd	r18, Y+2	; 0x02
     7e6:	3b 81       	ldd	r19, Y+3	; 0x03
     7e8:	f9 01       	movw	r30, r18
     7ea:	27 81       	ldd	r18, Z+7	; 0x07
     7ec:	fc 01       	movw	r30, r24
     7ee:	20 83       	st	Z, r18
    *(state+7)  = *(state+3);
     7f0:	8a 81       	ldd	r24, Y+2	; 0x02
     7f2:	9b 81       	ldd	r25, Y+3	; 0x03
     7f4:	07 96       	adiw	r24, 0x07	; 7
     7f6:	2a 81       	ldd	r18, Y+2	; 0x02
     7f8:	3b 81       	ldd	r19, Y+3	; 0x03
     7fa:	f9 01       	movw	r30, r18
     7fc:	23 81       	ldd	r18, Z+3	; 0x03
     7fe:	fc 01       	movw	r30, r24
     800:	20 83       	st	Z, r18
    *(state+3)  = temp;
     802:	8a 81       	ldd	r24, Y+2	; 0x02
     804:	9b 81       	ldd	r25, Y+3	; 0x03
     806:	03 96       	adiw	r24, 0x03	; 3
     808:	29 81       	ldd	r18, Y+1	; 0x01
     80a:	fc 01       	movw	r30, r24
     80c:	20 83       	st	Z, r18
}
     80e:	00 00       	nop
     810:	0f 90       	pop	r0
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	08 95       	ret

0000081c <aes_encrypt_128>:

void aes_encrypt_128(const uint8_t *roundkeys, const uint8_t *plaintext, uint8_t *ciphertext) {
     81c:	0f 93       	push	r16
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	cd b7       	in	r28, 0x3d	; 61
     826:	de b7       	in	r29, 0x3e	; 62
     828:	69 97       	sbiw	r28, 0x19	; 25
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	de bf       	out	0x3e, r29	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	cd bf       	out	0x3d, r28	; 61
     834:	9d 8b       	std	Y+21, r25	; 0x15
     836:	8c 8b       	std	Y+20, r24	; 0x14
     838:	7f 8b       	std	Y+23, r23	; 0x17
     83a:	6e 8b       	std	Y+22, r22	; 0x16
     83c:	59 8f       	std	Y+25, r21	; 0x19
     83e:	48 8f       	std	Y+24, r20	; 0x18

    uint8_t tmp[16], t;
    uint8_t i, j;

    // first AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     840:	19 82       	std	Y+1, r1	; 0x01
     842:	1f c0       	rjmp	.+62     	; 0x882 <aes_encrypt_128+0x66>
        *(ciphertext+i) = *(plaintext+i) ^ *roundkeys++;
     844:	89 81       	ldd	r24, Y+1	; 0x01
     846:	88 2f       	mov	r24, r24
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	28 8d       	ldd	r18, Y+24	; 0x18
     84c:	39 8d       	ldd	r19, Y+25	; 0x19
     84e:	28 0f       	add	r18, r24
     850:	39 1f       	adc	r19, r25
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	88 2f       	mov	r24, r24
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	4e 89       	ldd	r20, Y+22	; 0x16
     85a:	5f 89       	ldd	r21, Y+23	; 0x17
     85c:	84 0f       	add	r24, r20
     85e:	95 1f       	adc	r25, r21
     860:	fc 01       	movw	r30, r24
     862:	60 81       	ld	r22, Z
     864:	8c 89       	ldd	r24, Y+20	; 0x14
     866:	9d 89       	ldd	r25, Y+21	; 0x15
     868:	ac 01       	movw	r20, r24
     86a:	4f 5f       	subi	r20, 0xFF	; 255
     86c:	5f 4f       	sbci	r21, 0xFF	; 255
     86e:	5d 8b       	std	Y+21, r21	; 0x15
     870:	4c 8b       	std	Y+20, r20	; 0x14
     872:	fc 01       	movw	r30, r24
     874:	80 81       	ld	r24, Z
     876:	86 27       	eor	r24, r22
     878:	f9 01       	movw	r30, r18
     87a:	80 83       	st	Z, r24

    uint8_t tmp[16], t;
    uint8_t i, j;

    // first AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     87c:	89 81       	ldd	r24, Y+1	; 0x01
     87e:	8f 5f       	subi	r24, 0xFF	; 255
     880:	89 83       	std	Y+1, r24	; 0x01
     882:	89 81       	ldd	r24, Y+1	; 0x01
     884:	80 31       	cpi	r24, 0x10	; 16
     886:	f0 f2       	brcs	.-68     	; 0x844 <aes_encrypt_128+0x28>
        *(ciphertext+i) = *(plaintext+i) ^ *roundkeys++;
    }

    // 9 rounds
    for (j = 1; j < AES_ROUNDS; ++j) {
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	8a 83       	std	Y+2, r24	; 0x02
     88c:	50 c1       	rjmp	.+672    	; 0xb2e <__stack+0x22f>

        // SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     88e:	19 82       	std	Y+1, r1	; 0x01
     890:	1c c0       	rjmp	.+56     	; 0x8ca <aes_encrypt_128+0xae>
            *(tmp+i) = SBOX[*(ciphertext+i)];
     892:	89 81       	ldd	r24, Y+1	; 0x01
     894:	88 2f       	mov	r24, r24
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	9e 01       	movw	r18, r28
     89a:	2c 5f       	subi	r18, 0xFC	; 252
     89c:	3f 4f       	sbci	r19, 0xFF	; 255
     89e:	82 0f       	add	r24, r18
     8a0:	93 1f       	adc	r25, r19
     8a2:	29 81       	ldd	r18, Y+1	; 0x01
     8a4:	22 2f       	mov	r18, r18
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	48 8d       	ldd	r20, Y+24	; 0x18
     8aa:	59 8d       	ldd	r21, Y+25	; 0x19
     8ac:	24 0f       	add	r18, r20
     8ae:	35 1f       	adc	r19, r21
     8b0:	f9 01       	movw	r30, r18
     8b2:	20 81       	ld	r18, Z
     8b4:	22 2f       	mov	r18, r18
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	20 50       	subi	r18, 0x00	; 0
     8ba:	3e 4f       	sbci	r19, 0xFE	; 254
     8bc:	f9 01       	movw	r30, r18
     8be:	20 81       	ld	r18, Z
     8c0:	fc 01       	movw	r30, r24
     8c2:	20 83       	st	Z, r18

    // 9 rounds
    for (j = 1; j < AES_ROUNDS; ++j) {

        // SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     8c4:	89 81       	ldd	r24, Y+1	; 0x01
     8c6:	8f 5f       	subi	r24, 0xFF	; 255
     8c8:	89 83       	std	Y+1, r24	; 0x01
     8ca:	89 81       	ldd	r24, Y+1	; 0x01
     8cc:	80 31       	cpi	r24, 0x10	; 16
     8ce:	08 f3       	brcs	.-62     	; 0x892 <aes_encrypt_128+0x76>
            *(tmp+i) = SBOX[*(ciphertext+i)];
        }
        shift_rows(tmp);
     8d0:	ce 01       	movw	r24, r28
     8d2:	04 96       	adiw	r24, 0x04	; 4
     8d4:	0e 94 8b 03 	call	0x716	; 0x716 <shift_rows>
         * [02 03 01 01]   [s0  s4  s8  s12]
         * [01 02 03 01] . [s1  s5  s9  s13]
         * [01 01 02 03]   [s2  s6  s10 s14]
         * [03 01 01 02]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4){  
     8d8:	19 82       	std	Y+1, r1	; 0x01
     8da:	fe c0       	rjmp	.+508    	; 0xad8 <__stack+0x1d9>
            t = tmp[i] ^ tmp[i+1] ^ tmp[i+2] ^ tmp[i+3];
     8dc:	89 81       	ldd	r24, Y+1	; 0x01
     8de:	88 2f       	mov	r24, r24
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	9e 01       	movw	r18, r28
     8e4:	2c 5f       	subi	r18, 0xFC	; 252
     8e6:	3f 4f       	sbci	r19, 0xFF	; 255
     8e8:	82 0f       	add	r24, r18
     8ea:	93 1f       	adc	r25, r19
     8ec:	fc 01       	movw	r30, r24
     8ee:	40 81       	ld	r20, Z
     8f0:	89 81       	ldd	r24, Y+1	; 0x01
     8f2:	88 2f       	mov	r24, r24
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	01 96       	adiw	r24, 0x01	; 1
     8f8:	9e 01       	movw	r18, r28
     8fa:	2c 5f       	subi	r18, 0xFC	; 252
     8fc:	3f 4f       	sbci	r19, 0xFF	; 255
     8fe:	82 0f       	add	r24, r18
     900:	93 1f       	adc	r25, r19
     902:	fc 01       	movw	r30, r24
     904:	80 81       	ld	r24, Z
     906:	48 27       	eor	r20, r24
     908:	89 81       	ldd	r24, Y+1	; 0x01
     90a:	88 2f       	mov	r24, r24
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	02 96       	adiw	r24, 0x02	; 2
     910:	9e 01       	movw	r18, r28
     912:	2c 5f       	subi	r18, 0xFC	; 252
     914:	3f 4f       	sbci	r19, 0xFF	; 255
     916:	82 0f       	add	r24, r18
     918:	93 1f       	adc	r25, r19
     91a:	fc 01       	movw	r30, r24
     91c:	80 81       	ld	r24, Z
     91e:	48 27       	eor	r20, r24
     920:	89 81       	ldd	r24, Y+1	; 0x01
     922:	88 2f       	mov	r24, r24
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	03 96       	adiw	r24, 0x03	; 3
     928:	9e 01       	movw	r18, r28
     92a:	2c 5f       	subi	r18, 0xFC	; 252
     92c:	3f 4f       	sbci	r19, 0xFF	; 255
     92e:	82 0f       	add	r24, r18
     930:	93 1f       	adc	r25, r19
     932:	fc 01       	movw	r30, r24
     934:	80 81       	ld	r24, Z
     936:	84 27       	eor	r24, r20
     938:	8b 83       	std	Y+3, r24	; 0x03
            ciphertext[i]   = mul2(tmp[i]   ^ tmp[i+1]) ^ tmp[i]   ^ t;
     93a:	89 81       	ldd	r24, Y+1	; 0x01
     93c:	88 2f       	mov	r24, r24
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	28 8d       	ldd	r18, Y+24	; 0x18
     942:	39 8d       	ldd	r19, Y+25	; 0x19
     944:	89 01       	movw	r16, r18
     946:	08 0f       	add	r16, r24
     948:	19 1f       	adc	r17, r25
     94a:	89 81       	ldd	r24, Y+1	; 0x01
     94c:	88 2f       	mov	r24, r24
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	9e 01       	movw	r18, r28
     952:	2c 5f       	subi	r18, 0xFC	; 252
     954:	3f 4f       	sbci	r19, 0xFF	; 255
     956:	82 0f       	add	r24, r18
     958:	93 1f       	adc	r25, r19
     95a:	fc 01       	movw	r30, r24
     95c:	40 81       	ld	r20, Z
     95e:	89 81       	ldd	r24, Y+1	; 0x01
     960:	88 2f       	mov	r24, r24
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	01 96       	adiw	r24, 0x01	; 1
     966:	9e 01       	movw	r18, r28
     968:	2c 5f       	subi	r18, 0xFC	; 252
     96a:	3f 4f       	sbci	r19, 0xFF	; 255
     96c:	82 0f       	add	r24, r18
     96e:	93 1f       	adc	r25, r19
     970:	fc 01       	movw	r30, r24
     972:	80 81       	ld	r24, Z
     974:	84 27       	eor	r24, r20
     976:	0e 94 73 03 	call	0x6e6	; 0x6e6 <mul2>
     97a:	48 2f       	mov	r20, r24
     97c:	89 81       	ldd	r24, Y+1	; 0x01
     97e:	88 2f       	mov	r24, r24
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	9e 01       	movw	r18, r28
     984:	2c 5f       	subi	r18, 0xFC	; 252
     986:	3f 4f       	sbci	r19, 0xFF	; 255
     988:	82 0f       	add	r24, r18
     98a:	93 1f       	adc	r25, r19
     98c:	fc 01       	movw	r30, r24
     98e:	80 81       	ld	r24, Z
     990:	94 2f       	mov	r25, r20
     992:	98 27       	eor	r25, r24
     994:	8b 81       	ldd	r24, Y+3	; 0x03
     996:	89 27       	eor	r24, r25
     998:	f8 01       	movw	r30, r16
     99a:	80 83       	st	Z, r24
            ciphertext[i+1] = mul2(tmp[i+1] ^ tmp[i+2]) ^ tmp[i+1] ^ t;
     99c:	89 81       	ldd	r24, Y+1	; 0x01
     99e:	88 2f       	mov	r24, r24
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	01 96       	adiw	r24, 0x01	; 1
     9a4:	28 8d       	ldd	r18, Y+24	; 0x18
     9a6:	39 8d       	ldd	r19, Y+25	; 0x19
     9a8:	89 01       	movw	r16, r18
     9aa:	08 0f       	add	r16, r24
     9ac:	19 1f       	adc	r17, r25
     9ae:	89 81       	ldd	r24, Y+1	; 0x01
     9b0:	88 2f       	mov	r24, r24
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	01 96       	adiw	r24, 0x01	; 1
     9b6:	9e 01       	movw	r18, r28
     9b8:	2c 5f       	subi	r18, 0xFC	; 252
     9ba:	3f 4f       	sbci	r19, 0xFF	; 255
     9bc:	82 0f       	add	r24, r18
     9be:	93 1f       	adc	r25, r19
     9c0:	fc 01       	movw	r30, r24
     9c2:	40 81       	ld	r20, Z
     9c4:	89 81       	ldd	r24, Y+1	; 0x01
     9c6:	88 2f       	mov	r24, r24
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	02 96       	adiw	r24, 0x02	; 2
     9cc:	9e 01       	movw	r18, r28
     9ce:	2c 5f       	subi	r18, 0xFC	; 252
     9d0:	3f 4f       	sbci	r19, 0xFF	; 255
     9d2:	82 0f       	add	r24, r18
     9d4:	93 1f       	adc	r25, r19
     9d6:	fc 01       	movw	r30, r24
     9d8:	80 81       	ld	r24, Z
     9da:	84 27       	eor	r24, r20
     9dc:	0e 94 73 03 	call	0x6e6	; 0x6e6 <mul2>
     9e0:	48 2f       	mov	r20, r24
     9e2:	89 81       	ldd	r24, Y+1	; 0x01
     9e4:	88 2f       	mov	r24, r24
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	01 96       	adiw	r24, 0x01	; 1
     9ea:	9e 01       	movw	r18, r28
     9ec:	2c 5f       	subi	r18, 0xFC	; 252
     9ee:	3f 4f       	sbci	r19, 0xFF	; 255
     9f0:	82 0f       	add	r24, r18
     9f2:	93 1f       	adc	r25, r19
     9f4:	fc 01       	movw	r30, r24
     9f6:	80 81       	ld	r24, Z
     9f8:	94 2f       	mov	r25, r20
     9fa:	98 27       	eor	r25, r24
     9fc:	8b 81       	ldd	r24, Y+3	; 0x03
     9fe:	89 27       	eor	r24, r25
     a00:	f8 01       	movw	r30, r16
     a02:	80 83       	st	Z, r24
            ciphertext[i+2] = mul2(tmp[i+2] ^ tmp[i+3]) ^ tmp[i+2] ^ t;
     a04:	89 81       	ldd	r24, Y+1	; 0x01
     a06:	88 2f       	mov	r24, r24
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	02 96       	adiw	r24, 0x02	; 2
     a0c:	28 8d       	ldd	r18, Y+24	; 0x18
     a0e:	39 8d       	ldd	r19, Y+25	; 0x19
     a10:	89 01       	movw	r16, r18
     a12:	08 0f       	add	r16, r24
     a14:	19 1f       	adc	r17, r25
     a16:	89 81       	ldd	r24, Y+1	; 0x01
     a18:	88 2f       	mov	r24, r24
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	02 96       	adiw	r24, 0x02	; 2
     a1e:	9e 01       	movw	r18, r28
     a20:	2c 5f       	subi	r18, 0xFC	; 252
     a22:	3f 4f       	sbci	r19, 0xFF	; 255
     a24:	82 0f       	add	r24, r18
     a26:	93 1f       	adc	r25, r19
     a28:	fc 01       	movw	r30, r24
     a2a:	40 81       	ld	r20, Z
     a2c:	89 81       	ldd	r24, Y+1	; 0x01
     a2e:	88 2f       	mov	r24, r24
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	03 96       	adiw	r24, 0x03	; 3
     a34:	9e 01       	movw	r18, r28
     a36:	2c 5f       	subi	r18, 0xFC	; 252
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	82 0f       	add	r24, r18
     a3c:	93 1f       	adc	r25, r19
     a3e:	fc 01       	movw	r30, r24
     a40:	80 81       	ld	r24, Z
     a42:	84 27       	eor	r24, r20
     a44:	0e 94 73 03 	call	0x6e6	; 0x6e6 <mul2>
     a48:	48 2f       	mov	r20, r24
     a4a:	89 81       	ldd	r24, Y+1	; 0x01
     a4c:	88 2f       	mov	r24, r24
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	02 96       	adiw	r24, 0x02	; 2
     a52:	9e 01       	movw	r18, r28
     a54:	2c 5f       	subi	r18, 0xFC	; 252
     a56:	3f 4f       	sbci	r19, 0xFF	; 255
     a58:	82 0f       	add	r24, r18
     a5a:	93 1f       	adc	r25, r19
     a5c:	fc 01       	movw	r30, r24
     a5e:	80 81       	ld	r24, Z
     a60:	94 2f       	mov	r25, r20
     a62:	98 27       	eor	r25, r24
     a64:	8b 81       	ldd	r24, Y+3	; 0x03
     a66:	89 27       	eor	r24, r25
     a68:	f8 01       	movw	r30, r16
     a6a:	80 83       	st	Z, r24
            ciphertext[i+3] = mul2(tmp[i+3] ^ tmp[i]  ) ^ tmp[i+3] ^ t;
     a6c:	89 81       	ldd	r24, Y+1	; 0x01
     a6e:	88 2f       	mov	r24, r24
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	03 96       	adiw	r24, 0x03	; 3
     a74:	28 8d       	ldd	r18, Y+24	; 0x18
     a76:	39 8d       	ldd	r19, Y+25	; 0x19
     a78:	89 01       	movw	r16, r18
     a7a:	08 0f       	add	r16, r24
     a7c:	19 1f       	adc	r17, r25
     a7e:	89 81       	ldd	r24, Y+1	; 0x01
     a80:	88 2f       	mov	r24, r24
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	03 96       	adiw	r24, 0x03	; 3
     a86:	9e 01       	movw	r18, r28
     a88:	2c 5f       	subi	r18, 0xFC	; 252
     a8a:	3f 4f       	sbci	r19, 0xFF	; 255
     a8c:	82 0f       	add	r24, r18
     a8e:	93 1f       	adc	r25, r19
     a90:	fc 01       	movw	r30, r24
     a92:	40 81       	ld	r20, Z
     a94:	89 81       	ldd	r24, Y+1	; 0x01
     a96:	88 2f       	mov	r24, r24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	9e 01       	movw	r18, r28
     a9c:	2c 5f       	subi	r18, 0xFC	; 252
     a9e:	3f 4f       	sbci	r19, 0xFF	; 255
     aa0:	82 0f       	add	r24, r18
     aa2:	93 1f       	adc	r25, r19
     aa4:	fc 01       	movw	r30, r24
     aa6:	80 81       	ld	r24, Z
     aa8:	84 27       	eor	r24, r20
     aaa:	0e 94 73 03 	call	0x6e6	; 0x6e6 <mul2>
     aae:	48 2f       	mov	r20, r24
     ab0:	89 81       	ldd	r24, Y+1	; 0x01
     ab2:	88 2f       	mov	r24, r24
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	03 96       	adiw	r24, 0x03	; 3
     ab8:	9e 01       	movw	r18, r28
     aba:	2c 5f       	subi	r18, 0xFC	; 252
     abc:	3f 4f       	sbci	r19, 0xFF	; 255
     abe:	82 0f       	add	r24, r18
     ac0:	93 1f       	adc	r25, r19
     ac2:	fc 01       	movw	r30, r24
     ac4:	80 81       	ld	r24, Z
     ac6:	94 2f       	mov	r25, r20
     ac8:	98 27       	eor	r25, r24
     aca:	8b 81       	ldd	r24, Y+3	; 0x03
     acc:	89 27       	eor	r24, r25
     ace:	f8 01       	movw	r30, r16
     ad0:	80 83       	st	Z, r24
         * [02 03 01 01]   [s0  s4  s8  s12]
         * [01 02 03 01] . [s1  s5  s9  s13]
         * [01 01 02 03]   [s2  s6  s10 s14]
         * [03 01 01 02]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4){  
     ad2:	89 81       	ldd	r24, Y+1	; 0x01
     ad4:	8c 5f       	subi	r24, 0xFC	; 252
     ad6:	89 83       	std	Y+1, r24	; 0x01
     ad8:	89 81       	ldd	r24, Y+1	; 0x01
     ada:	80 31       	cpi	r24, 0x10	; 16
     adc:	08 f4       	brcc	.+2      	; 0xae0 <__stack+0x1e1>
     ade:	fe ce       	rjmp	.-516    	; 0x8dc <aes_encrypt_128+0xc0>
            ciphertext[i+2] = mul2(tmp[i+2] ^ tmp[i+3]) ^ tmp[i+2] ^ t;
            ciphertext[i+3] = mul2(tmp[i+3] ^ tmp[i]  ) ^ tmp[i+3] ^ t;
        }

        // AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     ae0:	19 82       	std	Y+1, r1	; 0x01
     ae2:	1f c0       	rjmp	.+62     	; 0xb22 <__stack+0x223>
            *(ciphertext+i) ^= *roundkeys++;
     ae4:	8c 89       	ldd	r24, Y+20	; 0x14
     ae6:	9d 89       	ldd	r25, Y+21	; 0x15
     ae8:	9c 01       	movw	r18, r24
     aea:	2f 5f       	subi	r18, 0xFF	; 255
     aec:	3f 4f       	sbci	r19, 0xFF	; 255
     aee:	3d 8b       	std	Y+21, r19	; 0x15
     af0:	2c 8b       	std	Y+20, r18	; 0x14
     af2:	fc 01       	movw	r30, r24
     af4:	60 81       	ld	r22, Z
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	88 2f       	mov	r24, r24
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	28 8d       	ldd	r18, Y+24	; 0x18
     afe:	39 8d       	ldd	r19, Y+25	; 0x19
     b00:	82 0f       	add	r24, r18
     b02:	93 1f       	adc	r25, r19
     b04:	29 81       	ldd	r18, Y+1	; 0x01
     b06:	22 2f       	mov	r18, r18
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	48 8d       	ldd	r20, Y+24	; 0x18
     b0c:	59 8d       	ldd	r21, Y+25	; 0x19
     b0e:	24 0f       	add	r18, r20
     b10:	35 1f       	adc	r19, r21
     b12:	f9 01       	movw	r30, r18
     b14:	20 81       	ld	r18, Z
     b16:	26 27       	eor	r18, r22
     b18:	fc 01       	movw	r30, r24
     b1a:	20 83       	st	Z, r18
            ciphertext[i+2] = mul2(tmp[i+2] ^ tmp[i+3]) ^ tmp[i+2] ^ t;
            ciphertext[i+3] = mul2(tmp[i+3] ^ tmp[i]  ) ^ tmp[i+3] ^ t;
        }

        // AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     b1c:	89 81       	ldd	r24, Y+1	; 0x01
     b1e:	8f 5f       	subi	r24, 0xFF	; 255
     b20:	89 83       	std	Y+1, r24	; 0x01
     b22:	89 81       	ldd	r24, Y+1	; 0x01
     b24:	80 31       	cpi	r24, 0x10	; 16
     b26:	f0 f2       	brcs	.-68     	; 0xae4 <__stack+0x1e5>
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
        *(ciphertext+i) = *(plaintext+i) ^ *roundkeys++;
    }

    // 9 rounds
    for (j = 1; j < AES_ROUNDS; ++j) {
     b28:	8a 81       	ldd	r24, Y+2	; 0x02
     b2a:	8f 5f       	subi	r24, 0xFF	; 255
     b2c:	8a 83       	std	Y+2, r24	; 0x02
     b2e:	8a 81       	ldd	r24, Y+2	; 0x02
     b30:	8a 30       	cpi	r24, 0x0A	; 10
     b32:	08 f4       	brcc	.+2      	; 0xb36 <__stack+0x237>
     b34:	ac ce       	rjmp	.-680    	; 0x88e <aes_encrypt_128+0x72>
        }

    }
    
    // last round
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     b36:	19 82       	std	Y+1, r1	; 0x01
     b38:	1b c0       	rjmp	.+54     	; 0xb70 <__stack+0x271>
        *(ciphertext+i) = SBOX[*(ciphertext+i)];
     b3a:	89 81       	ldd	r24, Y+1	; 0x01
     b3c:	88 2f       	mov	r24, r24
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	28 8d       	ldd	r18, Y+24	; 0x18
     b42:	39 8d       	ldd	r19, Y+25	; 0x19
     b44:	82 0f       	add	r24, r18
     b46:	93 1f       	adc	r25, r19
     b48:	29 81       	ldd	r18, Y+1	; 0x01
     b4a:	22 2f       	mov	r18, r18
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	48 8d       	ldd	r20, Y+24	; 0x18
     b50:	59 8d       	ldd	r21, Y+25	; 0x19
     b52:	24 0f       	add	r18, r20
     b54:	35 1f       	adc	r19, r21
     b56:	f9 01       	movw	r30, r18
     b58:	20 81       	ld	r18, Z
     b5a:	22 2f       	mov	r18, r18
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	20 50       	subi	r18, 0x00	; 0
     b60:	3e 4f       	sbci	r19, 0xFE	; 254
     b62:	f9 01       	movw	r30, r18
     b64:	20 81       	ld	r18, Z
     b66:	fc 01       	movw	r30, r24
     b68:	20 83       	st	Z, r18
        }

    }
    
    // last round
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	8f 5f       	subi	r24, 0xFF	; 255
     b6e:	89 83       	std	Y+1, r24	; 0x01
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	80 31       	cpi	r24, 0x10	; 16
     b74:	10 f3       	brcs	.-60     	; 0xb3a <__stack+0x23b>
        *(ciphertext+i) = SBOX[*(ciphertext+i)];
    }
    shift_rows(ciphertext);
     b76:	88 8d       	ldd	r24, Y+24	; 0x18
     b78:	99 8d       	ldd	r25, Y+25	; 0x19
     b7a:	0e 94 8b 03 	call	0x716	; 0x716 <shift_rows>
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     b7e:	19 82       	std	Y+1, r1	; 0x01
     b80:	1f c0       	rjmp	.+62     	; 0xbc0 <__stack+0x2c1>
        *(ciphertext+i) ^= *roundkeys++;
     b82:	8c 89       	ldd	r24, Y+20	; 0x14
     b84:	9d 89       	ldd	r25, Y+21	; 0x15
     b86:	9c 01       	movw	r18, r24
     b88:	2f 5f       	subi	r18, 0xFF	; 255
     b8a:	3f 4f       	sbci	r19, 0xFF	; 255
     b8c:	3d 8b       	std	Y+21, r19	; 0x15
     b8e:	2c 8b       	std	Y+20, r18	; 0x14
     b90:	fc 01       	movw	r30, r24
     b92:	60 81       	ld	r22, Z
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	88 2f       	mov	r24, r24
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	28 8d       	ldd	r18, Y+24	; 0x18
     b9c:	39 8d       	ldd	r19, Y+25	; 0x19
     b9e:	82 0f       	add	r24, r18
     ba0:	93 1f       	adc	r25, r19
     ba2:	29 81       	ldd	r18, Y+1	; 0x01
     ba4:	22 2f       	mov	r18, r18
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	48 8d       	ldd	r20, Y+24	; 0x18
     baa:	59 8d       	ldd	r21, Y+25	; 0x19
     bac:	24 0f       	add	r18, r20
     bae:	35 1f       	adc	r19, r21
     bb0:	f9 01       	movw	r30, r18
     bb2:	20 81       	ld	r18, Z
     bb4:	26 27       	eor	r18, r22
     bb6:	fc 01       	movw	r30, r24
     bb8:	20 83       	st	Z, r18
    // last round
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
        *(ciphertext+i) = SBOX[*(ciphertext+i)];
    }
    shift_rows(ciphertext);
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	8f 5f       	subi	r24, 0xFF	; 255
     bbe:	89 83       	std	Y+1, r24	; 0x01
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	80 31       	cpi	r24, 0x10	; 16
     bc4:	f0 f2       	brcs	.-68     	; 0xb82 <__stack+0x283>
        *(ciphertext+i) ^= *roundkeys++;
    }

}
     bc6:	00 00       	nop
     bc8:	69 96       	adiw	r28, 0x19	; 25
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	f8 94       	cli
     bce:	de bf       	out	0x3e, r29	; 62
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	cd bf       	out	0x3d, r28	; 61
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	1f 91       	pop	r17
     bda:	0f 91       	pop	r16
     bdc:	08 95       	ret

00000bde <aes_key_schedule_128>:
#include "aes_encrypt.h"
/*
 * round constants
 */
static uint8_t RC[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};
void aes_key_schedule_128( uint8_t *key, uint8_t *roundkeys) {
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
     be6:	2e 97       	sbiw	r28, 0x0e	; 14
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	de bf       	out	0x3e, r29	; 62
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	cd bf       	out	0x3d, r28	; 61
     bf2:	9c 87       	std	Y+12, r25	; 0x0c
     bf4:	8b 87       	std	Y+11, r24	; 0x0b
     bf6:	7e 87       	std	Y+14, r23	; 0x0e
     bf8:	6d 87       	std	Y+13, r22	; 0x0d
    uint8_t temp[4];
    uint8_t *last4bytes; // point to the last 4 bytes of one round
    uint8_t *lastround;
    uint8_t i;
	uint8_t x;
	for ( x = 0; x < 255; x++)
     bfa:	1c 82       	std	Y+4, r1	; 0x04
     bfc:	03 c0       	rjmp	.+6      	; 0xc04 <aes_key_schedule_128+0x26>
     bfe:	8c 81       	ldd	r24, Y+4	; 0x04
     c00:	8f 5f       	subi	r24, 0xFF	; 255
     c02:	8c 83       	std	Y+4, r24	; 0x04
     c04:	8c 81       	ldd	r24, Y+4	; 0x04
     c06:	8f 3f       	cpi	r24, 0xFF	; 255
     c08:	d1 f7       	brne	.-12     	; 0xbfe <aes_key_schedule_128+0x20>
	{
		
	}

    for (i = 0; i < 16; ++i) {
     c0a:	1b 82       	std	Y+3, r1	; 0x03
     c0c:	15 c0       	rjmp	.+42     	; 0xc38 <aes_key_schedule_128+0x5a>
        *roundkeys++ = *key++;
     c0e:	8d 85       	ldd	r24, Y+13	; 0x0d
     c10:	9e 85       	ldd	r25, Y+14	; 0x0e
     c12:	9c 01       	movw	r18, r24
     c14:	2f 5f       	subi	r18, 0xFF	; 255
     c16:	3f 4f       	sbci	r19, 0xFF	; 255
     c18:	3e 87       	std	Y+14, r19	; 0x0e
     c1a:	2d 87       	std	Y+13, r18	; 0x0d
     c1c:	2b 85       	ldd	r18, Y+11	; 0x0b
     c1e:	3c 85       	ldd	r19, Y+12	; 0x0c
     c20:	a9 01       	movw	r20, r18
     c22:	4f 5f       	subi	r20, 0xFF	; 255
     c24:	5f 4f       	sbci	r21, 0xFF	; 255
     c26:	5c 87       	std	Y+12, r21	; 0x0c
     c28:	4b 87       	std	Y+11, r20	; 0x0b
     c2a:	f9 01       	movw	r30, r18
     c2c:	20 81       	ld	r18, Z
     c2e:	fc 01       	movw	r30, r24
     c30:	20 83       	st	Z, r18
	for ( x = 0; x < 255; x++)
	{
		
	}

    for (i = 0; i < 16; ++i) {
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	8f 5f       	subi	r24, 0xFF	; 255
     c36:	8b 83       	std	Y+3, r24	; 0x03
     c38:	8b 81       	ldd	r24, Y+3	; 0x03
     c3a:	80 31       	cpi	r24, 0x10	; 16
     c3c:	40 f3       	brcs	.-48     	; 0xc0e <aes_key_schedule_128+0x30>
        *roundkeys++ = *key++;
    }

    last4bytes = roundkeys-4;
     c3e:	8d 85       	ldd	r24, Y+13	; 0x0d
     c40:	9e 85       	ldd	r25, Y+14	; 0x0e
     c42:	04 97       	sbiw	r24, 0x04	; 4
     c44:	9a 83       	std	Y+2, r25	; 0x02
     c46:	89 83       	std	Y+1, r24	; 0x01
    for (i = 0; i < AES_ROUNDS; ++i) {
     c48:	1b 82       	std	Y+3, r1	; 0x03
     c4a:	f2 c1       	rjmp	.+996    	; 0x1030 <aes_key_schedule_128+0x452>
        // k0-k3 for next round
        temp[3] = SBOX[*last4bytes++];
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	9a 81       	ldd	r25, Y+2	; 0x02
     c50:	9c 01       	movw	r18, r24
     c52:	2f 5f       	subi	r18, 0xFF	; 255
     c54:	3f 4f       	sbci	r19, 0xFF	; 255
     c56:	3a 83       	std	Y+2, r19	; 0x02
     c58:	29 83       	std	Y+1, r18	; 0x01
     c5a:	fc 01       	movw	r30, r24
     c5c:	80 81       	ld	r24, Z
     c5e:	88 2f       	mov	r24, r24
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	80 50       	subi	r24, 0x00	; 0
     c64:	9e 4f       	sbci	r25, 0xFE	; 254
     c66:	fc 01       	movw	r30, r24
     c68:	80 81       	ld	r24, Z
     c6a:	8a 87       	std	Y+10, r24	; 0x0a
        temp[0] = SBOX[*last4bytes++];
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
     c6e:	9a 81       	ldd	r25, Y+2	; 0x02
     c70:	9c 01       	movw	r18, r24
     c72:	2f 5f       	subi	r18, 0xFF	; 255
     c74:	3f 4f       	sbci	r19, 0xFF	; 255
     c76:	3a 83       	std	Y+2, r19	; 0x02
     c78:	29 83       	std	Y+1, r18	; 0x01
     c7a:	fc 01       	movw	r30, r24
     c7c:	80 81       	ld	r24, Z
     c7e:	88 2f       	mov	r24, r24
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	80 50       	subi	r24, 0x00	; 0
     c84:	9e 4f       	sbci	r25, 0xFE	; 254
     c86:	fc 01       	movw	r30, r24
     c88:	80 81       	ld	r24, Z
     c8a:	8f 83       	std	Y+7, r24	; 0x07
        temp[1] = SBOX[*last4bytes++];
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	9a 81       	ldd	r25, Y+2	; 0x02
     c90:	9c 01       	movw	r18, r24
     c92:	2f 5f       	subi	r18, 0xFF	; 255
     c94:	3f 4f       	sbci	r19, 0xFF	; 255
     c96:	3a 83       	std	Y+2, r19	; 0x02
     c98:	29 83       	std	Y+1, r18	; 0x01
     c9a:	fc 01       	movw	r30, r24
     c9c:	80 81       	ld	r24, Z
     c9e:	88 2f       	mov	r24, r24
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	80 50       	subi	r24, 0x00	; 0
     ca4:	9e 4f       	sbci	r25, 0xFE	; 254
     ca6:	fc 01       	movw	r30, r24
     ca8:	80 81       	ld	r24, Z
     caa:	88 87       	std	Y+8, r24	; 0x08
        temp[2] = SBOX[*last4bytes++];
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	9a 81       	ldd	r25, Y+2	; 0x02
     cb0:	9c 01       	movw	r18, r24
     cb2:	2f 5f       	subi	r18, 0xFF	; 255
     cb4:	3f 4f       	sbci	r19, 0xFF	; 255
     cb6:	3a 83       	std	Y+2, r19	; 0x02
     cb8:	29 83       	std	Y+1, r18	; 0x01
     cba:	fc 01       	movw	r30, r24
     cbc:	80 81       	ld	r24, Z
     cbe:	88 2f       	mov	r24, r24
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	80 50       	subi	r24, 0x00	; 0
     cc4:	9e 4f       	sbci	r25, 0xFE	; 254
     cc6:	fc 01       	movw	r30, r24
     cc8:	80 81       	ld	r24, Z
     cca:	89 87       	std	Y+9, r24	; 0x09
        temp[0] ^= RC[i];
     ccc:	2f 81       	ldd	r18, Y+7	; 0x07
     cce:	8b 81       	ldd	r24, Y+3	; 0x03
     cd0:	88 2f       	mov	r24, r24
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	80 50       	subi	r24, 0x00	; 0
     cd6:	9d 4f       	sbci	r25, 0xFD	; 253
     cd8:	fc 01       	movw	r30, r24
     cda:	80 81       	ld	r24, Z
     cdc:	82 27       	eor	r24, r18
     cde:	8f 83       	std	Y+7, r24	; 0x07
        lastround = roundkeys-16;
     ce0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ce2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ce4:	40 97       	sbiw	r24, 0x10	; 16
     ce6:	9e 83       	std	Y+6, r25	; 0x06
     ce8:	8d 83       	std	Y+5, r24	; 0x05
        *roundkeys++ = temp[0] ^ *lastround++;
     cea:	8d 85       	ldd	r24, Y+13	; 0x0d
     cec:	9e 85       	ldd	r25, Y+14	; 0x0e
     cee:	9c 01       	movw	r18, r24
     cf0:	2f 5f       	subi	r18, 0xFF	; 255
     cf2:	3f 4f       	sbci	r19, 0xFF	; 255
     cf4:	3e 87       	std	Y+14, r19	; 0x0e
     cf6:	2d 87       	std	Y+13, r18	; 0x0d
     cf8:	6f 81       	ldd	r22, Y+7	; 0x07
     cfa:	2d 81       	ldd	r18, Y+5	; 0x05
     cfc:	3e 81       	ldd	r19, Y+6	; 0x06
     cfe:	a9 01       	movw	r20, r18
     d00:	4f 5f       	subi	r20, 0xFF	; 255
     d02:	5f 4f       	sbci	r21, 0xFF	; 255
     d04:	5e 83       	std	Y+6, r21	; 0x06
     d06:	4d 83       	std	Y+5, r20	; 0x05
     d08:	f9 01       	movw	r30, r18
     d0a:	20 81       	ld	r18, Z
     d0c:	26 27       	eor	r18, r22
     d0e:	fc 01       	movw	r30, r24
     d10:	20 83       	st	Z, r18
        *roundkeys++ = temp[1] ^ *lastround++;
     d12:	8d 85       	ldd	r24, Y+13	; 0x0d
     d14:	9e 85       	ldd	r25, Y+14	; 0x0e
     d16:	9c 01       	movw	r18, r24
     d18:	2f 5f       	subi	r18, 0xFF	; 255
     d1a:	3f 4f       	sbci	r19, 0xFF	; 255
     d1c:	3e 87       	std	Y+14, r19	; 0x0e
     d1e:	2d 87       	std	Y+13, r18	; 0x0d
     d20:	68 85       	ldd	r22, Y+8	; 0x08
     d22:	2d 81       	ldd	r18, Y+5	; 0x05
     d24:	3e 81       	ldd	r19, Y+6	; 0x06
     d26:	a9 01       	movw	r20, r18
     d28:	4f 5f       	subi	r20, 0xFF	; 255
     d2a:	5f 4f       	sbci	r21, 0xFF	; 255
     d2c:	5e 83       	std	Y+6, r21	; 0x06
     d2e:	4d 83       	std	Y+5, r20	; 0x05
     d30:	f9 01       	movw	r30, r18
     d32:	20 81       	ld	r18, Z
     d34:	26 27       	eor	r18, r22
     d36:	fc 01       	movw	r30, r24
     d38:	20 83       	st	Z, r18
        *roundkeys++ = temp[2] ^ *lastround++;
     d3a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d3c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d3e:	9c 01       	movw	r18, r24
     d40:	2f 5f       	subi	r18, 0xFF	; 255
     d42:	3f 4f       	sbci	r19, 0xFF	; 255
     d44:	3e 87       	std	Y+14, r19	; 0x0e
     d46:	2d 87       	std	Y+13, r18	; 0x0d
     d48:	69 85       	ldd	r22, Y+9	; 0x09
     d4a:	2d 81       	ldd	r18, Y+5	; 0x05
     d4c:	3e 81       	ldd	r19, Y+6	; 0x06
     d4e:	a9 01       	movw	r20, r18
     d50:	4f 5f       	subi	r20, 0xFF	; 255
     d52:	5f 4f       	sbci	r21, 0xFF	; 255
     d54:	5e 83       	std	Y+6, r21	; 0x06
     d56:	4d 83       	std	Y+5, r20	; 0x05
     d58:	f9 01       	movw	r30, r18
     d5a:	20 81       	ld	r18, Z
     d5c:	26 27       	eor	r18, r22
     d5e:	fc 01       	movw	r30, r24
     d60:	20 83       	st	Z, r18
        *roundkeys++ = temp[3] ^ *lastround++;
     d62:	8d 85       	ldd	r24, Y+13	; 0x0d
     d64:	9e 85       	ldd	r25, Y+14	; 0x0e
     d66:	9c 01       	movw	r18, r24
     d68:	2f 5f       	subi	r18, 0xFF	; 255
     d6a:	3f 4f       	sbci	r19, 0xFF	; 255
     d6c:	3e 87       	std	Y+14, r19	; 0x0e
     d6e:	2d 87       	std	Y+13, r18	; 0x0d
     d70:	6a 85       	ldd	r22, Y+10	; 0x0a
     d72:	2d 81       	ldd	r18, Y+5	; 0x05
     d74:	3e 81       	ldd	r19, Y+6	; 0x06
     d76:	a9 01       	movw	r20, r18
     d78:	4f 5f       	subi	r20, 0xFF	; 255
     d7a:	5f 4f       	sbci	r21, 0xFF	; 255
     d7c:	5e 83       	std	Y+6, r21	; 0x06
     d7e:	4d 83       	std	Y+5, r20	; 0x05
     d80:	f9 01       	movw	r30, r18
     d82:	20 81       	ld	r18, Z
     d84:	26 27       	eor	r18, r22
     d86:	fc 01       	movw	r30, r24
     d88:	20 83       	st	Z, r18
        // k4-k7 for next round        
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     d8a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d8c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d8e:	9c 01       	movw	r18, r24
     d90:	2f 5f       	subi	r18, 0xFF	; 255
     d92:	3f 4f       	sbci	r19, 0xFF	; 255
     d94:	3e 87       	std	Y+14, r19	; 0x0e
     d96:	2d 87       	std	Y+13, r18	; 0x0d
     d98:	29 81       	ldd	r18, Y+1	; 0x01
     d9a:	3a 81       	ldd	r19, Y+2	; 0x02
     d9c:	a9 01       	movw	r20, r18
     d9e:	4f 5f       	subi	r20, 0xFF	; 255
     da0:	5f 4f       	sbci	r21, 0xFF	; 255
     da2:	5a 83       	std	Y+2, r21	; 0x02
     da4:	49 83       	std	Y+1, r20	; 0x01
     da6:	f9 01       	movw	r30, r18
     da8:	60 81       	ld	r22, Z
     daa:	2d 81       	ldd	r18, Y+5	; 0x05
     dac:	3e 81       	ldd	r19, Y+6	; 0x06
     dae:	a9 01       	movw	r20, r18
     db0:	4f 5f       	subi	r20, 0xFF	; 255
     db2:	5f 4f       	sbci	r21, 0xFF	; 255
     db4:	5e 83       	std	Y+6, r21	; 0x06
     db6:	4d 83       	std	Y+5, r20	; 0x05
     db8:	f9 01       	movw	r30, r18
     dba:	20 81       	ld	r18, Z
     dbc:	26 27       	eor	r18, r22
     dbe:	fc 01       	movw	r30, r24
     dc0:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     dc2:	8d 85       	ldd	r24, Y+13	; 0x0d
     dc4:	9e 85       	ldd	r25, Y+14	; 0x0e
     dc6:	9c 01       	movw	r18, r24
     dc8:	2f 5f       	subi	r18, 0xFF	; 255
     dca:	3f 4f       	sbci	r19, 0xFF	; 255
     dcc:	3e 87       	std	Y+14, r19	; 0x0e
     dce:	2d 87       	std	Y+13, r18	; 0x0d
     dd0:	29 81       	ldd	r18, Y+1	; 0x01
     dd2:	3a 81       	ldd	r19, Y+2	; 0x02
     dd4:	a9 01       	movw	r20, r18
     dd6:	4f 5f       	subi	r20, 0xFF	; 255
     dd8:	5f 4f       	sbci	r21, 0xFF	; 255
     dda:	5a 83       	std	Y+2, r21	; 0x02
     ddc:	49 83       	std	Y+1, r20	; 0x01
     dde:	f9 01       	movw	r30, r18
     de0:	60 81       	ld	r22, Z
     de2:	2d 81       	ldd	r18, Y+5	; 0x05
     de4:	3e 81       	ldd	r19, Y+6	; 0x06
     de6:	a9 01       	movw	r20, r18
     de8:	4f 5f       	subi	r20, 0xFF	; 255
     dea:	5f 4f       	sbci	r21, 0xFF	; 255
     dec:	5e 83       	std	Y+6, r21	; 0x06
     dee:	4d 83       	std	Y+5, r20	; 0x05
     df0:	f9 01       	movw	r30, r18
     df2:	20 81       	ld	r18, Z
     df4:	26 27       	eor	r18, r22
     df6:	fc 01       	movw	r30, r24
     df8:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     dfa:	8d 85       	ldd	r24, Y+13	; 0x0d
     dfc:	9e 85       	ldd	r25, Y+14	; 0x0e
     dfe:	9c 01       	movw	r18, r24
     e00:	2f 5f       	subi	r18, 0xFF	; 255
     e02:	3f 4f       	sbci	r19, 0xFF	; 255
     e04:	3e 87       	std	Y+14, r19	; 0x0e
     e06:	2d 87       	std	Y+13, r18	; 0x0d
     e08:	29 81       	ldd	r18, Y+1	; 0x01
     e0a:	3a 81       	ldd	r19, Y+2	; 0x02
     e0c:	a9 01       	movw	r20, r18
     e0e:	4f 5f       	subi	r20, 0xFF	; 255
     e10:	5f 4f       	sbci	r21, 0xFF	; 255
     e12:	5a 83       	std	Y+2, r21	; 0x02
     e14:	49 83       	std	Y+1, r20	; 0x01
     e16:	f9 01       	movw	r30, r18
     e18:	60 81       	ld	r22, Z
     e1a:	2d 81       	ldd	r18, Y+5	; 0x05
     e1c:	3e 81       	ldd	r19, Y+6	; 0x06
     e1e:	a9 01       	movw	r20, r18
     e20:	4f 5f       	subi	r20, 0xFF	; 255
     e22:	5f 4f       	sbci	r21, 0xFF	; 255
     e24:	5e 83       	std	Y+6, r21	; 0x06
     e26:	4d 83       	std	Y+5, r20	; 0x05
     e28:	f9 01       	movw	r30, r18
     e2a:	20 81       	ld	r18, Z
     e2c:	26 27       	eor	r18, r22
     e2e:	fc 01       	movw	r30, r24
     e30:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     e32:	8d 85       	ldd	r24, Y+13	; 0x0d
     e34:	9e 85       	ldd	r25, Y+14	; 0x0e
     e36:	9c 01       	movw	r18, r24
     e38:	2f 5f       	subi	r18, 0xFF	; 255
     e3a:	3f 4f       	sbci	r19, 0xFF	; 255
     e3c:	3e 87       	std	Y+14, r19	; 0x0e
     e3e:	2d 87       	std	Y+13, r18	; 0x0d
     e40:	29 81       	ldd	r18, Y+1	; 0x01
     e42:	3a 81       	ldd	r19, Y+2	; 0x02
     e44:	a9 01       	movw	r20, r18
     e46:	4f 5f       	subi	r20, 0xFF	; 255
     e48:	5f 4f       	sbci	r21, 0xFF	; 255
     e4a:	5a 83       	std	Y+2, r21	; 0x02
     e4c:	49 83       	std	Y+1, r20	; 0x01
     e4e:	f9 01       	movw	r30, r18
     e50:	60 81       	ld	r22, Z
     e52:	2d 81       	ldd	r18, Y+5	; 0x05
     e54:	3e 81       	ldd	r19, Y+6	; 0x06
     e56:	a9 01       	movw	r20, r18
     e58:	4f 5f       	subi	r20, 0xFF	; 255
     e5a:	5f 4f       	sbci	r21, 0xFF	; 255
     e5c:	5e 83       	std	Y+6, r21	; 0x06
     e5e:	4d 83       	std	Y+5, r20	; 0x05
     e60:	f9 01       	movw	r30, r18
     e62:	20 81       	ld	r18, Z
     e64:	26 27       	eor	r18, r22
     e66:	fc 01       	movw	r30, r24
     e68:	20 83       	st	Z, r18
        // k8-k11 for next round
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     e6a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e6c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e6e:	9c 01       	movw	r18, r24
     e70:	2f 5f       	subi	r18, 0xFF	; 255
     e72:	3f 4f       	sbci	r19, 0xFF	; 255
     e74:	3e 87       	std	Y+14, r19	; 0x0e
     e76:	2d 87       	std	Y+13, r18	; 0x0d
     e78:	29 81       	ldd	r18, Y+1	; 0x01
     e7a:	3a 81       	ldd	r19, Y+2	; 0x02
     e7c:	a9 01       	movw	r20, r18
     e7e:	4f 5f       	subi	r20, 0xFF	; 255
     e80:	5f 4f       	sbci	r21, 0xFF	; 255
     e82:	5a 83       	std	Y+2, r21	; 0x02
     e84:	49 83       	std	Y+1, r20	; 0x01
     e86:	f9 01       	movw	r30, r18
     e88:	60 81       	ld	r22, Z
     e8a:	2d 81       	ldd	r18, Y+5	; 0x05
     e8c:	3e 81       	ldd	r19, Y+6	; 0x06
     e8e:	a9 01       	movw	r20, r18
     e90:	4f 5f       	subi	r20, 0xFF	; 255
     e92:	5f 4f       	sbci	r21, 0xFF	; 255
     e94:	5e 83       	std	Y+6, r21	; 0x06
     e96:	4d 83       	std	Y+5, r20	; 0x05
     e98:	f9 01       	movw	r30, r18
     e9a:	20 81       	ld	r18, Z
     e9c:	26 27       	eor	r18, r22
     e9e:	fc 01       	movw	r30, r24
     ea0:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     ea2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ea4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ea6:	9c 01       	movw	r18, r24
     ea8:	2f 5f       	subi	r18, 0xFF	; 255
     eaa:	3f 4f       	sbci	r19, 0xFF	; 255
     eac:	3e 87       	std	Y+14, r19	; 0x0e
     eae:	2d 87       	std	Y+13, r18	; 0x0d
     eb0:	29 81       	ldd	r18, Y+1	; 0x01
     eb2:	3a 81       	ldd	r19, Y+2	; 0x02
     eb4:	a9 01       	movw	r20, r18
     eb6:	4f 5f       	subi	r20, 0xFF	; 255
     eb8:	5f 4f       	sbci	r21, 0xFF	; 255
     eba:	5a 83       	std	Y+2, r21	; 0x02
     ebc:	49 83       	std	Y+1, r20	; 0x01
     ebe:	f9 01       	movw	r30, r18
     ec0:	60 81       	ld	r22, Z
     ec2:	2d 81       	ldd	r18, Y+5	; 0x05
     ec4:	3e 81       	ldd	r19, Y+6	; 0x06
     ec6:	a9 01       	movw	r20, r18
     ec8:	4f 5f       	subi	r20, 0xFF	; 255
     eca:	5f 4f       	sbci	r21, 0xFF	; 255
     ecc:	5e 83       	std	Y+6, r21	; 0x06
     ece:	4d 83       	std	Y+5, r20	; 0x05
     ed0:	f9 01       	movw	r30, r18
     ed2:	20 81       	ld	r18, Z
     ed4:	26 27       	eor	r18, r22
     ed6:	fc 01       	movw	r30, r24
     ed8:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     eda:	8d 85       	ldd	r24, Y+13	; 0x0d
     edc:	9e 85       	ldd	r25, Y+14	; 0x0e
     ede:	9c 01       	movw	r18, r24
     ee0:	2f 5f       	subi	r18, 0xFF	; 255
     ee2:	3f 4f       	sbci	r19, 0xFF	; 255
     ee4:	3e 87       	std	Y+14, r19	; 0x0e
     ee6:	2d 87       	std	Y+13, r18	; 0x0d
     ee8:	29 81       	ldd	r18, Y+1	; 0x01
     eea:	3a 81       	ldd	r19, Y+2	; 0x02
     eec:	a9 01       	movw	r20, r18
     eee:	4f 5f       	subi	r20, 0xFF	; 255
     ef0:	5f 4f       	sbci	r21, 0xFF	; 255
     ef2:	5a 83       	std	Y+2, r21	; 0x02
     ef4:	49 83       	std	Y+1, r20	; 0x01
     ef6:	f9 01       	movw	r30, r18
     ef8:	60 81       	ld	r22, Z
     efa:	2d 81       	ldd	r18, Y+5	; 0x05
     efc:	3e 81       	ldd	r19, Y+6	; 0x06
     efe:	a9 01       	movw	r20, r18
     f00:	4f 5f       	subi	r20, 0xFF	; 255
     f02:	5f 4f       	sbci	r21, 0xFF	; 255
     f04:	5e 83       	std	Y+6, r21	; 0x06
     f06:	4d 83       	std	Y+5, r20	; 0x05
     f08:	f9 01       	movw	r30, r18
     f0a:	20 81       	ld	r18, Z
     f0c:	26 27       	eor	r18, r22
     f0e:	fc 01       	movw	r30, r24
     f10:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     f12:	8d 85       	ldd	r24, Y+13	; 0x0d
     f14:	9e 85       	ldd	r25, Y+14	; 0x0e
     f16:	9c 01       	movw	r18, r24
     f18:	2f 5f       	subi	r18, 0xFF	; 255
     f1a:	3f 4f       	sbci	r19, 0xFF	; 255
     f1c:	3e 87       	std	Y+14, r19	; 0x0e
     f1e:	2d 87       	std	Y+13, r18	; 0x0d
     f20:	29 81       	ldd	r18, Y+1	; 0x01
     f22:	3a 81       	ldd	r19, Y+2	; 0x02
     f24:	a9 01       	movw	r20, r18
     f26:	4f 5f       	subi	r20, 0xFF	; 255
     f28:	5f 4f       	sbci	r21, 0xFF	; 255
     f2a:	5a 83       	std	Y+2, r21	; 0x02
     f2c:	49 83       	std	Y+1, r20	; 0x01
     f2e:	f9 01       	movw	r30, r18
     f30:	60 81       	ld	r22, Z
     f32:	2d 81       	ldd	r18, Y+5	; 0x05
     f34:	3e 81       	ldd	r19, Y+6	; 0x06
     f36:	a9 01       	movw	r20, r18
     f38:	4f 5f       	subi	r20, 0xFF	; 255
     f3a:	5f 4f       	sbci	r21, 0xFF	; 255
     f3c:	5e 83       	std	Y+6, r21	; 0x06
     f3e:	4d 83       	std	Y+5, r20	; 0x05
     f40:	f9 01       	movw	r30, r18
     f42:	20 81       	ld	r18, Z
     f44:	26 27       	eor	r18, r22
     f46:	fc 01       	movw	r30, r24
     f48:	20 83       	st	Z, r18
        // k12-k15 for next round
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     f4a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f4c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f4e:	9c 01       	movw	r18, r24
     f50:	2f 5f       	subi	r18, 0xFF	; 255
     f52:	3f 4f       	sbci	r19, 0xFF	; 255
     f54:	3e 87       	std	Y+14, r19	; 0x0e
     f56:	2d 87       	std	Y+13, r18	; 0x0d
     f58:	29 81       	ldd	r18, Y+1	; 0x01
     f5a:	3a 81       	ldd	r19, Y+2	; 0x02
     f5c:	a9 01       	movw	r20, r18
     f5e:	4f 5f       	subi	r20, 0xFF	; 255
     f60:	5f 4f       	sbci	r21, 0xFF	; 255
     f62:	5a 83       	std	Y+2, r21	; 0x02
     f64:	49 83       	std	Y+1, r20	; 0x01
     f66:	f9 01       	movw	r30, r18
     f68:	60 81       	ld	r22, Z
     f6a:	2d 81       	ldd	r18, Y+5	; 0x05
     f6c:	3e 81       	ldd	r19, Y+6	; 0x06
     f6e:	a9 01       	movw	r20, r18
     f70:	4f 5f       	subi	r20, 0xFF	; 255
     f72:	5f 4f       	sbci	r21, 0xFF	; 255
     f74:	5e 83       	std	Y+6, r21	; 0x06
     f76:	4d 83       	std	Y+5, r20	; 0x05
     f78:	f9 01       	movw	r30, r18
     f7a:	20 81       	ld	r18, Z
     f7c:	26 27       	eor	r18, r22
     f7e:	fc 01       	movw	r30, r24
     f80:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     f82:	8d 85       	ldd	r24, Y+13	; 0x0d
     f84:	9e 85       	ldd	r25, Y+14	; 0x0e
     f86:	9c 01       	movw	r18, r24
     f88:	2f 5f       	subi	r18, 0xFF	; 255
     f8a:	3f 4f       	sbci	r19, 0xFF	; 255
     f8c:	3e 87       	std	Y+14, r19	; 0x0e
     f8e:	2d 87       	std	Y+13, r18	; 0x0d
     f90:	29 81       	ldd	r18, Y+1	; 0x01
     f92:	3a 81       	ldd	r19, Y+2	; 0x02
     f94:	a9 01       	movw	r20, r18
     f96:	4f 5f       	subi	r20, 0xFF	; 255
     f98:	5f 4f       	sbci	r21, 0xFF	; 255
     f9a:	5a 83       	std	Y+2, r21	; 0x02
     f9c:	49 83       	std	Y+1, r20	; 0x01
     f9e:	f9 01       	movw	r30, r18
     fa0:	60 81       	ld	r22, Z
     fa2:	2d 81       	ldd	r18, Y+5	; 0x05
     fa4:	3e 81       	ldd	r19, Y+6	; 0x06
     fa6:	a9 01       	movw	r20, r18
     fa8:	4f 5f       	subi	r20, 0xFF	; 255
     faa:	5f 4f       	sbci	r21, 0xFF	; 255
     fac:	5e 83       	std	Y+6, r21	; 0x06
     fae:	4d 83       	std	Y+5, r20	; 0x05
     fb0:	f9 01       	movw	r30, r18
     fb2:	20 81       	ld	r18, Z
     fb4:	26 27       	eor	r18, r22
     fb6:	fc 01       	movw	r30, r24
     fb8:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     fba:	8d 85       	ldd	r24, Y+13	; 0x0d
     fbc:	9e 85       	ldd	r25, Y+14	; 0x0e
     fbe:	9c 01       	movw	r18, r24
     fc0:	2f 5f       	subi	r18, 0xFF	; 255
     fc2:	3f 4f       	sbci	r19, 0xFF	; 255
     fc4:	3e 87       	std	Y+14, r19	; 0x0e
     fc6:	2d 87       	std	Y+13, r18	; 0x0d
     fc8:	29 81       	ldd	r18, Y+1	; 0x01
     fca:	3a 81       	ldd	r19, Y+2	; 0x02
     fcc:	a9 01       	movw	r20, r18
     fce:	4f 5f       	subi	r20, 0xFF	; 255
     fd0:	5f 4f       	sbci	r21, 0xFF	; 255
     fd2:	5a 83       	std	Y+2, r21	; 0x02
     fd4:	49 83       	std	Y+1, r20	; 0x01
     fd6:	f9 01       	movw	r30, r18
     fd8:	60 81       	ld	r22, Z
     fda:	2d 81       	ldd	r18, Y+5	; 0x05
     fdc:	3e 81       	ldd	r19, Y+6	; 0x06
     fde:	a9 01       	movw	r20, r18
     fe0:	4f 5f       	subi	r20, 0xFF	; 255
     fe2:	5f 4f       	sbci	r21, 0xFF	; 255
     fe4:	5e 83       	std	Y+6, r21	; 0x06
     fe6:	4d 83       	std	Y+5, r20	; 0x05
     fe8:	f9 01       	movw	r30, r18
     fea:	20 81       	ld	r18, Z
     fec:	26 27       	eor	r18, r22
     fee:	fc 01       	movw	r30, r24
     ff0:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     ff2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ff4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ff6:	9c 01       	movw	r18, r24
     ff8:	2f 5f       	subi	r18, 0xFF	; 255
     ffa:	3f 4f       	sbci	r19, 0xFF	; 255
     ffc:	3e 87       	std	Y+14, r19	; 0x0e
     ffe:	2d 87       	std	Y+13, r18	; 0x0d
    1000:	29 81       	ldd	r18, Y+1	; 0x01
    1002:	3a 81       	ldd	r19, Y+2	; 0x02
    1004:	a9 01       	movw	r20, r18
    1006:	4f 5f       	subi	r20, 0xFF	; 255
    1008:	5f 4f       	sbci	r21, 0xFF	; 255
    100a:	5a 83       	std	Y+2, r21	; 0x02
    100c:	49 83       	std	Y+1, r20	; 0x01
    100e:	f9 01       	movw	r30, r18
    1010:	60 81       	ld	r22, Z
    1012:	2d 81       	ldd	r18, Y+5	; 0x05
    1014:	3e 81       	ldd	r19, Y+6	; 0x06
    1016:	a9 01       	movw	r20, r18
    1018:	4f 5f       	subi	r20, 0xFF	; 255
    101a:	5f 4f       	sbci	r21, 0xFF	; 255
    101c:	5e 83       	std	Y+6, r21	; 0x06
    101e:	4d 83       	std	Y+5, r20	; 0x05
    1020:	f9 01       	movw	r30, r18
    1022:	20 81       	ld	r18, Z
    1024:	26 27       	eor	r18, r22
    1026:	fc 01       	movw	r30, r24
    1028:	20 83       	st	Z, r18
    for (i = 0; i < 16; ++i) {
        *roundkeys++ = *key++;
    }

    last4bytes = roundkeys-4;
    for (i = 0; i < AES_ROUNDS; ++i) {
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	8f 5f       	subi	r24, 0xFF	; 255
    102e:	8b 83       	std	Y+3, r24	; 0x03
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	8a 30       	cpi	r24, 0x0A	; 10
    1034:	08 f4       	brcc	.+2      	; 0x1038 <aes_key_schedule_128+0x45a>
    1036:	0a ce       	rjmp	.-1004   	; 0xc4c <aes_key_schedule_128+0x6e>
        *roundkeys++ = *last4bytes++ ^ *lastround++;
        *roundkeys++ = *last4bytes++ ^ *lastround++;
        *roundkeys++ = *last4bytes++ ^ *lastround++;
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    }
}
    1038:	00 00       	nop
    103a:	2e 96       	adiw	r28, 0x0e	; 14
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	de bf       	out	0x3e, r29	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	cd bf       	out	0x3d, r28	; 61
    1046:	df 91       	pop	r29
    1048:	cf 91       	pop	r28
    104a:	08 95       	ret

0000104c <main>:
#include "aes_decrypt.h"
#include "aes_encrypt.h"
#include "aes_schedule.h"


int main(int argc, char *argv[]) {
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    1054:	c5 5f       	subi	r28, 0xF5	; 245
    1056:	d1 09       	sbc	r29, r1
    1058:	0f b6       	in	r0, 0x3f	; 63
    105a:	f8 94       	cli
    105c:	de bf       	out	0x3e, r29	; 62
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	cd bf       	out	0x3d, r28	; 61
    1062:	9e 01       	movw	r18, r28
    1064:	2e 50       	subi	r18, 0x0E	; 14
    1066:	3f 4f       	sbci	r19, 0xFF	; 255
    1068:	f9 01       	movw	r30, r18
    106a:	91 83       	std	Z+1, r25	; 0x01
    106c:	80 83       	st	Z, r24
    106e:	ce 01       	movw	r24, r28
    1070:	8c 50       	subi	r24, 0x0C	; 12
    1072:	9f 4f       	sbci	r25, 0xFF	; 255
    1074:	fc 01       	movw	r30, r24
    1076:	71 83       	std	Z+1, r23	; 0x01
    1078:	60 83       	st	Z, r22

	uint8_t i;

	/* 128 bit key */
	const uint8_t key[] = {
    107a:	80 e1       	ldi	r24, 0x10	; 16
    107c:	e8 e0       	ldi	r30, 0x08	; 8
    107e:	f3 e0       	ldi	r31, 0x03	; 3
    1080:	de 01       	movw	r26, r28
    1082:	12 96       	adiw	r26, 0x02	; 2
    1084:	01 90       	ld	r0, Z+
    1086:	0d 92       	st	X+, r0
    1088:	8a 95       	dec	r24
    108a:	e1 f7       	brne	.-8      	; 0x1084 <main+0x38>
		0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 

	};

//const palin text
	const uint8_t plaintext[] = {
    108c:	80 e1       	ldi	r24, 0x10	; 16
    108e:	e8 e1       	ldi	r30, 0x18	; 24
    1090:	f3 e0       	ldi	r31, 0x03	; 3
    1092:	de 01       	movw	r26, r28
    1094:	52 96       	adiw	r26, 0x12	; 18
    1096:	01 90       	ld	r0, Z+
    1098:	0d 92       	st	X+, r0
    109a:	8a 95       	dec	r24
    109c:	e1 f7       	brne	.-8      	; 0x1096 <main+0x4a>
		0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
		0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
	};

	const uint8_t ciphertext[AES_BLOCK_SIZE];
	const uint8_t const_cipher[AES_BLOCK_SIZE] = {
    109e:	80 e1       	ldi	r24, 0x10	; 16
    10a0:	e8 e2       	ldi	r30, 0x28	; 40
    10a2:	f3 e0       	ldi	r31, 0x03	; 3
    10a4:	de 01       	movw	r26, r28
    10a6:	d2 96       	adiw	r26, 0x32	; 50
    10a8:	01 90       	ld	r0, Z+
    10aa:	0d 92       	st	X+, r0
    10ac:	8a 95       	dec	r24
    10ae:	e1 f7       	brne	.-8      	; 0x10a8 <main+0x5c>
	};
	
	uint8_t roundkeys[AES_ROUND_KEY_SIZE];

	// key schedule
	aes_key_schedule_128(key, roundkeys);
    10b0:	9e 01       	movw	r18, r28
    10b2:	2e 5b       	subi	r18, 0xBE	; 190
    10b4:	3f 4f       	sbci	r19, 0xFF	; 255
    10b6:	ce 01       	movw	r24, r28
    10b8:	02 96       	adiw	r24, 0x02	; 2
    10ba:	b9 01       	movw	r22, r18
    10bc:	0e 94 ef 05 	call	0xbde	; 0xbde <aes_key_schedule_128>

	// encryption
	aes_encrypt_128(roundkeys, plaintext, ciphertext);
    10c0:	ae 01       	movw	r20, r28
    10c2:	4e 5d       	subi	r20, 0xDE	; 222
    10c4:	5f 4f       	sbci	r21, 0xFF	; 255
    10c6:	9e 01       	movw	r18, r28
    10c8:	2e 5e       	subi	r18, 0xEE	; 238
    10ca:	3f 4f       	sbci	r19, 0xFF	; 255
    10cc:	ce 01       	movw	r24, r28
    10ce:	8e 5b       	subi	r24, 0xBE	; 190
    10d0:	9f 4f       	sbci	r25, 0xFF	; 255
    10d2:	b9 01       	movw	r22, r18
    10d4:	0e 94 0e 04 	call	0x81c	; 0x81c <aes_encrypt_128>

	for (i = 0; i < AES_BLOCK_SIZE; i++) {
    10d8:	19 82       	std	Y+1, r1	; 0x01
    10da:	19 c0       	rjmp	.+50     	; 0x110e <main+0xc2>
		if ( ciphertext[i] != const_cipher[i] ) { break; }
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	88 2f       	mov	r24, r24
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	9e 01       	movw	r18, r28
    10e4:	2e 5d       	subi	r18, 0xDE	; 222
    10e6:	3f 4f       	sbci	r19, 0xFF	; 255
    10e8:	82 0f       	add	r24, r18
    10ea:	93 1f       	adc	r25, r19
    10ec:	fc 01       	movw	r30, r24
    10ee:	40 81       	ld	r20, Z
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	88 2f       	mov	r24, r24
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	9e 01       	movw	r18, r28
    10f8:	2e 5c       	subi	r18, 0xCE	; 206
    10fa:	3f 4f       	sbci	r19, 0xFF	; 255
    10fc:	82 0f       	add	r24, r18
    10fe:	93 1f       	adc	r25, r19
    1100:	fc 01       	movw	r30, r24
    1102:	80 81       	ld	r24, Z
    1104:	48 17       	cp	r20, r24
    1106:	39 f4       	brne	.+14     	; 0x1116 <main+0xca>
	aes_key_schedule_128(key, roundkeys);

	// encryption
	aes_encrypt_128(roundkeys, plaintext, ciphertext);

	for (i = 0; i < AES_BLOCK_SIZE; i++) {
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	8f 5f       	subi	r24, 0xFF	; 255
    110c:	89 83       	std	Y+1, r24	; 0x01
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	80 31       	cpi	r24, 0x10	; 16
    1112:	20 f3       	brcs	.-56     	; 0x10dc <main+0x90>
    1114:	01 c0       	rjmp	.+2      	; 0x1118 <main+0xcc>
		if ( ciphertext[i] != const_cipher[i] ) { break; }
    1116:	00 00       	nop
		else {continue;}
	}


	// decryption
	aes_decrypt_128(roundkeys, ciphertext,ciphertext);
    1118:	ae 01       	movw	r20, r28
    111a:	4e 5d       	subi	r20, 0xDE	; 222
    111c:	5f 4f       	sbci	r21, 0xFF	; 255
    111e:	9e 01       	movw	r18, r28
    1120:	2e 5d       	subi	r18, 0xDE	; 222
    1122:	3f 4f       	sbci	r19, 0xFF	; 255
    1124:	ce 01       	movw	r24, r28
    1126:	8e 5b       	subi	r24, 0xBE	; 190
    1128:	9f 4f       	sbci	r25, 0xFF	; 255
    112a:	b9 01       	movw	r22, r18
    112c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <aes_decrypt_128>
	for (i = 0; i < AES_BLOCK_SIZE; i++) {
    1130:	19 82       	std	Y+1, r1	; 0x01
    1132:	19 c0       	rjmp	.+50     	; 0x1166 <main+0x11a>
		if ( ciphertext[i] != plaintext[i] ) { break; }
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	88 2f       	mov	r24, r24
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	9e 01       	movw	r18, r28
    113c:	2e 5d       	subi	r18, 0xDE	; 222
    113e:	3f 4f       	sbci	r19, 0xFF	; 255
    1140:	82 0f       	add	r24, r18
    1142:	93 1f       	adc	r25, r19
    1144:	fc 01       	movw	r30, r24
    1146:	40 81       	ld	r20, Z
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	88 2f       	mov	r24, r24
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	9e 01       	movw	r18, r28
    1150:	2e 5e       	subi	r18, 0xEE	; 238
    1152:	3f 4f       	sbci	r19, 0xFF	; 255
    1154:	82 0f       	add	r24, r18
    1156:	93 1f       	adc	r25, r19
    1158:	fc 01       	movw	r30, r24
    115a:	80 81       	ld	r24, Z
    115c:	48 17       	cp	r20, r24
    115e:	39 f4       	brne	.+14     	; 0x116e <main+0x122>
	}


	// decryption
	aes_decrypt_128(roundkeys, ciphertext,ciphertext);
	for (i = 0; i < AES_BLOCK_SIZE; i++) {
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	8f 5f       	subi	r24, 0xFF	; 255
    1164:	89 83       	std	Y+1, r24	; 0x01
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	80 31       	cpi	r24, 0x10	; 16
    116a:	20 f3       	brcs	.-56     	; 0x1134 <main+0xe8>
    116c:	01 c0       	rjmp	.+2      	; 0x1170 <main+0x124>
		if ( ciphertext[i] != plaintext[i] ) { break; }
    116e:	00 00       	nop
		else {continue;}
	}

	return 0;
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	cb 50       	subi	r28, 0x0B	; 11
    1176:	df 4f       	sbci	r29, 0xFF	; 255
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	cd bf       	out	0x3d, r28	; 61
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	08 95       	ret

00001188 <_exit>:
    1188:	f8 94       	cli

0000118a <__stop_program>:
    118a:	ff cf       	rjmp	.-2      	; 0x118a <__stop_program>

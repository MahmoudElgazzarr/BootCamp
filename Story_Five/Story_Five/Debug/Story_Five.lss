
Story_Five.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000744  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ef  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005cd  00000000  00000000  00000edf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003f4  00000000  00000000  000014ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  000018a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035a  00000000  00000000  0000197c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015a  00000000  00000000  00001cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001e30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <main>
  64:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <delay_ms>:
 */ 
#include "Delay.h"
#include "Types.h"

void delay_ms(uint32 time_in_ms)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	28 97       	sbiw	r28, 0x08	; 8
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	6d 83       	std	Y+5, r22	; 0x05
  82:	7e 83       	std	Y+6, r23	; 0x06
  84:	8f 83       	std	Y+7, r24	; 0x07
  86:	98 87       	std	Y+8, r25	; 0x08
	uint32 i = ((time_in_ms*F_CPU)/1000);
  88:	8d 81       	ldd	r24, Y+5	; 0x05
  8a:	9e 81       	ldd	r25, Y+6	; 0x06
  8c:	af 81       	ldd	r26, Y+7	; 0x07
  8e:	b8 85       	ldd	r27, Y+8	; 0x08
  90:	9c 01       	movw	r18, r24
  92:	ad 01       	movw	r20, r26
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	74 e2       	ldi	r23, 0x24	; 36
  98:	84 ef       	ldi	r24, 0xF4	; 244
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	0e 94 12 03 	call	0x624	; 0x624 <__mulsi3>
  a0:	dc 01       	movw	r26, r24
  a2:	cb 01       	movw	r24, r22
  a4:	28 ee       	ldi	r18, 0xE8	; 232
  a6:	33 e0       	ldi	r19, 0x03	; 3
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	50 e0       	ldi	r21, 0x00	; 0
  ac:	bc 01       	movw	r22, r24
  ae:	cd 01       	movw	r24, r26
  b0:	0e 94 22 03 	call	0x644	; 0x644 <__udivmodsi4>
  b4:	da 01       	movw	r26, r20
  b6:	c9 01       	movw	r24, r18
  b8:	89 83       	std	Y+1, r24	; 0x01
  ba:	9a 83       	std	Y+2, r25	; 0x02
  bc:	ab 83       	std	Y+3, r26	; 0x03
  be:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<i;i++)
  c0:	19 82       	std	Y+1, r1	; 0x01
  c2:	1a 82       	std	Y+2, r1	; 0x02
  c4:	1b 82       	std	Y+3, r1	; 0x03
  c6:	1c 82       	std	Y+4, r1	; 0x04
  c8:	00 00       	nop
	{
		//do nothing
	}
  ca:	00 00       	nop
  cc:	28 96       	adiw	r28, 0x08	; 8
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	f8 94       	cli
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	df 91       	pop	r29
  da:	cf 91       	pop	r28
  dc:	08 95       	ret

000000de <DIO_WritePin>:
#include "DIO_Registers.h"
#include "DIO_Registers_Definitions.h"
#include "BitwiseOperation.h"

void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	00 d0       	rcall	.+0      	; 0xe4 <DIO_WritePin+0x6>
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	89 83       	std	Y+1, r24	; 0x01
  ea:	6a 83       	std	Y+2, r22	; 0x02
	if(PinNum >= 0 && PinNum < 8 )
  ec:	89 81       	ldd	r24, Y+1	; 0x01
  ee:	88 30       	cpi	r24, 0x08	; 8
  f0:	78 f5       	brcc	.+94     	; 0x150 <DIO_WritePin+0x72>
	{
			if(PinValue == 1)
  f2:	8a 81       	ldd	r24, Y+2	; 0x02
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	a1 f4       	brne	.+40     	; 0x120 <DIO_WritePin+0x42>
			{
				Set_Bit( PORTA , PinNum);
  f8:	8b e3       	ldi	r24, 0x3B	; 59
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	2b e3       	ldi	r18, 0x3B	; 59
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	f9 01       	movw	r30, r18
 102:	20 81       	ld	r18, Z
 104:	62 2f       	mov	r22, r18
 106:	29 81       	ldd	r18, Y+1	; 0x01
 108:	42 2f       	mov	r20, r18
 10a:	50 e0       	ldi	r21, 0x00	; 0
 10c:	21 e0       	ldi	r18, 0x01	; 1
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_WritePin+0x38>
 112:	22 0f       	add	r18, r18
 114:	33 1f       	adc	r19, r19
 116:	4a 95       	dec	r20
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_WritePin+0x34>
 11a:	26 2b       	or	r18, r22
 11c:	fc 01       	movw	r30, r24
 11e:	20 83       	st	Z, r18
			}
			if(PinValue == 0)
 120:	8a 81       	ldd	r24, Y+2	; 0x02
 122:	88 23       	and	r24, r24
 124:	a9 f4       	brne	.+42     	; 0x150 <DIO_WritePin+0x72>
			{
				Clear_Bit( PORTA , PinNum);
 126:	8b e3       	ldi	r24, 0x3B	; 59
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	2b e3       	ldi	r18, 0x3B	; 59
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	f9 01       	movw	r30, r18
 130:	20 81       	ld	r18, Z
 132:	62 2f       	mov	r22, r18
 134:	29 81       	ldd	r18, Y+1	; 0x01
 136:	42 2f       	mov	r20, r18
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_WritePin+0x66>
 140:	22 0f       	add	r18, r18
 142:	33 1f       	adc	r19, r19
 144:	4a 95       	dec	r20
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_WritePin+0x62>
 148:	20 95       	com	r18
 14a:	26 23       	and	r18, r22
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18
			}
	}
	if(PinNum > 7 && PinNum < 16)
 150:	89 81       	ldd	r24, Y+1	; 0x01
 152:	88 30       	cpi	r24, 0x08	; 8
 154:	c0 f1       	brcs	.+112    	; 0x1c6 <DIO_WritePin+0xe8>
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	80 31       	cpi	r24, 0x10	; 16
 15a:	a8 f5       	brcc	.+106    	; 0x1c6 <DIO_WritePin+0xe8>
	{
		if(PinValue == 1)
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	b9 f4       	brne	.+46     	; 0x190 <DIO_WritePin+0xb2>
		{
			Set_Bit( PORTB , (PinNum-8));
 162:	88 e3       	ldi	r24, 0x38	; 56
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	28 e3       	ldi	r18, 0x38	; 56
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	f9 01       	movw	r30, r18
 16c:	20 81       	ld	r18, Z
 16e:	62 2f       	mov	r22, r18
 170:	29 81       	ldd	r18, Y+1	; 0x01
 172:	22 2f       	mov	r18, r18
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	a9 01       	movw	r20, r18
 178:	48 50       	subi	r20, 0x08	; 8
 17a:	51 09       	sbc	r21, r1
 17c:	21 e0       	ldi	r18, 0x01	; 1
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	02 c0       	rjmp	.+4      	; 0x186 <DIO_WritePin+0xa8>
 182:	22 0f       	add	r18, r18
 184:	33 1f       	adc	r19, r19
 186:	4a 95       	dec	r20
 188:	e2 f7       	brpl	.-8      	; 0x182 <DIO_WritePin+0xa4>
 18a:	26 2b       	or	r18, r22
 18c:	fc 01       	movw	r30, r24
 18e:	20 83       	st	Z, r18
		}
		if(PinValue == 0)
 190:	8a 81       	ldd	r24, Y+2	; 0x02
 192:	88 23       	and	r24, r24
 194:	c1 f4       	brne	.+48     	; 0x1c6 <DIO_WritePin+0xe8>
		{
			Clear_Bit( PORTB , (PinNum-8));
 196:	88 e3       	ldi	r24, 0x38	; 56
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	28 e3       	ldi	r18, 0x38	; 56
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	f9 01       	movw	r30, r18
 1a0:	20 81       	ld	r18, Z
 1a2:	62 2f       	mov	r22, r18
 1a4:	29 81       	ldd	r18, Y+1	; 0x01
 1a6:	22 2f       	mov	r18, r18
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	a9 01       	movw	r20, r18
 1ac:	48 50       	subi	r20, 0x08	; 8
 1ae:	51 09       	sbc	r21, r1
 1b0:	21 e0       	ldi	r18, 0x01	; 1
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_WritePin+0xdc>
 1b6:	22 0f       	add	r18, r18
 1b8:	33 1f       	adc	r19, r19
 1ba:	4a 95       	dec	r20
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_WritePin+0xd8>
 1be:	20 95       	com	r18
 1c0:	26 23       	and	r18, r22
 1c2:	fc 01       	movw	r30, r24
 1c4:	20 83       	st	Z, r18
		}
	}
	if(PinNum > 15 && PinNum < 24)
 1c6:	89 81       	ldd	r24, Y+1	; 0x01
 1c8:	80 31       	cpi	r24, 0x10	; 16
 1ca:	c0 f1       	brcs	.+112    	; 0x23c <DIO_WritePin+0x15e>
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
 1ce:	88 31       	cpi	r24, 0x18	; 24
 1d0:	a8 f5       	brcc	.+106    	; 0x23c <DIO_WritePin+0x15e>
	{
		if(PinValue == 1)
 1d2:	8a 81       	ldd	r24, Y+2	; 0x02
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	b9 f4       	brne	.+46     	; 0x206 <DIO_WritePin+0x128>
		{
			Set_Bit( PORTC , (PinNum-16));
 1d8:	85 e3       	ldi	r24, 0x35	; 53
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	25 e3       	ldi	r18, 0x35	; 53
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	f9 01       	movw	r30, r18
 1e2:	20 81       	ld	r18, Z
 1e4:	62 2f       	mov	r22, r18
 1e6:	29 81       	ldd	r18, Y+1	; 0x01
 1e8:	22 2f       	mov	r18, r18
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	a9 01       	movw	r20, r18
 1ee:	40 51       	subi	r20, 0x10	; 16
 1f0:	51 09       	sbc	r21, r1
 1f2:	21 e0       	ldi	r18, 0x01	; 1
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_WritePin+0x11e>
 1f8:	22 0f       	add	r18, r18
 1fa:	33 1f       	adc	r19, r19
 1fc:	4a 95       	dec	r20
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_WritePin+0x11a>
 200:	26 2b       	or	r18, r22
 202:	fc 01       	movw	r30, r24
 204:	20 83       	st	Z, r18
		}
		if(PinValue == 0)
 206:	8a 81       	ldd	r24, Y+2	; 0x02
 208:	88 23       	and	r24, r24
 20a:	c1 f4       	brne	.+48     	; 0x23c <DIO_WritePin+0x15e>
		{
			Clear_Bit( PORTC , (PinNum-16));
 20c:	85 e3       	ldi	r24, 0x35	; 53
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	25 e3       	ldi	r18, 0x35	; 53
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	f9 01       	movw	r30, r18
 216:	20 81       	ld	r18, Z
 218:	62 2f       	mov	r22, r18
 21a:	29 81       	ldd	r18, Y+1	; 0x01
 21c:	22 2f       	mov	r18, r18
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	a9 01       	movw	r20, r18
 222:	40 51       	subi	r20, 0x10	; 16
 224:	51 09       	sbc	r21, r1
 226:	21 e0       	ldi	r18, 0x01	; 1
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_WritePin+0x152>
 22c:	22 0f       	add	r18, r18
 22e:	33 1f       	adc	r19, r19
 230:	4a 95       	dec	r20
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_WritePin+0x14e>
 234:	20 95       	com	r18
 236:	26 23       	and	r18, r22
 238:	fc 01       	movw	r30, r24
 23a:	20 83       	st	Z, r18
		}
	}
	
	if(PinNum > 24 && PinNum < 32)
 23c:	89 81       	ldd	r24, Y+1	; 0x01
 23e:	89 31       	cpi	r24, 0x19	; 25
 240:	c0 f1       	brcs	.+112    	; 0x2b2 <DIO_WritePin+0x1d4>
 242:	89 81       	ldd	r24, Y+1	; 0x01
 244:	80 32       	cpi	r24, 0x20	; 32
 246:	a8 f5       	brcc	.+106    	; 0x2b2 <DIO_WritePin+0x1d4>
	{
			if(PinValue == 1)
 248:	8a 81       	ldd	r24, Y+2	; 0x02
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	b9 f4       	brne	.+46     	; 0x27c <DIO_WritePin+0x19e>
			{
				Set_Bit( PORTD , (PinNum-24));
 24e:	82 e3       	ldi	r24, 0x32	; 50
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	22 e3       	ldi	r18, 0x32	; 50
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	f9 01       	movw	r30, r18
 258:	20 81       	ld	r18, Z
 25a:	62 2f       	mov	r22, r18
 25c:	29 81       	ldd	r18, Y+1	; 0x01
 25e:	22 2f       	mov	r18, r18
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	a9 01       	movw	r20, r18
 264:	48 51       	subi	r20, 0x18	; 24
 266:	51 09       	sbc	r21, r1
 268:	21 e0       	ldi	r18, 0x01	; 1
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_WritePin+0x194>
 26e:	22 0f       	add	r18, r18
 270:	33 1f       	adc	r19, r19
 272:	4a 95       	dec	r20
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_WritePin+0x190>
 276:	26 2b       	or	r18, r22
 278:	fc 01       	movw	r30, r24
 27a:	20 83       	st	Z, r18
			}
			if(PinValue == 0)
 27c:	8a 81       	ldd	r24, Y+2	; 0x02
 27e:	88 23       	and	r24, r24
 280:	c1 f4       	brne	.+48     	; 0x2b2 <DIO_WritePin+0x1d4>
			{
				Clear_Bit( PORTD , (PinNum-24));
 282:	82 e3       	ldi	r24, 0x32	; 50
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	22 e3       	ldi	r18, 0x32	; 50
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	f9 01       	movw	r30, r18
 28c:	20 81       	ld	r18, Z
 28e:	62 2f       	mov	r22, r18
 290:	29 81       	ldd	r18, Y+1	; 0x01
 292:	22 2f       	mov	r18, r18
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	a9 01       	movw	r20, r18
 298:	48 51       	subi	r20, 0x18	; 24
 29a:	51 09       	sbc	r21, r1
 29c:	21 e0       	ldi	r18, 0x01	; 1
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <DIO_WritePin+0x1c8>
 2a2:	22 0f       	add	r18, r18
 2a4:	33 1f       	adc	r19, r19
 2a6:	4a 95       	dec	r20
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <DIO_WritePin+0x1c4>
 2aa:	20 95       	com	r18
 2ac:	26 23       	and	r18, r22
 2ae:	fc 01       	movw	r30, r24
 2b0:	20 83       	st	Z, r18
			}
	}
}
 2b2:	00 00       	nop
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <DIO_SetPinDirection>:
/*
pindirection = 1 output
pindirection = 0 input
*/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	00 d0       	rcall	.+0      	; 0x2c4 <DIO_SetPinDirection+0x6>
 2c4:	cd b7       	in	r28, 0x3d	; 61
 2c6:	de b7       	in	r29, 0x3e	; 62
 2c8:	89 83       	std	Y+1, r24	; 0x01
 2ca:	6a 83       	std	Y+2, r22	; 0x02
		if(PinNum >= 0 && PinNum < 8 )
 2cc:	89 81       	ldd	r24, Y+1	; 0x01
 2ce:	88 30       	cpi	r24, 0x08	; 8
 2d0:	78 f5       	brcc	.+94     	; 0x330 <DIO_SetPinDirection+0x72>
		{
			if(PinDirection== 1)
 2d2:	8a 81       	ldd	r24, Y+2	; 0x02
 2d4:	81 30       	cpi	r24, 0x01	; 1
 2d6:	a1 f4       	brne	.+40     	; 0x300 <DIO_SetPinDirection+0x42>
			{
				Set_Bit( DDRA , PinNum);
 2d8:	8a e3       	ldi	r24, 0x3A	; 58
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	2a e3       	ldi	r18, 0x3A	; 58
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	f9 01       	movw	r30, r18
 2e2:	20 81       	ld	r18, Z
 2e4:	62 2f       	mov	r22, r18
 2e6:	29 81       	ldd	r18, Y+1	; 0x01
 2e8:	42 2f       	mov	r20, r18
 2ea:	50 e0       	ldi	r21, 0x00	; 0
 2ec:	21 e0       	ldi	r18, 0x01	; 1
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_SetPinDirection+0x38>
 2f2:	22 0f       	add	r18, r18
 2f4:	33 1f       	adc	r19, r19
 2f6:	4a 95       	dec	r20
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_SetPinDirection+0x34>
 2fa:	26 2b       	or	r18, r22
 2fc:	fc 01       	movw	r30, r24
 2fe:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
 300:	8a 81       	ldd	r24, Y+2	; 0x02
 302:	88 23       	and	r24, r24
 304:	a9 f4       	brne	.+42     	; 0x330 <DIO_SetPinDirection+0x72>
			{
				Clear_Bit( DDRA , PinNum);
 306:	8a e3       	ldi	r24, 0x3A	; 58
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	2a e3       	ldi	r18, 0x3A	; 58
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	f9 01       	movw	r30, r18
 310:	20 81       	ld	r18, Z
 312:	62 2f       	mov	r22, r18
 314:	29 81       	ldd	r18, Y+1	; 0x01
 316:	42 2f       	mov	r20, r18
 318:	50 e0       	ldi	r21, 0x00	; 0
 31a:	21 e0       	ldi	r18, 0x01	; 1
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	02 c0       	rjmp	.+4      	; 0x324 <DIO_SetPinDirection+0x66>
 320:	22 0f       	add	r18, r18
 322:	33 1f       	adc	r19, r19
 324:	4a 95       	dec	r20
 326:	e2 f7       	brpl	.-8      	; 0x320 <DIO_SetPinDirection+0x62>
 328:	20 95       	com	r18
 32a:	26 23       	and	r18, r22
 32c:	fc 01       	movw	r30, r24
 32e:	20 83       	st	Z, r18
			}
		}
		if(PinNum > 7 && PinNum < 16)
 330:	89 81       	ldd	r24, Y+1	; 0x01
 332:	88 30       	cpi	r24, 0x08	; 8
 334:	c0 f1       	brcs	.+112    	; 0x3a6 <DIO_SetPinDirection+0xe8>
 336:	89 81       	ldd	r24, Y+1	; 0x01
 338:	80 31       	cpi	r24, 0x10	; 16
 33a:	a8 f5       	brcc	.+106    	; 0x3a6 <DIO_SetPinDirection+0xe8>
		{
			if(PinDirection== 1)
 33c:	8a 81       	ldd	r24, Y+2	; 0x02
 33e:	81 30       	cpi	r24, 0x01	; 1
 340:	b9 f4       	brne	.+46     	; 0x370 <DIO_SetPinDirection+0xb2>
			{
				Set_Bit( DDRB , (PinNum-8));
 342:	87 e3       	ldi	r24, 0x37	; 55
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	27 e3       	ldi	r18, 0x37	; 55
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	f9 01       	movw	r30, r18
 34c:	20 81       	ld	r18, Z
 34e:	62 2f       	mov	r22, r18
 350:	29 81       	ldd	r18, Y+1	; 0x01
 352:	22 2f       	mov	r18, r18
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	a9 01       	movw	r20, r18
 358:	48 50       	subi	r20, 0x08	; 8
 35a:	51 09       	sbc	r21, r1
 35c:	21 e0       	ldi	r18, 0x01	; 1
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_SetPinDirection+0xa8>
 362:	22 0f       	add	r18, r18
 364:	33 1f       	adc	r19, r19
 366:	4a 95       	dec	r20
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_SetPinDirection+0xa4>
 36a:	26 2b       	or	r18, r22
 36c:	fc 01       	movw	r30, r24
 36e:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
 370:	8a 81       	ldd	r24, Y+2	; 0x02
 372:	88 23       	and	r24, r24
 374:	c1 f4       	brne	.+48     	; 0x3a6 <DIO_SetPinDirection+0xe8>
			{
				Clear_Bit( DDRB , (PinNum-8));
 376:	87 e3       	ldi	r24, 0x37	; 55
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	27 e3       	ldi	r18, 0x37	; 55
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	f9 01       	movw	r30, r18
 380:	20 81       	ld	r18, Z
 382:	62 2f       	mov	r22, r18
 384:	29 81       	ldd	r18, Y+1	; 0x01
 386:	22 2f       	mov	r18, r18
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	a9 01       	movw	r20, r18
 38c:	48 50       	subi	r20, 0x08	; 8
 38e:	51 09       	sbc	r21, r1
 390:	21 e0       	ldi	r18, 0x01	; 1
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_SetPinDirection+0xdc>
 396:	22 0f       	add	r18, r18
 398:	33 1f       	adc	r19, r19
 39a:	4a 95       	dec	r20
 39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_SetPinDirection+0xd8>
 39e:	20 95       	com	r18
 3a0:	26 23       	and	r18, r22
 3a2:	fc 01       	movw	r30, r24
 3a4:	20 83       	st	Z, r18
			}
		}
		if(PinNum > 15 && PinNum < 24)
 3a6:	89 81       	ldd	r24, Y+1	; 0x01
 3a8:	80 31       	cpi	r24, 0x10	; 16
 3aa:	c0 f1       	brcs	.+112    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3ac:	89 81       	ldd	r24, Y+1	; 0x01
 3ae:	88 31       	cpi	r24, 0x18	; 24
 3b0:	a8 f5       	brcc	.+106    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		{
			if(PinDirection== 1)
 3b2:	8a 81       	ldd	r24, Y+2	; 0x02
 3b4:	81 30       	cpi	r24, 0x01	; 1
 3b6:	b9 f4       	brne	.+46     	; 0x3e6 <DIO_SetPinDirection+0x128>
			{
				Set_Bit( DDRC , (PinNum-16));
 3b8:	84 e3       	ldi	r24, 0x34	; 52
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	24 e3       	ldi	r18, 0x34	; 52
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	f9 01       	movw	r30, r18
 3c2:	20 81       	ld	r18, Z
 3c4:	62 2f       	mov	r22, r18
 3c6:	29 81       	ldd	r18, Y+1	; 0x01
 3c8:	22 2f       	mov	r18, r18
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	a9 01       	movw	r20, r18
 3ce:	40 51       	subi	r20, 0x10	; 16
 3d0:	51 09       	sbc	r21, r1
 3d2:	21 e0       	ldi	r18, 0x01	; 1
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_SetPinDirection+0x11e>
 3d8:	22 0f       	add	r18, r18
 3da:	33 1f       	adc	r19, r19
 3dc:	4a 95       	dec	r20
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_SetPinDirection+0x11a>
 3e0:	26 2b       	or	r18, r22
 3e2:	fc 01       	movw	r30, r24
 3e4:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
 3e6:	8a 81       	ldd	r24, Y+2	; 0x02
 3e8:	88 23       	and	r24, r24
 3ea:	c1 f4       	brne	.+48     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
			{
				Clear_Bit( DDRC , (PinNum-16));
 3ec:	84 e3       	ldi	r24, 0x34	; 52
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	24 e3       	ldi	r18, 0x34	; 52
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	f9 01       	movw	r30, r18
 3f6:	20 81       	ld	r18, Z
 3f8:	62 2f       	mov	r22, r18
 3fa:	29 81       	ldd	r18, Y+1	; 0x01
 3fc:	22 2f       	mov	r18, r18
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	a9 01       	movw	r20, r18
 402:	40 51       	subi	r20, 0x10	; 16
 404:	51 09       	sbc	r21, r1
 406:	21 e0       	ldi	r18, 0x01	; 1
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	02 c0       	rjmp	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40c:	22 0f       	add	r18, r18
 40e:	33 1f       	adc	r19, r19
 410:	4a 95       	dec	r20
 412:	e2 f7       	brpl	.-8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 414:	20 95       	com	r18
 416:	26 23       	and	r18, r22
 418:	fc 01       	movw	r30, r24
 41a:	20 83       	st	Z, r18
			}
		}
		
		if(PinNum > 24 && PinNum < 32)
 41c:	89 81       	ldd	r24, Y+1	; 0x01
 41e:	89 31       	cpi	r24, 0x19	; 25
 420:	c0 f1       	brcs	.+112    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 422:	89 81       	ldd	r24, Y+1	; 0x01
 424:	80 32       	cpi	r24, 0x20	; 32
 426:	a8 f5       	brcc	.+106    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
		{
			if(PinDirection== 1)
 428:	8a 81       	ldd	r24, Y+2	; 0x02
 42a:	81 30       	cpi	r24, 0x01	; 1
 42c:	b9 f4       	brne	.+46     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
			{
				Set_Bit( DDRD , (PinNum-24));
 42e:	81 e3       	ldi	r24, 0x31	; 49
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	21 e3       	ldi	r18, 0x31	; 49
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	f9 01       	movw	r30, r18
 438:	20 81       	ld	r18, Z
 43a:	62 2f       	mov	r22, r18
 43c:	29 81       	ldd	r18, Y+1	; 0x01
 43e:	22 2f       	mov	r18, r18
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	a9 01       	movw	r20, r18
 444:	48 51       	subi	r20, 0x18	; 24
 446:	51 09       	sbc	r21, r1
 448:	21 e0       	ldi	r18, 0x01	; 1
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	02 c0       	rjmp	.+4      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 44e:	22 0f       	add	r18, r18
 450:	33 1f       	adc	r19, r19
 452:	4a 95       	dec	r20
 454:	e2 f7       	brpl	.-8      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 456:	26 2b       	or	r18, r22
 458:	fc 01       	movw	r30, r24
 45a:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
 45c:	8a 81       	ldd	r24, Y+2	; 0x02
 45e:	88 23       	and	r24, r24
 460:	c1 f4       	brne	.+48     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
			{
				Clear_Bit( DDRD , (PinNum-24));
 462:	81 e3       	ldi	r24, 0x31	; 49
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	21 e3       	ldi	r18, 0x31	; 49
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	f9 01       	movw	r30, r18
 46c:	20 81       	ld	r18, Z
 46e:	62 2f       	mov	r22, r18
 470:	29 81       	ldd	r18, Y+1	; 0x01
 472:	22 2f       	mov	r18, r18
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	a9 01       	movw	r20, r18
 478:	48 51       	subi	r20, 0x18	; 24
 47a:	51 09       	sbc	r21, r1
 47c:	21 e0       	ldi	r18, 0x01	; 1
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	02 c0       	rjmp	.+4      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 482:	22 0f       	add	r18, r18
 484:	33 1f       	adc	r19, r19
 486:	4a 95       	dec	r20
 488:	e2 f7       	brpl	.-8      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 48a:	20 95       	com	r18
 48c:	26 23       	and	r18, r22
 48e:	fc 01       	movw	r30, r24
 490:	20 83       	st	Z, r18
			}
		}
}
 492:	00 00       	nop
 494:	0f 90       	pop	r0
 496:	0f 90       	pop	r0
 498:	df 91       	pop	r29
 49a:	cf 91       	pop	r28
 49c:	08 95       	ret

0000049e <DIO_ReadPin>:
uint8 DIO_ReadPin(uint8 PinNum)
{
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	00 d0       	rcall	.+0      	; 0x4a4 <DIO_ReadPin+0x6>
 4a4:	cd b7       	in	r28, 0x3d	; 61
 4a6:	de b7       	in	r29, 0x3e	; 62
 4a8:	8a 83       	std	Y+2, r24	; 0x02
		uint8 return_value=0;
 4aa:	19 82       	std	Y+1, r1	; 0x01
		if(PinNum >= 0 && PinNum < 8 )
 4ac:	8a 81       	ldd	r24, Y+2	; 0x02
 4ae:	88 30       	cpi	r24, 0x08	; 8
 4b0:	d8 f4       	brcc	.+54     	; 0x4e8 <DIO_ReadPin+0x4a>
		{
			return_value = Get_Bit(PINA , PinNum);
 4b2:	89 e3       	ldi	r24, 0x39	; 57
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	fc 01       	movw	r30, r24
 4b8:	80 81       	ld	r24, Z
 4ba:	28 2f       	mov	r18, r24
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	8a 81       	ldd	r24, Y+2	; 0x02
 4c0:	48 2f       	mov	r20, r24
 4c2:	50 e0       	ldi	r21, 0x00	; 0
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_ReadPin+0x30>
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	4a 95       	dec	r20
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <DIO_ReadPin+0x2c>
 4d2:	82 23       	and	r24, r18
 4d4:	93 23       	and	r25, r19
 4d6:	2a 81       	ldd	r18, Y+2	; 0x02
 4d8:	22 2f       	mov	r18, r18
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <DIO_ReadPin+0x44>
 4de:	95 95       	asr	r25
 4e0:	87 95       	ror	r24
 4e2:	2a 95       	dec	r18
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <DIO_ReadPin+0x40>
 4e6:	89 83       	std	Y+1, r24	; 0x01
		}
		if(PinNum > 7 && PinNum < 16)
 4e8:	8a 81       	ldd	r24, Y+2	; 0x02
 4ea:	88 30       	cpi	r24, 0x08	; 8
 4ec:	18 f1       	brcs	.+70     	; 0x534 <DIO_ReadPin+0x96>
 4ee:	8a 81       	ldd	r24, Y+2	; 0x02
 4f0:	80 31       	cpi	r24, 0x10	; 16
 4f2:	00 f5       	brcc	.+64     	; 0x534 <DIO_ReadPin+0x96>
		{
			return_value = Get_Bit(PINB , (PinNum-8));
 4f4:	86 e3       	ldi	r24, 0x36	; 54
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	fc 01       	movw	r30, r24
 4fa:	80 81       	ld	r24, Z
 4fc:	28 2f       	mov	r18, r24
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	8a 81       	ldd	r24, Y+2	; 0x02
 502:	88 2f       	mov	r24, r24
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	ac 01       	movw	r20, r24
 508:	48 50       	subi	r20, 0x08	; 8
 50a:	51 09       	sbc	r21, r1
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	02 c0       	rjmp	.+4      	; 0x516 <DIO_ReadPin+0x78>
 512:	88 0f       	add	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	4a 95       	dec	r20
 518:	e2 f7       	brpl	.-8      	; 0x512 <DIO_ReadPin+0x74>
 51a:	82 23       	and	r24, r18
 51c:	93 23       	and	r25, r19
 51e:	2a 81       	ldd	r18, Y+2	; 0x02
 520:	22 2f       	mov	r18, r18
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	28 50       	subi	r18, 0x08	; 8
 526:	31 09       	sbc	r19, r1
 528:	02 c0       	rjmp	.+4      	; 0x52e <DIO_ReadPin+0x90>
 52a:	95 95       	asr	r25
 52c:	87 95       	ror	r24
 52e:	2a 95       	dec	r18
 530:	e2 f7       	brpl	.-8      	; 0x52a <DIO_ReadPin+0x8c>
 532:	89 83       	std	Y+1, r24	; 0x01
		}
		if(PinNum > 15 && PinNum < 24)
 534:	8a 81       	ldd	r24, Y+2	; 0x02
 536:	80 31       	cpi	r24, 0x10	; 16
 538:	18 f1       	brcs	.+70     	; 0x580 <DIO_ReadPin+0xe2>
 53a:	8a 81       	ldd	r24, Y+2	; 0x02
 53c:	88 31       	cpi	r24, 0x18	; 24
 53e:	00 f5       	brcc	.+64     	; 0x580 <DIO_ReadPin+0xe2>
		{
			return_value = Get_Bit(PINC , (PinNum-16));
 540:	83 e3       	ldi	r24, 0x33	; 51
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	fc 01       	movw	r30, r24
 546:	80 81       	ld	r24, Z
 548:	28 2f       	mov	r18, r24
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	8a 81       	ldd	r24, Y+2	; 0x02
 54e:	88 2f       	mov	r24, r24
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	ac 01       	movw	r20, r24
 554:	40 51       	subi	r20, 0x10	; 16
 556:	51 09       	sbc	r21, r1
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	02 c0       	rjmp	.+4      	; 0x562 <DIO_ReadPin+0xc4>
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	4a 95       	dec	r20
 564:	e2 f7       	brpl	.-8      	; 0x55e <DIO_ReadPin+0xc0>
 566:	82 23       	and	r24, r18
 568:	93 23       	and	r25, r19
 56a:	2a 81       	ldd	r18, Y+2	; 0x02
 56c:	22 2f       	mov	r18, r18
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	20 51       	subi	r18, 0x10	; 16
 572:	31 09       	sbc	r19, r1
 574:	02 c0       	rjmp	.+4      	; 0x57a <DIO_ReadPin+0xdc>
 576:	95 95       	asr	r25
 578:	87 95       	ror	r24
 57a:	2a 95       	dec	r18
 57c:	e2 f7       	brpl	.-8      	; 0x576 <DIO_ReadPin+0xd8>
 57e:	89 83       	std	Y+1, r24	; 0x01
		}
		
		if(PinNum > 24 && PinNum < 32)
 580:	8a 81       	ldd	r24, Y+2	; 0x02
 582:	89 31       	cpi	r24, 0x19	; 25
 584:	18 f1       	brcs	.+70     	; 0x5cc <DIO_ReadPin+0x12e>
 586:	8a 81       	ldd	r24, Y+2	; 0x02
 588:	80 32       	cpi	r24, 0x20	; 32
 58a:	00 f5       	brcc	.+64     	; 0x5cc <DIO_ReadPin+0x12e>
		{
			return_value = Get_Bit(PIND , (PinNum-24));
 58c:	80 e3       	ldi	r24, 0x30	; 48
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	fc 01       	movw	r30, r24
 592:	80 81       	ld	r24, Z
 594:	28 2f       	mov	r18, r24
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	8a 81       	ldd	r24, Y+2	; 0x02
 59a:	88 2f       	mov	r24, r24
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	ac 01       	movw	r20, r24
 5a0:	48 51       	subi	r20, 0x18	; 24
 5a2:	51 09       	sbc	r21, r1
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <DIO_ReadPin+0x110>
 5aa:	88 0f       	add	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	4a 95       	dec	r20
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <DIO_ReadPin+0x10c>
 5b2:	82 23       	and	r24, r18
 5b4:	93 23       	and	r25, r19
 5b6:	2a 81       	ldd	r18, Y+2	; 0x02
 5b8:	22 2f       	mov	r18, r18
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	28 51       	subi	r18, 0x18	; 24
 5be:	31 09       	sbc	r19, r1
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <DIO_ReadPin+0x128>
 5c2:	95 95       	asr	r25
 5c4:	87 95       	ror	r24
 5c6:	2a 95       	dec	r18
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <DIO_ReadPin+0x124>
 5ca:	89 83       	std	Y+1, r24	; 0x01
		}
		return return_value;
 5cc:	89 81       	ldd	r24, Y+1	; 0x01
 5ce:	0f 90       	pop	r0
 5d0:	0f 90       	pop	r0
 5d2:	df 91       	pop	r29
 5d4:	cf 91       	pop	r28
 5d6:	08 95       	ret

000005d8 <main>:
#include "DIO_Registers_Definitions.h"
#include "DIO_Registers.h"
#include "Delay.h"

int main(void)
{
 5d8:	cf 93       	push	r28
 5da:	df 93       	push	r29
 5dc:	cd b7       	in	r28, 0x3d	; 61
 5de:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	//inputs
	DIO_SetPinDirection(PIN10,INPUT);
 5e0:	60 e0       	ldi	r22, 0x00	; 0
 5e2:	8a e0       	ldi	r24, 0x0A	; 10
 5e4:	0e 94 5f 01 	call	0x2be	; 0x2be <DIO_SetPinDirection>
	//DIO_SetPinDirection(PIN1,INPUT);
	//outputs
	DIO_SetPinDirection(PIN13,OUTPUT);
 5e8:	61 e0       	ldi	r22, 0x01	; 1
 5ea:	8d e0       	ldi	r24, 0x0D	; 13
 5ec:	0e 94 5f 01 	call	0x2be	; 0x2be <DIO_SetPinDirection>
	
    while (1) 
    {
	
		if((DIO_ReadPin(PIN10)) == 1)
 5f0:	8a e0       	ldi	r24, 0x0A	; 10
 5f2:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_ReadPin>
 5f6:	81 30       	cpi	r24, 0x01	; 1
 5f8:	81 f4       	brne	.+32     	; 0x61a <main+0x42>
		{
			while(DIO_ReadPin(PIN10)==1)
 5fa:	0a c0       	rjmp	.+20     	; 0x610 <main+0x38>
			{
					DIO_WritePin(PIN13,HIGH);		
 5fc:	61 e0       	ldi	r22, 0x01	; 1
 5fe:	8d e0       	ldi	r24, 0x0D	; 13
 600:	0e 94 6f 00 	call	0xde	; 0xde <DIO_WritePin>
					delay_ms(1000);
 604:	68 ee       	ldi	r22, 0xE8	; 232
 606:	73 e0       	ldi	r23, 0x03	; 3
 608:	80 e0       	ldi	r24, 0x00	; 0
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	0e 94 36 00 	call	0x6c	; 0x6c <delay_ms>
    while (1) 
    {
	
		if((DIO_ReadPin(PIN10)) == 1)
		{
			while(DIO_ReadPin(PIN10)==1)
 610:	8a e0       	ldi	r24, 0x0A	; 10
 612:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_ReadPin>
 616:	81 30       	cpi	r24, 0x01	; 1
 618:	89 f3       	breq	.-30     	; 0x5fc <main+0x24>
			{
					DIO_WritePin(PIN13,HIGH);		
					delay_ms(1000);
			}
		}
		DIO_WritePin(PIN13,LOW);
 61a:	60 e0       	ldi	r22, 0x00	; 0
 61c:	8d e0       	ldi	r24, 0x0D	; 13
 61e:	0e 94 6f 00 	call	0xde	; 0xde <DIO_WritePin>
    }
 622:	e6 cf       	rjmp	.-52     	; 0x5f0 <main+0x18>

00000624 <__mulsi3>:
 624:	db 01       	movw	r26, r22
 626:	8f 93       	push	r24
 628:	9f 93       	push	r25
 62a:	0e 94 44 03 	call	0x688	; 0x688 <__muluhisi3>
 62e:	bf 91       	pop	r27
 630:	af 91       	pop	r26
 632:	a2 9f       	mul	r26, r18
 634:	80 0d       	add	r24, r0
 636:	91 1d       	adc	r25, r1
 638:	a3 9f       	mul	r26, r19
 63a:	90 0d       	add	r25, r0
 63c:	b2 9f       	mul	r27, r18
 63e:	90 0d       	add	r25, r0
 640:	11 24       	eor	r1, r1
 642:	08 95       	ret

00000644 <__udivmodsi4>:
 644:	a1 e2       	ldi	r26, 0x21	; 33
 646:	1a 2e       	mov	r1, r26
 648:	aa 1b       	sub	r26, r26
 64a:	bb 1b       	sub	r27, r27
 64c:	fd 01       	movw	r30, r26
 64e:	0d c0       	rjmp	.+26     	; 0x66a <__udivmodsi4_ep>

00000650 <__udivmodsi4_loop>:
 650:	aa 1f       	adc	r26, r26
 652:	bb 1f       	adc	r27, r27
 654:	ee 1f       	adc	r30, r30
 656:	ff 1f       	adc	r31, r31
 658:	a2 17       	cp	r26, r18
 65a:	b3 07       	cpc	r27, r19
 65c:	e4 07       	cpc	r30, r20
 65e:	f5 07       	cpc	r31, r21
 660:	20 f0       	brcs	.+8      	; 0x66a <__udivmodsi4_ep>
 662:	a2 1b       	sub	r26, r18
 664:	b3 0b       	sbc	r27, r19
 666:	e4 0b       	sbc	r30, r20
 668:	f5 0b       	sbc	r31, r21

0000066a <__udivmodsi4_ep>:
 66a:	66 1f       	adc	r22, r22
 66c:	77 1f       	adc	r23, r23
 66e:	88 1f       	adc	r24, r24
 670:	99 1f       	adc	r25, r25
 672:	1a 94       	dec	r1
 674:	69 f7       	brne	.-38     	; 0x650 <__udivmodsi4_loop>
 676:	60 95       	com	r22
 678:	70 95       	com	r23
 67a:	80 95       	com	r24
 67c:	90 95       	com	r25
 67e:	9b 01       	movw	r18, r22
 680:	ac 01       	movw	r20, r24
 682:	bd 01       	movw	r22, r26
 684:	cf 01       	movw	r24, r30
 686:	08 95       	ret

00000688 <__muluhisi3>:
 688:	0e 94 4f 03 	call	0x69e	; 0x69e <__umulhisi3>
 68c:	a5 9f       	mul	r26, r21
 68e:	90 0d       	add	r25, r0
 690:	b4 9f       	mul	r27, r20
 692:	90 0d       	add	r25, r0
 694:	a4 9f       	mul	r26, r20
 696:	80 0d       	add	r24, r0
 698:	91 1d       	adc	r25, r1
 69a:	11 24       	eor	r1, r1
 69c:	08 95       	ret

0000069e <__umulhisi3>:
 69e:	a2 9f       	mul	r26, r18
 6a0:	b0 01       	movw	r22, r0
 6a2:	b3 9f       	mul	r27, r19
 6a4:	c0 01       	movw	r24, r0
 6a6:	a3 9f       	mul	r26, r19
 6a8:	70 0d       	add	r23, r0
 6aa:	81 1d       	adc	r24, r1
 6ac:	11 24       	eor	r1, r1
 6ae:	91 1d       	adc	r25, r1
 6b0:	b2 9f       	mul	r27, r18
 6b2:	70 0d       	add	r23, r0
 6b4:	81 1d       	adc	r24, r1
 6b6:	11 24       	eor	r1, r1
 6b8:	91 1d       	adc	r25, r1
 6ba:	08 95       	ret

000006bc <_exit>:
 6bc:	f8 94       	cli

000006be <__stop_program>:
 6be:	ff cf       	rjmp	.-2      	; 0x6be <__stop_program>


Story_Eight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000664  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000070e  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e5  00000000  00000000  00000e26  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d8  00000000  00000000  0000140b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000fc  00000000  00000000  000018e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000365  00000000  00000000  000019e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000195  00000000  00000000  00001d45  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001eda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 ab 02 	call	0x556	; 0x556 <main>
  64:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <timer_init>:
#include "Types.h"
#include "delay_Timer.h"


void timer_init(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
		/*Enabling CTC ( Capture Compare ) Mode*/
		TCCR0 &= ~(1<<WGM00);
  74:	83 e5       	ldi	r24, 0x53	; 83
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	23 e5       	ldi	r18, 0x53	; 83
  7a:	30 e0       	ldi	r19, 0x00	; 0
  7c:	f9 01       	movw	r30, r18
  7e:	20 81       	ld	r18, Z
  80:	2f 7b       	andi	r18, 0xBF	; 191
  82:	fc 01       	movw	r30, r24
  84:	20 83       	st	Z, r18
		TCCR0 |= (1<<WGM01);
  86:	83 e5       	ldi	r24, 0x53	; 83
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	23 e5       	ldi	r18, 0x53	; 83
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	f9 01       	movw	r30, r18
  90:	20 81       	ld	r18, Z
  92:	28 60       	ori	r18, 0x08	; 8
  94:	fc 01       	movw	r30, r24
  96:	20 83       	st	Z, r18
		/*Set Bit on Capture Compare*/
		TCCR0 |= (1<<COM00);
  98:	83 e5       	ldi	r24, 0x53	; 83
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	23 e5       	ldi	r18, 0x53	; 83
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	f9 01       	movw	r30, r18
  a2:	20 81       	ld	r18, Z
  a4:	20 61       	ori	r18, 0x10	; 16
  a6:	fc 01       	movw	r30, r24
  a8:	20 83       	st	Z, r18
		TCCR0 |= (1<<COM01);
  aa:	83 e5       	ldi	r24, 0x53	; 83
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	23 e5       	ldi	r18, 0x53	; 83
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	f9 01       	movw	r30, r18
  b4:	20 81       	ld	r18, Z
  b6:	20 62       	ori	r18, 0x20	; 32
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18
		/*Enabling Prescaler 64 */
		TCCR0 |= (1<<CS00);
  bc:	83 e5       	ldi	r24, 0x53	; 83
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	23 e5       	ldi	r18, 0x53	; 83
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	f9 01       	movw	r30, r18
  c6:	20 81       	ld	r18, Z
  c8:	21 60       	ori	r18, 0x01	; 1
  ca:	fc 01       	movw	r30, r24
  cc:	20 83       	st	Z, r18
		TCCR0 |= (1<<CS01);
  ce:	83 e5       	ldi	r24, 0x53	; 83
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	23 e5       	ldi	r18, 0x53	; 83
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	f9 01       	movw	r30, r18
  d8:	20 81       	ld	r18, Z
  da:	22 60       	ori	r18, 0x02	; 2
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
		TCCR0 &=~ (1<<CS02);
  e0:	83 e5       	ldi	r24, 0x53	; 83
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	23 e5       	ldi	r18, 0x53	; 83
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	f9 01       	movw	r30, r18
  ea:	20 81       	ld	r18, Z
  ec:	2b 7f       	andi	r18, 0xFB	; 251
  ee:	fc 01       	movw	r30, r24
  f0:	20 83       	st	Z, r18
		/*Setting Output Compare Register to 64*/
		OCR0 = 249;
  f2:	8c e5       	ldi	r24, 0x5C	; 92
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	29 ef       	ldi	r18, 0xF9	; 249
  f8:	fc 01       	movw	r30, r24
  fa:	20 83       	st	Z, r18
}
  fc:	00 00       	nop
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <timer_delay>:
void timer_delay(uint32 n)
{
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
 10c:	28 97       	sbiw	r28, 0x08	; 8
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	f8 94       	cli
 112:	de bf       	out	0x3e, r29	; 62
 114:	0f be       	out	0x3f, r0	; 63
 116:	cd bf       	out	0x3d, r28	; 61
 118:	6d 83       	std	Y+5, r22	; 0x05
 11a:	7e 83       	std	Y+6, r23	; 0x06
 11c:	8f 83       	std	Y+7, r24	; 0x07
 11e:	98 87       	std	Y+8, r25	; 0x08
	uint32 i;
	
	for(i=0;i<n;i++)
 120:	19 82       	std	Y+1, r1	; 0x01
 122:	1a 82       	std	Y+2, r1	; 0x02
 124:	1b 82       	std	Y+3, r1	; 0x03
 126:	1c 82       	std	Y+4, r1	; 0x04
 128:	1f c0       	rjmp	.+62     	; 0x168 <timer_delay+0x64>
	{
		/*Wait 1 m sec*/
		while(( (TIFR) & (1<<OCF0)) == 0);
 12a:	00 00       	nop
 12c:	88 e5       	ldi	r24, 0x58	; 88
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	fc 01       	movw	r30, r24
 132:	80 81       	ld	r24, Z
 134:	88 2f       	mov	r24, r24
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	82 70       	andi	r24, 0x02	; 2
 13a:	99 27       	eor	r25, r25
 13c:	89 2b       	or	r24, r25
 13e:	b1 f3       	breq	.-20     	; 0x12c <timer_delay+0x28>
		/*Clear OCF0 Flag*/
		TIFR |= (1<<OCF0);
 140:	88 e5       	ldi	r24, 0x58	; 88
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	28 e5       	ldi	r18, 0x58	; 88
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	f9 01       	movw	r30, r18
 14a:	20 81       	ld	r18, Z
 14c:	22 60       	ori	r18, 0x02	; 2
 14e:	fc 01       	movw	r30, r24
 150:	20 83       	st	Z, r18
}
void timer_delay(uint32 n)
{
	uint32 i;
	
	for(i=0;i<n;i++)
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	9a 81       	ldd	r25, Y+2	; 0x02
 156:	ab 81       	ldd	r26, Y+3	; 0x03
 158:	bc 81       	ldd	r27, Y+4	; 0x04
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	a1 1d       	adc	r26, r1
 15e:	b1 1d       	adc	r27, r1
 160:	89 83       	std	Y+1, r24	; 0x01
 162:	9a 83       	std	Y+2, r25	; 0x02
 164:	ab 83       	std	Y+3, r26	; 0x03
 166:	bc 83       	std	Y+4, r27	; 0x04
 168:	29 81       	ldd	r18, Y+1	; 0x01
 16a:	3a 81       	ldd	r19, Y+2	; 0x02
 16c:	4b 81       	ldd	r20, Y+3	; 0x03
 16e:	5c 81       	ldd	r21, Y+4	; 0x04
 170:	8d 81       	ldd	r24, Y+5	; 0x05
 172:	9e 81       	ldd	r25, Y+6	; 0x06
 174:	af 81       	ldd	r26, Y+7	; 0x07
 176:	b8 85       	ldd	r27, Y+8	; 0x08
 178:	28 17       	cp	r18, r24
 17a:	39 07       	cpc	r19, r25
 17c:	4a 07       	cpc	r20, r26
 17e:	5b 07       	cpc	r21, r27
 180:	a0 f2       	brcs	.-88     	; 0x12a <timer_delay+0x26>
		while(( (TIFR) & (1<<OCF0)) == 0);
		/*Clear OCF0 Flag*/
		TIFR |= (1<<OCF0);
	}
	
 182:	00 00       	nop
 184:	28 96       	adiw	r28, 0x08	; 8
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	f8 94       	cli
 18a:	de bf       	out	0x3e, r29	; 62
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	cd bf       	out	0x3d, r28	; 61
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <DIO_WritePin>:
#include "DIO_Registers.h"
#include "DIO_Registers_Definitions.h"
#include "BitwiseOperation.h"

void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	00 d0       	rcall	.+0      	; 0x19c <DIO_WritePin+0x6>
 19c:	cd b7       	in	r28, 0x3d	; 61
 19e:	de b7       	in	r29, 0x3e	; 62
 1a0:	89 83       	std	Y+1, r24	; 0x01
 1a2:	6a 83       	std	Y+2, r22	; 0x02
	if(PinNum >= 0 && PinNum < 8 )
 1a4:	89 81       	ldd	r24, Y+1	; 0x01
 1a6:	88 30       	cpi	r24, 0x08	; 8
 1a8:	78 f5       	brcc	.+94     	; 0x208 <DIO_WritePin+0x72>
	{
			if(PinValue == 1)
 1aa:	8a 81       	ldd	r24, Y+2	; 0x02
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	a1 f4       	brne	.+40     	; 0x1d8 <DIO_WritePin+0x42>
			{
				Set_Bit( PORTA , PinNum);
 1b0:	8b e3       	ldi	r24, 0x3B	; 59
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	2b e3       	ldi	r18, 0x3B	; 59
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	f9 01       	movw	r30, r18
 1ba:	20 81       	ld	r18, Z
 1bc:	62 2f       	mov	r22, r18
 1be:	29 81       	ldd	r18, Y+1	; 0x01
 1c0:	42 2f       	mov	r20, r18
 1c2:	50 e0       	ldi	r21, 0x00	; 0
 1c4:	21 e0       	ldi	r18, 0x01	; 1
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_WritePin+0x38>
 1ca:	22 0f       	add	r18, r18
 1cc:	33 1f       	adc	r19, r19
 1ce:	4a 95       	dec	r20
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_WritePin+0x34>
 1d2:	26 2b       	or	r18, r22
 1d4:	fc 01       	movw	r30, r24
 1d6:	20 83       	st	Z, r18
			}
			if(PinValue == 0)
 1d8:	8a 81       	ldd	r24, Y+2	; 0x02
 1da:	88 23       	and	r24, r24
 1dc:	a9 f4       	brne	.+42     	; 0x208 <DIO_WritePin+0x72>
			{
				Clear_Bit( PORTA , PinNum);
 1de:	8b e3       	ldi	r24, 0x3B	; 59
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	2b e3       	ldi	r18, 0x3B	; 59
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	f9 01       	movw	r30, r18
 1e8:	20 81       	ld	r18, Z
 1ea:	62 2f       	mov	r22, r18
 1ec:	29 81       	ldd	r18, Y+1	; 0x01
 1ee:	42 2f       	mov	r20, r18
 1f0:	50 e0       	ldi	r21, 0x00	; 0
 1f2:	21 e0       	ldi	r18, 0x01	; 1
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_WritePin+0x66>
 1f8:	22 0f       	add	r18, r18
 1fa:	33 1f       	adc	r19, r19
 1fc:	4a 95       	dec	r20
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_WritePin+0x62>
 200:	20 95       	com	r18
 202:	26 23       	and	r18, r22
 204:	fc 01       	movw	r30, r24
 206:	20 83       	st	Z, r18
			}
	}
	if(PinNum > 7 && PinNum < 16)
 208:	89 81       	ldd	r24, Y+1	; 0x01
 20a:	88 30       	cpi	r24, 0x08	; 8
 20c:	c0 f1       	brcs	.+112    	; 0x27e <DIO_WritePin+0xe8>
 20e:	89 81       	ldd	r24, Y+1	; 0x01
 210:	80 31       	cpi	r24, 0x10	; 16
 212:	a8 f5       	brcc	.+106    	; 0x27e <DIO_WritePin+0xe8>
	{
		if(PinValue == 1)
 214:	8a 81       	ldd	r24, Y+2	; 0x02
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	b9 f4       	brne	.+46     	; 0x248 <DIO_WritePin+0xb2>
		{
			Set_Bit( PORTB , (PinNum-8));
 21a:	88 e3       	ldi	r24, 0x38	; 56
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	28 e3       	ldi	r18, 0x38	; 56
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	f9 01       	movw	r30, r18
 224:	20 81       	ld	r18, Z
 226:	62 2f       	mov	r22, r18
 228:	29 81       	ldd	r18, Y+1	; 0x01
 22a:	22 2f       	mov	r18, r18
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	a9 01       	movw	r20, r18
 230:	48 50       	subi	r20, 0x08	; 8
 232:	51 09       	sbc	r21, r1
 234:	21 e0       	ldi	r18, 0x01	; 1
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_WritePin+0xa8>
 23a:	22 0f       	add	r18, r18
 23c:	33 1f       	adc	r19, r19
 23e:	4a 95       	dec	r20
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_WritePin+0xa4>
 242:	26 2b       	or	r18, r22
 244:	fc 01       	movw	r30, r24
 246:	20 83       	st	Z, r18
		}
		if(PinValue == 0)
 248:	8a 81       	ldd	r24, Y+2	; 0x02
 24a:	88 23       	and	r24, r24
 24c:	c1 f4       	brne	.+48     	; 0x27e <DIO_WritePin+0xe8>
		{
			Clear_Bit( PORTB , (PinNum-8));
 24e:	88 e3       	ldi	r24, 0x38	; 56
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	28 e3       	ldi	r18, 0x38	; 56
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	f9 01       	movw	r30, r18
 258:	20 81       	ld	r18, Z
 25a:	62 2f       	mov	r22, r18
 25c:	29 81       	ldd	r18, Y+1	; 0x01
 25e:	22 2f       	mov	r18, r18
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	a9 01       	movw	r20, r18
 264:	48 50       	subi	r20, 0x08	; 8
 266:	51 09       	sbc	r21, r1
 268:	21 e0       	ldi	r18, 0x01	; 1
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_WritePin+0xdc>
 26e:	22 0f       	add	r18, r18
 270:	33 1f       	adc	r19, r19
 272:	4a 95       	dec	r20
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_WritePin+0xd8>
 276:	20 95       	com	r18
 278:	26 23       	and	r18, r22
 27a:	fc 01       	movw	r30, r24
 27c:	20 83       	st	Z, r18
		}
	}
	if(PinNum > 15 && PinNum < 24)
 27e:	89 81       	ldd	r24, Y+1	; 0x01
 280:	80 31       	cpi	r24, 0x10	; 16
 282:	c0 f1       	brcs	.+112    	; 0x2f4 <DIO_WritePin+0x15e>
 284:	89 81       	ldd	r24, Y+1	; 0x01
 286:	88 31       	cpi	r24, 0x18	; 24
 288:	a8 f5       	brcc	.+106    	; 0x2f4 <DIO_WritePin+0x15e>
	{
		if(PinValue == 1)
 28a:	8a 81       	ldd	r24, Y+2	; 0x02
 28c:	81 30       	cpi	r24, 0x01	; 1
 28e:	b9 f4       	brne	.+46     	; 0x2be <DIO_WritePin+0x128>
		{
			Set_Bit( PORTC , (PinNum-16));
 290:	85 e3       	ldi	r24, 0x35	; 53
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	25 e3       	ldi	r18, 0x35	; 53
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	f9 01       	movw	r30, r18
 29a:	20 81       	ld	r18, Z
 29c:	62 2f       	mov	r22, r18
 29e:	29 81       	ldd	r18, Y+1	; 0x01
 2a0:	22 2f       	mov	r18, r18
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	a9 01       	movw	r20, r18
 2a6:	40 51       	subi	r20, 0x10	; 16
 2a8:	51 09       	sbc	r21, r1
 2aa:	21 e0       	ldi	r18, 0x01	; 1
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_WritePin+0x11e>
 2b0:	22 0f       	add	r18, r18
 2b2:	33 1f       	adc	r19, r19
 2b4:	4a 95       	dec	r20
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_WritePin+0x11a>
 2b8:	26 2b       	or	r18, r22
 2ba:	fc 01       	movw	r30, r24
 2bc:	20 83       	st	Z, r18
		}
		if(PinValue == 0)
 2be:	8a 81       	ldd	r24, Y+2	; 0x02
 2c0:	88 23       	and	r24, r24
 2c2:	c1 f4       	brne	.+48     	; 0x2f4 <DIO_WritePin+0x15e>
		{
			Clear_Bit( PORTC , (PinNum-16));
 2c4:	85 e3       	ldi	r24, 0x35	; 53
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	25 e3       	ldi	r18, 0x35	; 53
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	f9 01       	movw	r30, r18
 2ce:	20 81       	ld	r18, Z
 2d0:	62 2f       	mov	r22, r18
 2d2:	29 81       	ldd	r18, Y+1	; 0x01
 2d4:	22 2f       	mov	r18, r18
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	a9 01       	movw	r20, r18
 2da:	40 51       	subi	r20, 0x10	; 16
 2dc:	51 09       	sbc	r21, r1
 2de:	21 e0       	ldi	r18, 0x01	; 1
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_WritePin+0x152>
 2e4:	22 0f       	add	r18, r18
 2e6:	33 1f       	adc	r19, r19
 2e8:	4a 95       	dec	r20
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_WritePin+0x14e>
 2ec:	20 95       	com	r18
 2ee:	26 23       	and	r18, r22
 2f0:	fc 01       	movw	r30, r24
 2f2:	20 83       	st	Z, r18
		}
	}
	
	if(PinNum > 24 && PinNum < 32)
 2f4:	89 81       	ldd	r24, Y+1	; 0x01
 2f6:	89 31       	cpi	r24, 0x19	; 25
 2f8:	c0 f1       	brcs	.+112    	; 0x36a <DIO_WritePin+0x1d4>
 2fa:	89 81       	ldd	r24, Y+1	; 0x01
 2fc:	80 32       	cpi	r24, 0x20	; 32
 2fe:	a8 f5       	brcc	.+106    	; 0x36a <DIO_WritePin+0x1d4>
	{
			if(PinValue == 1)
 300:	8a 81       	ldd	r24, Y+2	; 0x02
 302:	81 30       	cpi	r24, 0x01	; 1
 304:	b9 f4       	brne	.+46     	; 0x334 <DIO_WritePin+0x19e>
			{
				Set_Bit( PORTD , (PinNum-24));
 306:	82 e3       	ldi	r24, 0x32	; 50
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	22 e3       	ldi	r18, 0x32	; 50
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	f9 01       	movw	r30, r18
 310:	20 81       	ld	r18, Z
 312:	62 2f       	mov	r22, r18
 314:	29 81       	ldd	r18, Y+1	; 0x01
 316:	22 2f       	mov	r18, r18
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	a9 01       	movw	r20, r18
 31c:	48 51       	subi	r20, 0x18	; 24
 31e:	51 09       	sbc	r21, r1
 320:	21 e0       	ldi	r18, 0x01	; 1
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_WritePin+0x194>
 326:	22 0f       	add	r18, r18
 328:	33 1f       	adc	r19, r19
 32a:	4a 95       	dec	r20
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_WritePin+0x190>
 32e:	26 2b       	or	r18, r22
 330:	fc 01       	movw	r30, r24
 332:	20 83       	st	Z, r18
			}
			if(PinValue == 0)
 334:	8a 81       	ldd	r24, Y+2	; 0x02
 336:	88 23       	and	r24, r24
 338:	c1 f4       	brne	.+48     	; 0x36a <DIO_WritePin+0x1d4>
			{
				Clear_Bit( PORTD , (PinNum-24));
 33a:	82 e3       	ldi	r24, 0x32	; 50
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	22 e3       	ldi	r18, 0x32	; 50
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	f9 01       	movw	r30, r18
 344:	20 81       	ld	r18, Z
 346:	62 2f       	mov	r22, r18
 348:	29 81       	ldd	r18, Y+1	; 0x01
 34a:	22 2f       	mov	r18, r18
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	a9 01       	movw	r20, r18
 350:	48 51       	subi	r20, 0x18	; 24
 352:	51 09       	sbc	r21, r1
 354:	21 e0       	ldi	r18, 0x01	; 1
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_WritePin+0x1c8>
 35a:	22 0f       	add	r18, r18
 35c:	33 1f       	adc	r19, r19
 35e:	4a 95       	dec	r20
 360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_WritePin+0x1c4>
 362:	20 95       	com	r18
 364:	26 23       	and	r18, r22
 366:	fc 01       	movw	r30, r24
 368:	20 83       	st	Z, r18
			}
	}
}
 36a:	00 00       	nop
 36c:	0f 90       	pop	r0
 36e:	0f 90       	pop	r0
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	08 95       	ret

00000376 <DIO_SetPinDirection>:
/*
pindirection = 1 output
pindirection = 0 input
*/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	00 d0       	rcall	.+0      	; 0x37c <DIO_SetPinDirection+0x6>
 37c:	cd b7       	in	r28, 0x3d	; 61
 37e:	de b7       	in	r29, 0x3e	; 62
 380:	89 83       	std	Y+1, r24	; 0x01
 382:	6a 83       	std	Y+2, r22	; 0x02
		if(PinNum >= 0 && PinNum < 8 )
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	88 30       	cpi	r24, 0x08	; 8
 388:	78 f5       	brcc	.+94     	; 0x3e8 <DIO_SetPinDirection+0x72>
		{
			if(PinDirection== 1)
 38a:	8a 81       	ldd	r24, Y+2	; 0x02
 38c:	81 30       	cpi	r24, 0x01	; 1
 38e:	a1 f4       	brne	.+40     	; 0x3b8 <DIO_SetPinDirection+0x42>
			{
				Set_Bit( DDRA , PinNum);
 390:	8a e3       	ldi	r24, 0x3A	; 58
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	2a e3       	ldi	r18, 0x3A	; 58
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	f9 01       	movw	r30, r18
 39a:	20 81       	ld	r18, Z
 39c:	62 2f       	mov	r22, r18
 39e:	29 81       	ldd	r18, Y+1	; 0x01
 3a0:	42 2f       	mov	r20, r18
 3a2:	50 e0       	ldi	r21, 0x00	; 0
 3a4:	21 e0       	ldi	r18, 0x01	; 1
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_SetPinDirection+0x38>
 3aa:	22 0f       	add	r18, r18
 3ac:	33 1f       	adc	r19, r19
 3ae:	4a 95       	dec	r20
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_SetPinDirection+0x34>
 3b2:	26 2b       	or	r18, r22
 3b4:	fc 01       	movw	r30, r24
 3b6:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
 3b8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ba:	88 23       	and	r24, r24
 3bc:	a9 f4       	brne	.+42     	; 0x3e8 <DIO_SetPinDirection+0x72>
			{
				Clear_Bit( DDRA , PinNum);
 3be:	8a e3       	ldi	r24, 0x3A	; 58
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	2a e3       	ldi	r18, 0x3A	; 58
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	f9 01       	movw	r30, r18
 3c8:	20 81       	ld	r18, Z
 3ca:	62 2f       	mov	r22, r18
 3cc:	29 81       	ldd	r18, Y+1	; 0x01
 3ce:	42 2f       	mov	r20, r18
 3d0:	50 e0       	ldi	r21, 0x00	; 0
 3d2:	21 e0       	ldi	r18, 0x01	; 1
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_SetPinDirection+0x66>
 3d8:	22 0f       	add	r18, r18
 3da:	33 1f       	adc	r19, r19
 3dc:	4a 95       	dec	r20
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_SetPinDirection+0x62>
 3e0:	20 95       	com	r18
 3e2:	26 23       	and	r18, r22
 3e4:	fc 01       	movw	r30, r24
 3e6:	20 83       	st	Z, r18
			}
		}
		if(PinNum > 7 && PinNum < 16)
 3e8:	89 81       	ldd	r24, Y+1	; 0x01
 3ea:	88 30       	cpi	r24, 0x08	; 8
 3ec:	c0 f1       	brcs	.+112    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 3ee:	89 81       	ldd	r24, Y+1	; 0x01
 3f0:	80 31       	cpi	r24, 0x10	; 16
 3f2:	a8 f5       	brcc	.+106    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
		{
			if(PinDirection== 1)
 3f4:	8a 81       	ldd	r24, Y+2	; 0x02
 3f6:	81 30       	cpi	r24, 0x01	; 1
 3f8:	b9 f4       	brne	.+46     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
			{
				Set_Bit( DDRB , (PinNum-8));
 3fa:	87 e3       	ldi	r24, 0x37	; 55
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	27 e3       	ldi	r18, 0x37	; 55
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	f9 01       	movw	r30, r18
 404:	20 81       	ld	r18, Z
 406:	62 2f       	mov	r22, r18
 408:	29 81       	ldd	r18, Y+1	; 0x01
 40a:	22 2f       	mov	r18, r18
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	a9 01       	movw	r20, r18
 410:	48 50       	subi	r20, 0x08	; 8
 412:	51 09       	sbc	r21, r1
 414:	21 e0       	ldi	r18, 0x01	; 1
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	02 c0       	rjmp	.+4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41a:	22 0f       	add	r18, r18
 41c:	33 1f       	adc	r19, r19
 41e:	4a 95       	dec	r20
 420:	e2 f7       	brpl	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 422:	26 2b       	or	r18, r22
 424:	fc 01       	movw	r30, r24
 426:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
 428:	8a 81       	ldd	r24, Y+2	; 0x02
 42a:	88 23       	and	r24, r24
 42c:	c1 f4       	brne	.+48     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
			{
				Clear_Bit( DDRB , (PinNum-8));
 42e:	87 e3       	ldi	r24, 0x37	; 55
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	27 e3       	ldi	r18, 0x37	; 55
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	f9 01       	movw	r30, r18
 438:	20 81       	ld	r18, Z
 43a:	62 2f       	mov	r22, r18
 43c:	29 81       	ldd	r18, Y+1	; 0x01
 43e:	22 2f       	mov	r18, r18
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	a9 01       	movw	r20, r18
 444:	48 50       	subi	r20, 0x08	; 8
 446:	51 09       	sbc	r21, r1
 448:	21 e0       	ldi	r18, 0x01	; 1
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	02 c0       	rjmp	.+4      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 44e:	22 0f       	add	r18, r18
 450:	33 1f       	adc	r19, r19
 452:	4a 95       	dec	r20
 454:	e2 f7       	brpl	.-8      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 456:	20 95       	com	r18
 458:	26 23       	and	r18, r22
 45a:	fc 01       	movw	r30, r24
 45c:	20 83       	st	Z, r18
			}
		}
		if(PinNum > 15 && PinNum < 24)
 45e:	89 81       	ldd	r24, Y+1	; 0x01
 460:	80 31       	cpi	r24, 0x10	; 16
 462:	c0 f1       	brcs	.+112    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 464:	89 81       	ldd	r24, Y+1	; 0x01
 466:	88 31       	cpi	r24, 0x18	; 24
 468:	a8 f5       	brcc	.+106    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
		{
			if(PinDirection== 1)
 46a:	8a 81       	ldd	r24, Y+2	; 0x02
 46c:	81 30       	cpi	r24, 0x01	; 1
 46e:	b9 f4       	brne	.+46     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
			{
				Set_Bit( DDRC , (PinNum-16));
 470:	84 e3       	ldi	r24, 0x34	; 52
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	24 e3       	ldi	r18, 0x34	; 52
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	f9 01       	movw	r30, r18
 47a:	20 81       	ld	r18, Z
 47c:	62 2f       	mov	r22, r18
 47e:	29 81       	ldd	r18, Y+1	; 0x01
 480:	22 2f       	mov	r18, r18
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	a9 01       	movw	r20, r18
 486:	40 51       	subi	r20, 0x10	; 16
 488:	51 09       	sbc	r21, r1
 48a:	21 e0       	ldi	r18, 0x01	; 1
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	02 c0       	rjmp	.+4      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 490:	22 0f       	add	r18, r18
 492:	33 1f       	adc	r19, r19
 494:	4a 95       	dec	r20
 496:	e2 f7       	brpl	.-8      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 498:	26 2b       	or	r18, r22
 49a:	fc 01       	movw	r30, r24
 49c:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
 49e:	8a 81       	ldd	r24, Y+2	; 0x02
 4a0:	88 23       	and	r24, r24
 4a2:	c1 f4       	brne	.+48     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
			{
				Clear_Bit( DDRC , (PinNum-16));
 4a4:	84 e3       	ldi	r24, 0x34	; 52
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	24 e3       	ldi	r18, 0x34	; 52
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	f9 01       	movw	r30, r18
 4ae:	20 81       	ld	r18, Z
 4b0:	62 2f       	mov	r22, r18
 4b2:	29 81       	ldd	r18, Y+1	; 0x01
 4b4:	22 2f       	mov	r18, r18
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	a9 01       	movw	r20, r18
 4ba:	40 51       	subi	r20, 0x10	; 16
 4bc:	51 09       	sbc	r21, r1
 4be:	21 e0       	ldi	r18, 0x01	; 1
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4c4:	22 0f       	add	r18, r18
 4c6:	33 1f       	adc	r19, r19
 4c8:	4a 95       	dec	r20
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4cc:	20 95       	com	r18
 4ce:	26 23       	and	r18, r22
 4d0:	fc 01       	movw	r30, r24
 4d2:	20 83       	st	Z, r18
			}
		}
		
		if(PinNum > 24 && PinNum < 32)
 4d4:	89 81       	ldd	r24, Y+1	; 0x01
 4d6:	89 31       	cpi	r24, 0x19	; 25
 4d8:	c0 f1       	brcs	.+112    	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 4da:	89 81       	ldd	r24, Y+1	; 0x01
 4dc:	80 32       	cpi	r24, 0x20	; 32
 4de:	a8 f5       	brcc	.+106    	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
		{
			if(PinDirection== 1)
 4e0:	8a 81       	ldd	r24, Y+2	; 0x02
 4e2:	81 30       	cpi	r24, 0x01	; 1
 4e4:	b9 f4       	brne	.+46     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
			{
				Set_Bit( DDRD , (PinNum-24));
 4e6:	81 e3       	ldi	r24, 0x31	; 49
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	21 e3       	ldi	r18, 0x31	; 49
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	f9 01       	movw	r30, r18
 4f0:	20 81       	ld	r18, Z
 4f2:	62 2f       	mov	r22, r18
 4f4:	29 81       	ldd	r18, Y+1	; 0x01
 4f6:	22 2f       	mov	r18, r18
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	a9 01       	movw	r20, r18
 4fc:	48 51       	subi	r20, 0x18	; 24
 4fe:	51 09       	sbc	r21, r1
 500:	21 e0       	ldi	r18, 0x01	; 1
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	02 c0       	rjmp	.+4      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 506:	22 0f       	add	r18, r18
 508:	33 1f       	adc	r19, r19
 50a:	4a 95       	dec	r20
 50c:	e2 f7       	brpl	.-8      	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 50e:	26 2b       	or	r18, r22
 510:	fc 01       	movw	r30, r24
 512:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
 514:	8a 81       	ldd	r24, Y+2	; 0x02
 516:	88 23       	and	r24, r24
 518:	c1 f4       	brne	.+48     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
			{
				Clear_Bit( DDRD , (PinNum-24));
 51a:	81 e3       	ldi	r24, 0x31	; 49
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	21 e3       	ldi	r18, 0x31	; 49
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	f9 01       	movw	r30, r18
 524:	20 81       	ld	r18, Z
 526:	62 2f       	mov	r22, r18
 528:	29 81       	ldd	r18, Y+1	; 0x01
 52a:	22 2f       	mov	r18, r18
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	a9 01       	movw	r20, r18
 530:	48 51       	subi	r20, 0x18	; 24
 532:	51 09       	sbc	r21, r1
 534:	21 e0       	ldi	r18, 0x01	; 1
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	02 c0       	rjmp	.+4      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 53a:	22 0f       	add	r18, r18
 53c:	33 1f       	adc	r19, r19
 53e:	4a 95       	dec	r20
 540:	e2 f7       	brpl	.-8      	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
 542:	20 95       	com	r18
 544:	26 23       	and	r18, r22
 546:	fc 01       	movw	r30, r24
 548:	20 83       	st	Z, r18
			}
		}
}
 54a:	00 00       	nop
 54c:	0f 90       	pop	r0
 54e:	0f 90       	pop	r0
 550:	df 91       	pop	r29
 552:	cf 91       	pop	r28
 554:	08 95       	ret

00000556 <main>:
#include "DIO_Registers.h"
#include "delay_Timer.h"


int main(void)
{
 556:	cf 93       	push	r28
 558:	df 93       	push	r29
 55a:	cd b7       	in	r28, 0x3d	; 61
 55c:	de b7       	in	r29, 0x3e	; 62
	/*Set Leds As OUTPUt*/
	DIO_SetPinDirection(PIN12,OUTPUT);
 55e:	61 e0       	ldi	r22, 0x01	; 1
 560:	8c e0       	ldi	r24, 0x0C	; 12
 562:	0e 94 bb 01 	call	0x376	; 0x376 <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN13,OUTPUT);
 566:	61 e0       	ldi	r22, 0x01	; 1
 568:	8d e0       	ldi	r24, 0x0D	; 13
 56a:	0e 94 bb 01 	call	0x376	; 0x376 <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN14,OUTPUT);
 56e:	61 e0       	ldi	r22, 0x01	; 1
 570:	8e e0       	ldi	r24, 0x0E	; 14
 572:	0e 94 bb 01 	call	0x376	; 0x376 <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN15,OUTPUT);
 576:	61 e0       	ldi	r22, 0x01	; 1
 578:	8f e0       	ldi	r24, 0x0F	; 15
 57a:	0e 94 bb 01 	call	0x376	; 0x376 <DIO_SetPinDirection>
	timer_init();
 57e:	0e 94 36 00 	call	0x6c	; 0x6c <timer_init>
	while(1)
	{
		DIO_WritePin(PIN12,LOW);
 582:	60 e0       	ldi	r22, 0x00	; 0
 584:	8c e0       	ldi	r24, 0x0C	; 12
 586:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_WritePin>
		DIO_WritePin(PIN13,LOW);
 58a:	60 e0       	ldi	r22, 0x00	; 0
 58c:	8d e0       	ldi	r24, 0x0D	; 13
 58e:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_WritePin>
		DIO_WritePin(PIN14,LOW);
 592:	60 e0       	ldi	r22, 0x00	; 0
 594:	8e e0       	ldi	r24, 0x0E	; 14
 596:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_WritePin>
		DIO_WritePin(PIN15,LOW);
 59a:	60 e0       	ldi	r22, 0x00	; 0
 59c:	8f e0       	ldi	r24, 0x0F	; 15
 59e:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_WritePin>
		timer_delay(1000);
 5a2:	68 ee       	ldi	r22, 0xE8	; 232
 5a4:	73 e0       	ldi	r23, 0x03	; 3
 5a6:	80 e0       	ldi	r24, 0x00	; 0
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	0e 94 82 00 	call	0x104	; 0x104 <timer_delay>
		DIO_WritePin(PIN12,HIGH);
 5ae:	61 e0       	ldi	r22, 0x01	; 1
 5b0:	8c e0       	ldi	r24, 0x0C	; 12
 5b2:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_WritePin>
		DIO_WritePin(PIN13,HIGH);
 5b6:	61 e0       	ldi	r22, 0x01	; 1
 5b8:	8d e0       	ldi	r24, 0x0D	; 13
 5ba:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_WritePin>
		DIO_WritePin(PIN14,HIGH);
 5be:	61 e0       	ldi	r22, 0x01	; 1
 5c0:	8e e0       	ldi	r24, 0x0E	; 14
 5c2:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_WritePin>
		DIO_WritePin(PIN15,HIGH);
 5c6:	61 e0       	ldi	r22, 0x01	; 1
 5c8:	8f e0       	ldi	r24, 0x0F	; 15
 5ca:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_WritePin>
		timer_delay(1000);
 5ce:	68 ee       	ldi	r22, 0xE8	; 232
 5d0:	73 e0       	ldi	r23, 0x03	; 3
 5d2:	80 e0       	ldi	r24, 0x00	; 0
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	0e 94 82 00 	call	0x104	; 0x104 <timer_delay>
	}
 5da:	d3 cf       	rjmp	.-90     	; 0x582 <main+0x2c>

000005dc <_exit>:
 5dc:	f8 94       	cli

000005de <__stop_program>:
 5de:	ff cf       	rjmp	.-2      	; 0x5de <__stop_program>


Delay_func.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000607  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000055e  00000000  00000000  000008a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001bd  00000000  00000000  00000e01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00000fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002fb  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  00001323  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000013b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  64:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <delay_ms>:
 */ 
#include "Delay.h"
#include "Types.h"

void delay_ms(uint8 time_in_ms)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <delay_ms+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <delay_ms+0x8>
  74:	1f 92       	push	r1
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	8d 83       	std	Y+5, r24	; 0x05
	uint32 i = ((time_in_ms*F_CPU)/1000);
  7c:	8d 81       	ldd	r24, Y+5	; 0x05
  7e:	88 2f       	mov	r24, r24
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	a0 e0       	ldi	r26, 0x00	; 0
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	9c 01       	movw	r18, r24
  88:	ad 01       	movw	r20, r26
  8a:	60 e0       	ldi	r22, 0x00	; 0
  8c:	74 e2       	ldi	r23, 0x24	; 36
  8e:	84 ef       	ldi	r24, 0xF4	; 244
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	0e 94 7f 00 	call	0xfe	; 0xfe <__mulsi3>
  96:	dc 01       	movw	r26, r24
  98:	cb 01       	movw	r24, r22
  9a:	28 ee       	ldi	r18, 0xE8	; 232
  9c:	33 e0       	ldi	r19, 0x03	; 3
  9e:	40 e0       	ldi	r20, 0x00	; 0
  a0:	50 e0       	ldi	r21, 0x00	; 0
  a2:	bc 01       	movw	r22, r24
  a4:	cd 01       	movw	r24, r26
  a6:	0e 94 8f 00 	call	0x11e	; 0x11e <__udivmodsi4>
  aa:	da 01       	movw	r26, r20
  ac:	c9 01       	movw	r24, r18
  ae:	89 83       	std	Y+1, r24	; 0x01
  b0:	9a 83       	std	Y+2, r25	; 0x02
  b2:	ab 83       	std	Y+3, r26	; 0x03
  b4:	bc 83       	std	Y+4, r27	; 0x04
	for(i=0;i<i;i++)
  b6:	19 82       	std	Y+1, r1	; 0x01
  b8:	1a 82       	std	Y+2, r1	; 0x02
  ba:	1b 82       	std	Y+3, r1	; 0x03
  bc:	1c 82       	std	Y+4, r1	; 0x04
  be:	00 00       	nop
	{
		//do nothing
	}
  c0:	00 00       	nop
  c2:	0f 90       	pop	r0
  c4:	0f 90       	pop	r0
  c6:	0f 90       	pop	r0
  c8:	0f 90       	pop	r0
  ca:	0f 90       	pop	r0
  cc:	df 91       	pop	r29
  ce:	cf 91       	pop	r28
  d0:	08 95       	ret

000000d2 <main>:
//#include <avr/io.h>

#include "Delay.h"

int main(void)
{
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	00 d0       	rcall	.+0      	; 0xd8 <main+0x6>
  d8:	cd b7       	in	r28, 0x3d	; 61
  da:	de b7       	in	r29, 0x3e	; 62
	int x=0;
  dc:	1a 82       	std	Y+2, r1	; 0x02
  de:	19 82       	std	Y+1, r1	; 0x01
    /* Replace with your application code */
	delay_ms(100);
  e0:	84 e6       	ldi	r24, 0x64	; 100
  e2:	0e 94 36 00 	call	0x6c	; 0x6c <delay_ms>
	x++;
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	9a 81       	ldd	r25, Y+2	; 0x02
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	9a 83       	std	Y+2, r25	; 0x02
  ee:	89 83       	std	Y+1, r24	; 0x01
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	90 e0       	ldi	r25, 0x00	; 0
}
  f4:	0f 90       	pop	r0
  f6:	0f 90       	pop	r0
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <__mulsi3>:
  fe:	db 01       	movw	r26, r22
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
 104:	0e 94 b1 00 	call	0x162	; 0x162 <__muluhisi3>
 108:	bf 91       	pop	r27
 10a:	af 91       	pop	r26
 10c:	a2 9f       	mul	r26, r18
 10e:	80 0d       	add	r24, r0
 110:	91 1d       	adc	r25, r1
 112:	a3 9f       	mul	r26, r19
 114:	90 0d       	add	r25, r0
 116:	b2 9f       	mul	r27, r18
 118:	90 0d       	add	r25, r0
 11a:	11 24       	eor	r1, r1
 11c:	08 95       	ret

0000011e <__udivmodsi4>:
 11e:	a1 e2       	ldi	r26, 0x21	; 33
 120:	1a 2e       	mov	r1, r26
 122:	aa 1b       	sub	r26, r26
 124:	bb 1b       	sub	r27, r27
 126:	fd 01       	movw	r30, r26
 128:	0d c0       	rjmp	.+26     	; 0x144 <__udivmodsi4_ep>

0000012a <__udivmodsi4_loop>:
 12a:	aa 1f       	adc	r26, r26
 12c:	bb 1f       	adc	r27, r27
 12e:	ee 1f       	adc	r30, r30
 130:	ff 1f       	adc	r31, r31
 132:	a2 17       	cp	r26, r18
 134:	b3 07       	cpc	r27, r19
 136:	e4 07       	cpc	r30, r20
 138:	f5 07       	cpc	r31, r21
 13a:	20 f0       	brcs	.+8      	; 0x144 <__udivmodsi4_ep>
 13c:	a2 1b       	sub	r26, r18
 13e:	b3 0b       	sbc	r27, r19
 140:	e4 0b       	sbc	r30, r20
 142:	f5 0b       	sbc	r31, r21

00000144 <__udivmodsi4_ep>:
 144:	66 1f       	adc	r22, r22
 146:	77 1f       	adc	r23, r23
 148:	88 1f       	adc	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	1a 94       	dec	r1
 14e:	69 f7       	brne	.-38     	; 0x12a <__udivmodsi4_loop>
 150:	60 95       	com	r22
 152:	70 95       	com	r23
 154:	80 95       	com	r24
 156:	90 95       	com	r25
 158:	9b 01       	movw	r18, r22
 15a:	ac 01       	movw	r20, r24
 15c:	bd 01       	movw	r22, r26
 15e:	cf 01       	movw	r24, r30
 160:	08 95       	ret

00000162 <__muluhisi3>:
 162:	0e 94 bc 00 	call	0x178	; 0x178 <__umulhisi3>
 166:	a5 9f       	mul	r26, r21
 168:	90 0d       	add	r25, r0
 16a:	b4 9f       	mul	r27, r20
 16c:	90 0d       	add	r25, r0
 16e:	a4 9f       	mul	r26, r20
 170:	80 0d       	add	r24, r0
 172:	91 1d       	adc	r25, r1
 174:	11 24       	eor	r1, r1
 176:	08 95       	ret

00000178 <__umulhisi3>:
 178:	a2 9f       	mul	r26, r18
 17a:	b0 01       	movw	r22, r0
 17c:	b3 9f       	mul	r27, r19
 17e:	c0 01       	movw	r24, r0
 180:	a3 9f       	mul	r26, r19
 182:	70 0d       	add	r23, r0
 184:	81 1d       	adc	r24, r1
 186:	11 24       	eor	r1, r1
 188:	91 1d       	adc	r25, r1
 18a:	b2 9f       	mul	r27, r18
 18c:	70 0d       	add	r23, r0
 18e:	81 1d       	adc	r24, r1
 190:	11 24       	eor	r1, r1
 192:	91 1d       	adc	r25, r1
 194:	08 95       	ret

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>

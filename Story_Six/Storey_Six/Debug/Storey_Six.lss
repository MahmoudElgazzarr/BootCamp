
Storey_Six.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000060c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000690  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006fd  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005dc  00000000  00000000  00000e39  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000046e  00000000  00000000  00001415  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  00001884  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000360  00000000  00000000  00001960  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015a  00000000  00000000  00001cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001e1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 67 02 	call	0x4ce	; 0x4ce <main>
  64:	0c 94 04 03 	jmp	0x608	; 0x608 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <delay_ms>:
 */ 
#include "Delay.h"
#include "Types.h"

void delay_ms(uint32 time_in_ms)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	2c 97       	sbiw	r28, 0x0c	; 12
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	69 87       	std	Y+9, r22	; 0x09
  82:	7a 87       	std	Y+10, r23	; 0x0a
  84:	8b 87       	std	Y+11, r24	; 0x0b
  86:	9c 87       	std	Y+12, r25	; 0x0c
	uint32 loops = (((time_in_ms)*(F_CPU))/10000);
  88:	89 85       	ldd	r24, Y+9	; 0x09
  8a:	9a 85       	ldd	r25, Y+10	; 0x0a
  8c:	ab 85       	ldd	r26, Y+11	; 0x0b
  8e:	bc 85       	ldd	r27, Y+12	; 0x0c
  90:	9c 01       	movw	r18, r24
  92:	ad 01       	movw	r20, r26
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	74 e2       	ldi	r23, 0x24	; 36
  98:	84 ef       	ldi	r24, 0xF4	; 244
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	0e 94 b8 02 	call	0x570	; 0x570 <__mulsi3>
  a0:	dc 01       	movw	r26, r24
  a2:	cb 01       	movw	r24, r22
  a4:	20 e1       	ldi	r18, 0x10	; 16
  a6:	37 e2       	ldi	r19, 0x27	; 39
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	50 e0       	ldi	r21, 0x00	; 0
  ac:	bc 01       	movw	r22, r24
  ae:	cd 01       	movw	r24, r26
  b0:	0e 94 c8 02 	call	0x590	; 0x590 <__udivmodsi4>
  b4:	da 01       	movw	r26, r20
  b6:	c9 01       	movw	r24, r18
  b8:	8d 83       	std	Y+5, r24	; 0x05
  ba:	9e 83       	std	Y+6, r25	; 0x06
  bc:	af 83       	std	Y+7, r26	; 0x07
  be:	b8 87       	std	Y+8, r27	; 0x08
	uint32 i;
	for(i=0;i<loops;i++)
  c0:	19 82       	std	Y+1, r1	; 0x01
  c2:	1a 82       	std	Y+2, r1	; 0x02
  c4:	1b 82       	std	Y+3, r1	; 0x03
  c6:	1c 82       	std	Y+4, r1	; 0x04
  c8:	0b c0       	rjmp	.+22     	; 0xe0 <delay_ms+0x74>
  ca:	89 81       	ldd	r24, Y+1	; 0x01
  cc:	9a 81       	ldd	r25, Y+2	; 0x02
  ce:	ab 81       	ldd	r26, Y+3	; 0x03
  d0:	bc 81       	ldd	r27, Y+4	; 0x04
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	a1 1d       	adc	r26, r1
  d6:	b1 1d       	adc	r27, r1
  d8:	89 83       	std	Y+1, r24	; 0x01
  da:	9a 83       	std	Y+2, r25	; 0x02
  dc:	ab 83       	std	Y+3, r26	; 0x03
  de:	bc 83       	std	Y+4, r27	; 0x04
  e0:	29 81       	ldd	r18, Y+1	; 0x01
  e2:	3a 81       	ldd	r19, Y+2	; 0x02
  e4:	4b 81       	ldd	r20, Y+3	; 0x03
  e6:	5c 81       	ldd	r21, Y+4	; 0x04
  e8:	8d 81       	ldd	r24, Y+5	; 0x05
  ea:	9e 81       	ldd	r25, Y+6	; 0x06
  ec:	af 81       	ldd	r26, Y+7	; 0x07
  ee:	b8 85       	ldd	r27, Y+8	; 0x08
  f0:	28 17       	cp	r18, r24
  f2:	39 07       	cpc	r19, r25
  f4:	4a 07       	cpc	r20, r26
  f6:	5b 07       	cpc	r21, r27
  f8:	40 f3       	brcs	.-48     	; 0xca <delay_ms+0x5e>
	{
		//do nothing
	}
  fa:	00 00       	nop
  fc:	2c 96       	adiw	r28, 0x0c	; 12
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	f8 94       	cli
 102:	de bf       	out	0x3e, r29	; 62
 104:	0f be       	out	0x3f, r0	; 63
 106:	cd bf       	out	0x3d, r28	; 61
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <DIO_WritePin>:
#include "DIO_Registers.h"
#include "DIO_Registers_Definitions.h"
#include "BitwiseOperation.h"

void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	00 d0       	rcall	.+0      	; 0x114 <DIO_WritePin+0x6>
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
 118:	89 83       	std	Y+1, r24	; 0x01
 11a:	6a 83       	std	Y+2, r22	; 0x02
	if(PinNum >= 0 && PinNum < 8 )
 11c:	89 81       	ldd	r24, Y+1	; 0x01
 11e:	88 30       	cpi	r24, 0x08	; 8
 120:	78 f5       	brcc	.+94     	; 0x180 <DIO_WritePin+0x72>
	{
			if(PinValue == 1)
 122:	8a 81       	ldd	r24, Y+2	; 0x02
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	a1 f4       	brne	.+40     	; 0x150 <DIO_WritePin+0x42>
			{
				Set_Bit( PORTA , PinNum);
 128:	8b e3       	ldi	r24, 0x3B	; 59
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	2b e3       	ldi	r18, 0x3B	; 59
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	f9 01       	movw	r30, r18
 132:	20 81       	ld	r18, Z
 134:	62 2f       	mov	r22, r18
 136:	29 81       	ldd	r18, Y+1	; 0x01
 138:	42 2f       	mov	r20, r18
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_WritePin+0x38>
 142:	22 0f       	add	r18, r18
 144:	33 1f       	adc	r19, r19
 146:	4a 95       	dec	r20
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_WritePin+0x34>
 14a:	26 2b       	or	r18, r22
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18
			}
			if(PinValue == 0)
 150:	8a 81       	ldd	r24, Y+2	; 0x02
 152:	88 23       	and	r24, r24
 154:	a9 f4       	brne	.+42     	; 0x180 <DIO_WritePin+0x72>
			{
				Clear_Bit( PORTA , PinNum);
 156:	8b e3       	ldi	r24, 0x3B	; 59
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	2b e3       	ldi	r18, 0x3B	; 59
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	f9 01       	movw	r30, r18
 160:	20 81       	ld	r18, Z
 162:	62 2f       	mov	r22, r18
 164:	29 81       	ldd	r18, Y+1	; 0x01
 166:	42 2f       	mov	r20, r18
 168:	50 e0       	ldi	r21, 0x00	; 0
 16a:	21 e0       	ldi	r18, 0x01	; 1
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_WritePin+0x66>
 170:	22 0f       	add	r18, r18
 172:	33 1f       	adc	r19, r19
 174:	4a 95       	dec	r20
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_WritePin+0x62>
 178:	20 95       	com	r18
 17a:	26 23       	and	r18, r22
 17c:	fc 01       	movw	r30, r24
 17e:	20 83       	st	Z, r18
			}
	}
	if(PinNum > 7 && PinNum < 16)
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	88 30       	cpi	r24, 0x08	; 8
 184:	c0 f1       	brcs	.+112    	; 0x1f6 <DIO_WritePin+0xe8>
 186:	89 81       	ldd	r24, Y+1	; 0x01
 188:	80 31       	cpi	r24, 0x10	; 16
 18a:	a8 f5       	brcc	.+106    	; 0x1f6 <DIO_WritePin+0xe8>
	{
		if(PinValue == 1)
 18c:	8a 81       	ldd	r24, Y+2	; 0x02
 18e:	81 30       	cpi	r24, 0x01	; 1
 190:	b9 f4       	brne	.+46     	; 0x1c0 <DIO_WritePin+0xb2>
		{
			Set_Bit( PORTB , (PinNum-8));
 192:	88 e3       	ldi	r24, 0x38	; 56
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	28 e3       	ldi	r18, 0x38	; 56
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	f9 01       	movw	r30, r18
 19c:	20 81       	ld	r18, Z
 19e:	62 2f       	mov	r22, r18
 1a0:	29 81       	ldd	r18, Y+1	; 0x01
 1a2:	22 2f       	mov	r18, r18
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	a9 01       	movw	r20, r18
 1a8:	48 50       	subi	r20, 0x08	; 8
 1aa:	51 09       	sbc	r21, r1
 1ac:	21 e0       	ldi	r18, 0x01	; 1
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_WritePin+0xa8>
 1b2:	22 0f       	add	r18, r18
 1b4:	33 1f       	adc	r19, r19
 1b6:	4a 95       	dec	r20
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_WritePin+0xa4>
 1ba:	26 2b       	or	r18, r22
 1bc:	fc 01       	movw	r30, r24
 1be:	20 83       	st	Z, r18
		}
		if(PinValue == 0)
 1c0:	8a 81       	ldd	r24, Y+2	; 0x02
 1c2:	88 23       	and	r24, r24
 1c4:	c1 f4       	brne	.+48     	; 0x1f6 <DIO_WritePin+0xe8>
		{
			Clear_Bit( PORTB , (PinNum-8));
 1c6:	88 e3       	ldi	r24, 0x38	; 56
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	28 e3       	ldi	r18, 0x38	; 56
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	f9 01       	movw	r30, r18
 1d0:	20 81       	ld	r18, Z
 1d2:	62 2f       	mov	r22, r18
 1d4:	29 81       	ldd	r18, Y+1	; 0x01
 1d6:	22 2f       	mov	r18, r18
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	a9 01       	movw	r20, r18
 1dc:	48 50       	subi	r20, 0x08	; 8
 1de:	51 09       	sbc	r21, r1
 1e0:	21 e0       	ldi	r18, 0x01	; 1
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_WritePin+0xdc>
 1e6:	22 0f       	add	r18, r18
 1e8:	33 1f       	adc	r19, r19
 1ea:	4a 95       	dec	r20
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_WritePin+0xd8>
 1ee:	20 95       	com	r18
 1f0:	26 23       	and	r18, r22
 1f2:	fc 01       	movw	r30, r24
 1f4:	20 83       	st	Z, r18
		}
	}
	if(PinNum > 15 && PinNum < 24)
 1f6:	89 81       	ldd	r24, Y+1	; 0x01
 1f8:	80 31       	cpi	r24, 0x10	; 16
 1fa:	c0 f1       	brcs	.+112    	; 0x26c <DIO_WritePin+0x15e>
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	88 31       	cpi	r24, 0x18	; 24
 200:	a8 f5       	brcc	.+106    	; 0x26c <DIO_WritePin+0x15e>
	{
		if(PinValue == 1)
 202:	8a 81       	ldd	r24, Y+2	; 0x02
 204:	81 30       	cpi	r24, 0x01	; 1
 206:	b9 f4       	brne	.+46     	; 0x236 <DIO_WritePin+0x128>
		{
			Set_Bit( PORTC , (PinNum-16));
 208:	85 e3       	ldi	r24, 0x35	; 53
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	25 e3       	ldi	r18, 0x35	; 53
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	f9 01       	movw	r30, r18
 212:	20 81       	ld	r18, Z
 214:	62 2f       	mov	r22, r18
 216:	29 81       	ldd	r18, Y+1	; 0x01
 218:	22 2f       	mov	r18, r18
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	a9 01       	movw	r20, r18
 21e:	40 51       	subi	r20, 0x10	; 16
 220:	51 09       	sbc	r21, r1
 222:	21 e0       	ldi	r18, 0x01	; 1
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_WritePin+0x11e>
 228:	22 0f       	add	r18, r18
 22a:	33 1f       	adc	r19, r19
 22c:	4a 95       	dec	r20
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_WritePin+0x11a>
 230:	26 2b       	or	r18, r22
 232:	fc 01       	movw	r30, r24
 234:	20 83       	st	Z, r18
		}
		if(PinValue == 0)
 236:	8a 81       	ldd	r24, Y+2	; 0x02
 238:	88 23       	and	r24, r24
 23a:	c1 f4       	brne	.+48     	; 0x26c <DIO_WritePin+0x15e>
		{
			Clear_Bit( PORTC , (PinNum-16));
 23c:	85 e3       	ldi	r24, 0x35	; 53
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	25 e3       	ldi	r18, 0x35	; 53
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	f9 01       	movw	r30, r18
 246:	20 81       	ld	r18, Z
 248:	62 2f       	mov	r22, r18
 24a:	29 81       	ldd	r18, Y+1	; 0x01
 24c:	22 2f       	mov	r18, r18
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	a9 01       	movw	r20, r18
 252:	40 51       	subi	r20, 0x10	; 16
 254:	51 09       	sbc	r21, r1
 256:	21 e0       	ldi	r18, 0x01	; 1
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_WritePin+0x152>
 25c:	22 0f       	add	r18, r18
 25e:	33 1f       	adc	r19, r19
 260:	4a 95       	dec	r20
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_WritePin+0x14e>
 264:	20 95       	com	r18
 266:	26 23       	and	r18, r22
 268:	fc 01       	movw	r30, r24
 26a:	20 83       	st	Z, r18
		}
	}
	
	if(PinNum > 24 && PinNum < 32)
 26c:	89 81       	ldd	r24, Y+1	; 0x01
 26e:	89 31       	cpi	r24, 0x19	; 25
 270:	c0 f1       	brcs	.+112    	; 0x2e2 <DIO_WritePin+0x1d4>
 272:	89 81       	ldd	r24, Y+1	; 0x01
 274:	80 32       	cpi	r24, 0x20	; 32
 276:	a8 f5       	brcc	.+106    	; 0x2e2 <DIO_WritePin+0x1d4>
	{
			if(PinValue == 1)
 278:	8a 81       	ldd	r24, Y+2	; 0x02
 27a:	81 30       	cpi	r24, 0x01	; 1
 27c:	b9 f4       	brne	.+46     	; 0x2ac <DIO_WritePin+0x19e>
			{
				Set_Bit( PORTD , (PinNum-24));
 27e:	82 e3       	ldi	r24, 0x32	; 50
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	22 e3       	ldi	r18, 0x32	; 50
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	f9 01       	movw	r30, r18
 288:	20 81       	ld	r18, Z
 28a:	62 2f       	mov	r22, r18
 28c:	29 81       	ldd	r18, Y+1	; 0x01
 28e:	22 2f       	mov	r18, r18
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	a9 01       	movw	r20, r18
 294:	48 51       	subi	r20, 0x18	; 24
 296:	51 09       	sbc	r21, r1
 298:	21 e0       	ldi	r18, 0x01	; 1
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_WritePin+0x194>
 29e:	22 0f       	add	r18, r18
 2a0:	33 1f       	adc	r19, r19
 2a2:	4a 95       	dec	r20
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_WritePin+0x190>
 2a6:	26 2b       	or	r18, r22
 2a8:	fc 01       	movw	r30, r24
 2aa:	20 83       	st	Z, r18
			}
			if(PinValue == 0)
 2ac:	8a 81       	ldd	r24, Y+2	; 0x02
 2ae:	88 23       	and	r24, r24
 2b0:	c1 f4       	brne	.+48     	; 0x2e2 <DIO_WritePin+0x1d4>
			{
				Clear_Bit( PORTD , (PinNum-24));
 2b2:	82 e3       	ldi	r24, 0x32	; 50
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	22 e3       	ldi	r18, 0x32	; 50
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	f9 01       	movw	r30, r18
 2bc:	20 81       	ld	r18, Z
 2be:	62 2f       	mov	r22, r18
 2c0:	29 81       	ldd	r18, Y+1	; 0x01
 2c2:	22 2f       	mov	r18, r18
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	a9 01       	movw	r20, r18
 2c8:	48 51       	subi	r20, 0x18	; 24
 2ca:	51 09       	sbc	r21, r1
 2cc:	21 e0       	ldi	r18, 0x01	; 1
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_WritePin+0x1c8>
 2d2:	22 0f       	add	r18, r18
 2d4:	33 1f       	adc	r19, r19
 2d6:	4a 95       	dec	r20
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_WritePin+0x1c4>
 2da:	20 95       	com	r18
 2dc:	26 23       	and	r18, r22
 2de:	fc 01       	movw	r30, r24
 2e0:	20 83       	st	Z, r18
			}
	}
}
 2e2:	00 00       	nop
 2e4:	0f 90       	pop	r0
 2e6:	0f 90       	pop	r0
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

000002ee <DIO_SetPinDirection>:
/*
pindirection = 1 output
pindirection = 0 input
*/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	00 d0       	rcall	.+0      	; 0x2f4 <DIO_SetPinDirection+0x6>
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
 2f8:	89 83       	std	Y+1, r24	; 0x01
 2fa:	6a 83       	std	Y+2, r22	; 0x02
		if(PinNum >= 0 && PinNum < 8 )
 2fc:	89 81       	ldd	r24, Y+1	; 0x01
 2fe:	88 30       	cpi	r24, 0x08	; 8
 300:	78 f5       	brcc	.+94     	; 0x360 <DIO_SetPinDirection+0x72>
		{
			if(PinDirection== 1)
 302:	8a 81       	ldd	r24, Y+2	; 0x02
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	a1 f4       	brne	.+40     	; 0x330 <DIO_SetPinDirection+0x42>
			{
				Set_Bit( DDRA , PinNum);
 308:	8a e3       	ldi	r24, 0x3A	; 58
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	2a e3       	ldi	r18, 0x3A	; 58
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	f9 01       	movw	r30, r18
 312:	20 81       	ld	r18, Z
 314:	62 2f       	mov	r22, r18
 316:	29 81       	ldd	r18, Y+1	; 0x01
 318:	42 2f       	mov	r20, r18
 31a:	50 e0       	ldi	r21, 0x00	; 0
 31c:	21 e0       	ldi	r18, 0x01	; 1
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_SetPinDirection+0x38>
 322:	22 0f       	add	r18, r18
 324:	33 1f       	adc	r19, r19
 326:	4a 95       	dec	r20
 328:	e2 f7       	brpl	.-8      	; 0x322 <DIO_SetPinDirection+0x34>
 32a:	26 2b       	or	r18, r22
 32c:	fc 01       	movw	r30, r24
 32e:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
 330:	8a 81       	ldd	r24, Y+2	; 0x02
 332:	88 23       	and	r24, r24
 334:	a9 f4       	brne	.+42     	; 0x360 <DIO_SetPinDirection+0x72>
			{
				Clear_Bit( DDRA , PinNum);
 336:	8a e3       	ldi	r24, 0x3A	; 58
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	2a e3       	ldi	r18, 0x3A	; 58
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	f9 01       	movw	r30, r18
 340:	20 81       	ld	r18, Z
 342:	62 2f       	mov	r22, r18
 344:	29 81       	ldd	r18, Y+1	; 0x01
 346:	42 2f       	mov	r20, r18
 348:	50 e0       	ldi	r21, 0x00	; 0
 34a:	21 e0       	ldi	r18, 0x01	; 1
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_SetPinDirection+0x66>
 350:	22 0f       	add	r18, r18
 352:	33 1f       	adc	r19, r19
 354:	4a 95       	dec	r20
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_SetPinDirection+0x62>
 358:	20 95       	com	r18
 35a:	26 23       	and	r18, r22
 35c:	fc 01       	movw	r30, r24
 35e:	20 83       	st	Z, r18
			}
		}
		if(PinNum > 7 && PinNum < 16)
 360:	89 81       	ldd	r24, Y+1	; 0x01
 362:	88 30       	cpi	r24, 0x08	; 8
 364:	c0 f1       	brcs	.+112    	; 0x3d6 <DIO_SetPinDirection+0xe8>
 366:	89 81       	ldd	r24, Y+1	; 0x01
 368:	80 31       	cpi	r24, 0x10	; 16
 36a:	a8 f5       	brcc	.+106    	; 0x3d6 <DIO_SetPinDirection+0xe8>
		{
			if(PinDirection== 1)
 36c:	8a 81       	ldd	r24, Y+2	; 0x02
 36e:	81 30       	cpi	r24, 0x01	; 1
 370:	b9 f4       	brne	.+46     	; 0x3a0 <DIO_SetPinDirection+0xb2>
			{
				Set_Bit( DDRB , (PinNum-8));
 372:	87 e3       	ldi	r24, 0x37	; 55
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	27 e3       	ldi	r18, 0x37	; 55
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	f9 01       	movw	r30, r18
 37c:	20 81       	ld	r18, Z
 37e:	62 2f       	mov	r22, r18
 380:	29 81       	ldd	r18, Y+1	; 0x01
 382:	22 2f       	mov	r18, r18
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	a9 01       	movw	r20, r18
 388:	48 50       	subi	r20, 0x08	; 8
 38a:	51 09       	sbc	r21, r1
 38c:	21 e0       	ldi	r18, 0x01	; 1
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_SetPinDirection+0xa8>
 392:	22 0f       	add	r18, r18
 394:	33 1f       	adc	r19, r19
 396:	4a 95       	dec	r20
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_SetPinDirection+0xa4>
 39a:	26 2b       	or	r18, r22
 39c:	fc 01       	movw	r30, r24
 39e:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
 3a0:	8a 81       	ldd	r24, Y+2	; 0x02
 3a2:	88 23       	and	r24, r24
 3a4:	c1 f4       	brne	.+48     	; 0x3d6 <DIO_SetPinDirection+0xe8>
			{
				Clear_Bit( DDRB , (PinNum-8));
 3a6:	87 e3       	ldi	r24, 0x37	; 55
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	27 e3       	ldi	r18, 0x37	; 55
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	f9 01       	movw	r30, r18
 3b0:	20 81       	ld	r18, Z
 3b2:	62 2f       	mov	r22, r18
 3b4:	29 81       	ldd	r18, Y+1	; 0x01
 3b6:	22 2f       	mov	r18, r18
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	a9 01       	movw	r20, r18
 3bc:	48 50       	subi	r20, 0x08	; 8
 3be:	51 09       	sbc	r21, r1
 3c0:	21 e0       	ldi	r18, 0x01	; 1
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_SetPinDirection+0xdc>
 3c6:	22 0f       	add	r18, r18
 3c8:	33 1f       	adc	r19, r19
 3ca:	4a 95       	dec	r20
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_SetPinDirection+0xd8>
 3ce:	20 95       	com	r18
 3d0:	26 23       	and	r18, r22
 3d2:	fc 01       	movw	r30, r24
 3d4:	20 83       	st	Z, r18
			}
		}
		if(PinNum > 15 && PinNum < 24)
 3d6:	89 81       	ldd	r24, Y+1	; 0x01
 3d8:	80 31       	cpi	r24, 0x10	; 16
 3da:	c0 f1       	brcs	.+112    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 3dc:	89 81       	ldd	r24, Y+1	; 0x01
 3de:	88 31       	cpi	r24, 0x18	; 24
 3e0:	a8 f5       	brcc	.+106    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		{
			if(PinDirection== 1)
 3e2:	8a 81       	ldd	r24, Y+2	; 0x02
 3e4:	81 30       	cpi	r24, 0x01	; 1
 3e6:	b9 f4       	brne	.+46     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			{
				Set_Bit( DDRC , (PinNum-16));
 3e8:	84 e3       	ldi	r24, 0x34	; 52
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	24 e3       	ldi	r18, 0x34	; 52
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	f9 01       	movw	r30, r18
 3f2:	20 81       	ld	r18, Z
 3f4:	62 2f       	mov	r22, r18
 3f6:	29 81       	ldd	r18, Y+1	; 0x01
 3f8:	22 2f       	mov	r18, r18
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	a9 01       	movw	r20, r18
 3fe:	40 51       	subi	r20, 0x10	; 16
 400:	51 09       	sbc	r21, r1
 402:	21 e0       	ldi	r18, 0x01	; 1
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	02 c0       	rjmp	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 408:	22 0f       	add	r18, r18
 40a:	33 1f       	adc	r19, r19
 40c:	4a 95       	dec	r20
 40e:	e2 f7       	brpl	.-8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 410:	26 2b       	or	r18, r22
 412:	fc 01       	movw	r30, r24
 414:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
 416:	8a 81       	ldd	r24, Y+2	; 0x02
 418:	88 23       	and	r24, r24
 41a:	c1 f4       	brne	.+48     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			{
				Clear_Bit( DDRC , (PinNum-16));
 41c:	84 e3       	ldi	r24, 0x34	; 52
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	24 e3       	ldi	r18, 0x34	; 52
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	f9 01       	movw	r30, r18
 426:	20 81       	ld	r18, Z
 428:	62 2f       	mov	r22, r18
 42a:	29 81       	ldd	r18, Y+1	; 0x01
 42c:	22 2f       	mov	r18, r18
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	a9 01       	movw	r20, r18
 432:	40 51       	subi	r20, 0x10	; 16
 434:	51 09       	sbc	r21, r1
 436:	21 e0       	ldi	r18, 0x01	; 1
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	02 c0       	rjmp	.+4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 43c:	22 0f       	add	r18, r18
 43e:	33 1f       	adc	r19, r19
 440:	4a 95       	dec	r20
 442:	e2 f7       	brpl	.-8      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 444:	20 95       	com	r18
 446:	26 23       	and	r18, r22
 448:	fc 01       	movw	r30, r24
 44a:	20 83       	st	Z, r18
			}
		}
		
		if(PinNum > 24 && PinNum < 32)
 44c:	89 81       	ldd	r24, Y+1	; 0x01
 44e:	89 31       	cpi	r24, 0x19	; 25
 450:	c0 f1       	brcs	.+112    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 452:	89 81       	ldd	r24, Y+1	; 0x01
 454:	80 32       	cpi	r24, 0x20	; 32
 456:	a8 f5       	brcc	.+106    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
		{
			if(PinDirection== 1)
 458:	8a 81       	ldd	r24, Y+2	; 0x02
 45a:	81 30       	cpi	r24, 0x01	; 1
 45c:	b9 f4       	brne	.+46     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
			{
				Set_Bit( DDRD , (PinNum-24));
 45e:	81 e3       	ldi	r24, 0x31	; 49
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	21 e3       	ldi	r18, 0x31	; 49
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	f9 01       	movw	r30, r18
 468:	20 81       	ld	r18, Z
 46a:	62 2f       	mov	r22, r18
 46c:	29 81       	ldd	r18, Y+1	; 0x01
 46e:	22 2f       	mov	r18, r18
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	a9 01       	movw	r20, r18
 474:	48 51       	subi	r20, 0x18	; 24
 476:	51 09       	sbc	r21, r1
 478:	21 e0       	ldi	r18, 0x01	; 1
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	02 c0       	rjmp	.+4      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 47e:	22 0f       	add	r18, r18
 480:	33 1f       	adc	r19, r19
 482:	4a 95       	dec	r20
 484:	e2 f7       	brpl	.-8      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 486:	26 2b       	or	r18, r22
 488:	fc 01       	movw	r30, r24
 48a:	20 83       	st	Z, r18
			}
			if(PinDirection== 0)
 48c:	8a 81       	ldd	r24, Y+2	; 0x02
 48e:	88 23       	and	r24, r24
 490:	c1 f4       	brne	.+48     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
			{
				Clear_Bit( DDRD , (PinNum-24));
 492:	81 e3       	ldi	r24, 0x31	; 49
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	21 e3       	ldi	r18, 0x31	; 49
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	f9 01       	movw	r30, r18
 49c:	20 81       	ld	r18, Z
 49e:	62 2f       	mov	r22, r18
 4a0:	29 81       	ldd	r18, Y+1	; 0x01
 4a2:	22 2f       	mov	r18, r18
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	a9 01       	movw	r20, r18
 4a8:	48 51       	subi	r20, 0x18	; 24
 4aa:	51 09       	sbc	r21, r1
 4ac:	21 e0       	ldi	r18, 0x01	; 1
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4b2:	22 0f       	add	r18, r18
 4b4:	33 1f       	adc	r19, r19
 4b6:	4a 95       	dec	r20
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 4ba:	20 95       	com	r18
 4bc:	26 23       	and	r18, r22
 4be:	fc 01       	movw	r30, r24
 4c0:	20 83       	st	Z, r18
			}
		}
}
 4c2:	00 00       	nop
 4c4:	0f 90       	pop	r0
 4c6:	0f 90       	pop	r0
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	08 95       	ret

000004ce <main>:
#include "DIO_Registers.h"
#include "Delay.h"


int main(void)
{
 4ce:	cf 93       	push	r28
 4d0:	df 93       	push	r29
 4d2:	cd b7       	in	r28, 0x3d	; 61
 4d4:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	/*OUTPUTS*/
	DIO_SetPinDirection(PIN12,OUTPUT);
 4d6:	61 e0       	ldi	r22, 0x01	; 1
 4d8:	8c e0       	ldi	r24, 0x0C	; 12
 4da:	0e 94 77 01 	call	0x2ee	; 0x2ee <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN13,OUTPUT);
 4de:	61 e0       	ldi	r22, 0x01	; 1
 4e0:	8d e0       	ldi	r24, 0x0D	; 13
 4e2:	0e 94 77 01 	call	0x2ee	; 0x2ee <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN14,OUTPUT);
 4e6:	61 e0       	ldi	r22, 0x01	; 1
 4e8:	8e e0       	ldi	r24, 0x0E	; 14
 4ea:	0e 94 77 01 	call	0x2ee	; 0x2ee <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN15,OUTPUT);
 4ee:	61 e0       	ldi	r22, 0x01	; 1
 4f0:	8f e0       	ldi	r24, 0x0F	; 15
 4f2:	0e 94 77 01 	call	0x2ee	; 0x2ee <DIO_SetPinDirection>
	
    while (1) 
    {
		DIO_WritePin(PIN12,HIGH);		
 4f6:	61 e0       	ldi	r22, 0x01	; 1
 4f8:	8c e0       	ldi	r24, 0x0C	; 12
 4fa:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_WritePin>
		delay_ms(100);
 4fe:	64 e6       	ldi	r22, 0x64	; 100
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 94 36 00 	call	0x6c	; 0x6c <delay_ms>
		DIO_WritePin(PIN12,LOW);
 50a:	60 e0       	ldi	r22, 0x00	; 0
 50c:	8c e0       	ldi	r24, 0x0C	; 12
 50e:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_WritePin>
		delay_ms(100);
 512:	64 e6       	ldi	r22, 0x64	; 100
 514:	70 e0       	ldi	r23, 0x00	; 0
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	0e 94 36 00 	call	0x6c	; 0x6c <delay_ms>
		DIO_WritePin(PIN13,HIGH);
 51e:	61 e0       	ldi	r22, 0x01	; 1
 520:	8d e0       	ldi	r24, 0x0D	; 13
 522:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_WritePin>
		delay_ms(100);
 526:	64 e6       	ldi	r22, 0x64	; 100
 528:	70 e0       	ldi	r23, 0x00	; 0
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 36 00 	call	0x6c	; 0x6c <delay_ms>
		DIO_WritePin(PIN13,LOW);
 532:	60 e0       	ldi	r22, 0x00	; 0
 534:	8d e0       	ldi	r24, 0x0D	; 13
 536:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_WritePin>
		delay_ms(100);
 53a:	64 e6       	ldi	r22, 0x64	; 100
 53c:	70 e0       	ldi	r23, 0x00	; 0
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	0e 94 36 00 	call	0x6c	; 0x6c <delay_ms>
		DIO_WritePin(PIN14,HIGH);
 546:	61 e0       	ldi	r22, 0x01	; 1
 548:	8e e0       	ldi	r24, 0x0E	; 14
 54a:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_WritePin>
		delay_ms(100);
 54e:	64 e6       	ldi	r22, 0x64	; 100
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	0e 94 36 00 	call	0x6c	; 0x6c <delay_ms>
		DIO_WritePin(PIN14,LOW);
 55a:	60 e0       	ldi	r22, 0x00	; 0
 55c:	8e e0       	ldi	r24, 0x0E	; 14
 55e:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_WritePin>
		delay_ms(100);
 562:	64 e6       	ldi	r22, 0x64	; 100
 564:	70 e0       	ldi	r23, 0x00	; 0
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0e 94 36 00 	call	0x6c	; 0x6c <delay_ms>
		DIO_WritePin(PIN15,HIGH);
		delay_ms(100);
		DIO_WritePin(PIN15,LOW);
		delay_ms(100);
		*/
    }
 56e:	c3 cf       	rjmp	.-122    	; 0x4f6 <main+0x28>

00000570 <__mulsi3>:
 570:	db 01       	movw	r26, r22
 572:	8f 93       	push	r24
 574:	9f 93       	push	r25
 576:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__muluhisi3>
 57a:	bf 91       	pop	r27
 57c:	af 91       	pop	r26
 57e:	a2 9f       	mul	r26, r18
 580:	80 0d       	add	r24, r0
 582:	91 1d       	adc	r25, r1
 584:	a3 9f       	mul	r26, r19
 586:	90 0d       	add	r25, r0
 588:	b2 9f       	mul	r27, r18
 58a:	90 0d       	add	r25, r0
 58c:	11 24       	eor	r1, r1
 58e:	08 95       	ret

00000590 <__udivmodsi4>:
 590:	a1 e2       	ldi	r26, 0x21	; 33
 592:	1a 2e       	mov	r1, r26
 594:	aa 1b       	sub	r26, r26
 596:	bb 1b       	sub	r27, r27
 598:	fd 01       	movw	r30, r26
 59a:	0d c0       	rjmp	.+26     	; 0x5b6 <__udivmodsi4_ep>

0000059c <__udivmodsi4_loop>:
 59c:	aa 1f       	adc	r26, r26
 59e:	bb 1f       	adc	r27, r27
 5a0:	ee 1f       	adc	r30, r30
 5a2:	ff 1f       	adc	r31, r31
 5a4:	a2 17       	cp	r26, r18
 5a6:	b3 07       	cpc	r27, r19
 5a8:	e4 07       	cpc	r30, r20
 5aa:	f5 07       	cpc	r31, r21
 5ac:	20 f0       	brcs	.+8      	; 0x5b6 <__udivmodsi4_ep>
 5ae:	a2 1b       	sub	r26, r18
 5b0:	b3 0b       	sbc	r27, r19
 5b2:	e4 0b       	sbc	r30, r20
 5b4:	f5 0b       	sbc	r31, r21

000005b6 <__udivmodsi4_ep>:
 5b6:	66 1f       	adc	r22, r22
 5b8:	77 1f       	adc	r23, r23
 5ba:	88 1f       	adc	r24, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	1a 94       	dec	r1
 5c0:	69 f7       	brne	.-38     	; 0x59c <__udivmodsi4_loop>
 5c2:	60 95       	com	r22
 5c4:	70 95       	com	r23
 5c6:	80 95       	com	r24
 5c8:	90 95       	com	r25
 5ca:	9b 01       	movw	r18, r22
 5cc:	ac 01       	movw	r20, r24
 5ce:	bd 01       	movw	r22, r26
 5d0:	cf 01       	movw	r24, r30
 5d2:	08 95       	ret

000005d4 <__muluhisi3>:
 5d4:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__umulhisi3>
 5d8:	a5 9f       	mul	r26, r21
 5da:	90 0d       	add	r25, r0
 5dc:	b4 9f       	mul	r27, r20
 5de:	90 0d       	add	r25, r0
 5e0:	a4 9f       	mul	r26, r20
 5e2:	80 0d       	add	r24, r0
 5e4:	91 1d       	adc	r25, r1
 5e6:	11 24       	eor	r1, r1
 5e8:	08 95       	ret

000005ea <__umulhisi3>:
 5ea:	a2 9f       	mul	r26, r18
 5ec:	b0 01       	movw	r22, r0
 5ee:	b3 9f       	mul	r27, r19
 5f0:	c0 01       	movw	r24, r0
 5f2:	a3 9f       	mul	r26, r19
 5f4:	70 0d       	add	r23, r0
 5f6:	81 1d       	adc	r24, r1
 5f8:	11 24       	eor	r1, r1
 5fa:	91 1d       	adc	r25, r1
 5fc:	b2 9f       	mul	r27, r18
 5fe:	70 0d       	add	r23, r0
 600:	81 1d       	adc	r24, r1
 602:	11 24       	eor	r1, r1
 604:	91 1d       	adc	r25, r1
 606:	08 95       	ret

00000608 <_exit>:
 608:	f8 94       	cli

0000060a <__stop_program>:
 60a:	ff cf       	rjmp	.-2      	; 0x60a <__stop_program>
